// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

// ignore_for_file: unnecessary_brace_in_string_interps, unnecessary_this
class c2rsc_airfield extends DataClass implements Insertable<c2rsc_airfield> {
  final int id;
  final double latitude;
  final double longitude;
  final String name_pm;
  final String shortname;
  final String icaocode;
  final String arpt_ident;
  final String usage_type;
  final String statusname;
  final String airfieldtype_pm;
  final String reason;
  final String country_code;
  c2rsc_airfield(
      {@required this.id,
      this.latitude,
      this.longitude,
      this.name_pm,
      this.shortname,
      this.icaocode,
      this.arpt_ident,
      this.usage_type,
      this.statusname,
      this.airfieldtype_pm,
      this.reason,
      this.country_code});
  factory c2rsc_airfield.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final doubleType = db.typeSystem.forDartType<double>();
    final stringType = db.typeSystem.forDartType<String>();
    return c2rsc_airfield(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      latitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}latitude']),
      longitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}longitude']),
      name_pm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}name_pm']),
      shortname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}shortname']),
      icaocode: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}icaocode']),
      arpt_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arpt_ident']),
      usage_type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}usage_type']),
      statusname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}statusname']),
      airfieldtype_pm: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}airfieldtype_pm']),
      reason:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}reason']),
      country_code: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}country_code']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || latitude != null) {
      map['latitude'] = Variable<double>(latitude);
    }
    if (!nullToAbsent || longitude != null) {
      map['longitude'] = Variable<double>(longitude);
    }
    if (!nullToAbsent || name_pm != null) {
      map['name_pm'] = Variable<String>(name_pm);
    }
    if (!nullToAbsent || shortname != null) {
      map['shortname'] = Variable<String>(shortname);
    }
    if (!nullToAbsent || icaocode != null) {
      map['icaocode'] = Variable<String>(icaocode);
    }
    if (!nullToAbsent || arpt_ident != null) {
      map['arpt_ident'] = Variable<String>(arpt_ident);
    }
    if (!nullToAbsent || usage_type != null) {
      map['usage_type'] = Variable<String>(usage_type);
    }
    if (!nullToAbsent || statusname != null) {
      map['statusname'] = Variable<String>(statusname);
    }
    if (!nullToAbsent || airfieldtype_pm != null) {
      map['airfieldtype_pm'] = Variable<String>(airfieldtype_pm);
    }
    if (!nullToAbsent || reason != null) {
      map['reason'] = Variable<String>(reason);
    }
    if (!nullToAbsent || country_code != null) {
      map['country_code'] = Variable<String>(country_code);
    }
    return map;
  }

  factory c2rsc_airfield.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return c2rsc_airfield(
      id: serializer.fromJson<int>(json['id']),
      latitude: serializer.fromJson<double>(json['latitude']),
      longitude: serializer.fromJson<double>(json['longitude']),
      name_pm: serializer.fromJson<String>(json['name_pm']),
      shortname: serializer.fromJson<String>(json['shortname']),
      icaocode: serializer.fromJson<String>(json['icaocode']),
      arpt_ident: serializer.fromJson<String>(json['arpt_ident']),
      usage_type: serializer.fromJson<String>(json['usage_type']),
      statusname: serializer.fromJson<String>(json['statusname']),
      airfieldtype_pm: serializer.fromJson<String>(json['airfieldtype_pm']),
      reason: serializer.fromJson<String>(json['reason']),
      country_code: serializer.fromJson<String>(json['country_code']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'latitude': serializer.toJson<double>(latitude),
      'longitude': serializer.toJson<double>(longitude),
      'name_pm': serializer.toJson<String>(name_pm),
      'shortname': serializer.toJson<String>(shortname),
      'icaocode': serializer.toJson<String>(icaocode),
      'arpt_ident': serializer.toJson<String>(arpt_ident),
      'usage_type': serializer.toJson<String>(usage_type),
      'statusname': serializer.toJson<String>(statusname),
      'airfieldtype_pm': serializer.toJson<String>(airfieldtype_pm),
      'reason': serializer.toJson<String>(reason),
      'country_code': serializer.toJson<String>(country_code),
    };
  }

  c2rsc_airfield copyWith(
          {int id,
          double latitude,
          double longitude,
          String name_pm,
          String shortname,
          String icaocode,
          String arpt_ident,
          String usage_type,
          String statusname,
          String airfieldtype_pm,
          String reason,
          String country_code}) =>
      c2rsc_airfield(
        id: id ?? this.id,
        latitude: latitude ?? this.latitude,
        longitude: longitude ?? this.longitude,
        name_pm: name_pm ?? this.name_pm,
        shortname: shortname ?? this.shortname,
        icaocode: icaocode ?? this.icaocode,
        arpt_ident: arpt_ident ?? this.arpt_ident,
        usage_type: usage_type ?? this.usage_type,
        statusname: statusname ?? this.statusname,
        airfieldtype_pm: airfieldtype_pm ?? this.airfieldtype_pm,
        reason: reason ?? this.reason,
        country_code: country_code ?? this.country_code,
      );
  @override
  String toString() {
    return (StringBuffer('c2rsc_airfield(')
          ..write('id: $id, ')
          ..write('latitude: $latitude, ')
          ..write('longitude: $longitude, ')
          ..write('name_pm: $name_pm, ')
          ..write('shortname: $shortname, ')
          ..write('icaocode: $icaocode, ')
          ..write('arpt_ident: $arpt_ident, ')
          ..write('usage_type: $usage_type, ')
          ..write('statusname: $statusname, ')
          ..write('airfieldtype_pm: $airfieldtype_pm, ')
          ..write('reason: $reason, ')
          ..write('country_code: $country_code')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          latitude.hashCode,
          $mrjc(
              longitude.hashCode,
              $mrjc(
                  name_pm.hashCode,
                  $mrjc(
                      shortname.hashCode,
                      $mrjc(
                          icaocode.hashCode,
                          $mrjc(
                              arpt_ident.hashCode,
                              $mrjc(
                                  usage_type.hashCode,
                                  $mrjc(
                                      statusname.hashCode,
                                      $mrjc(
                                          airfieldtype_pm.hashCode,
                                          $mrjc(reason.hashCode,
                                              country_code.hashCode))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is c2rsc_airfield &&
          other.id == this.id &&
          other.latitude == this.latitude &&
          other.longitude == this.longitude &&
          other.name_pm == this.name_pm &&
          other.shortname == this.shortname &&
          other.icaocode == this.icaocode &&
          other.arpt_ident == this.arpt_ident &&
          other.usage_type == this.usage_type &&
          other.statusname == this.statusname &&
          other.airfieldtype_pm == this.airfieldtype_pm &&
          other.reason == this.reason &&
          other.country_code == this.country_code);
}

class C2rscAirfieldCompanion extends UpdateCompanion<c2rsc_airfield> {
  final Value<int> id;
  final Value<double> latitude;
  final Value<double> longitude;
  final Value<String> name_pm;
  final Value<String> shortname;
  final Value<String> icaocode;
  final Value<String> arpt_ident;
  final Value<String> usage_type;
  final Value<String> statusname;
  final Value<String> airfieldtype_pm;
  final Value<String> reason;
  final Value<String> country_code;
  const C2rscAirfieldCompanion({
    this.id = const Value.absent(),
    this.latitude = const Value.absent(),
    this.longitude = const Value.absent(),
    this.name_pm = const Value.absent(),
    this.shortname = const Value.absent(),
    this.icaocode = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.usage_type = const Value.absent(),
    this.statusname = const Value.absent(),
    this.airfieldtype_pm = const Value.absent(),
    this.reason = const Value.absent(),
    this.country_code = const Value.absent(),
  });
  C2rscAirfieldCompanion.insert({
    this.id = const Value.absent(),
    this.latitude = const Value.absent(),
    this.longitude = const Value.absent(),
    this.name_pm = const Value.absent(),
    this.shortname = const Value.absent(),
    this.icaocode = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.usage_type = const Value.absent(),
    this.statusname = const Value.absent(),
    this.airfieldtype_pm = const Value.absent(),
    this.reason = const Value.absent(),
    this.country_code = const Value.absent(),
  });
  static Insertable<c2rsc_airfield> custom({
    Expression<int> id,
    Expression<double> latitude,
    Expression<double> longitude,
    Expression<String> name_pm,
    Expression<String> shortname,
    Expression<String> icaocode,
    Expression<String> arpt_ident,
    Expression<String> usage_type,
    Expression<String> statusname,
    Expression<String> airfieldtype_pm,
    Expression<String> reason,
    Expression<String> country_code,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (latitude != null) 'latitude': latitude,
      if (longitude != null) 'longitude': longitude,
      if (name_pm != null) 'name_pm': name_pm,
      if (shortname != null) 'shortname': shortname,
      if (icaocode != null) 'icaocode': icaocode,
      if (arpt_ident != null) 'arpt_ident': arpt_ident,
      if (usage_type != null) 'usage_type': usage_type,
      if (statusname != null) 'statusname': statusname,
      if (airfieldtype_pm != null) 'airfieldtype_pm': airfieldtype_pm,
      if (reason != null) 'reason': reason,
      if (country_code != null) 'country_code': country_code,
    });
  }

  C2rscAirfieldCompanion copyWith(
      {Value<int> id,
      Value<double> latitude,
      Value<double> longitude,
      Value<String> name_pm,
      Value<String> shortname,
      Value<String> icaocode,
      Value<String> arpt_ident,
      Value<String> usage_type,
      Value<String> statusname,
      Value<String> airfieldtype_pm,
      Value<String> reason,
      Value<String> country_code}) {
    return C2rscAirfieldCompanion(
      id: id ?? this.id,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
      name_pm: name_pm ?? this.name_pm,
      shortname: shortname ?? this.shortname,
      icaocode: icaocode ?? this.icaocode,
      arpt_ident: arpt_ident ?? this.arpt_ident,
      usage_type: usage_type ?? this.usage_type,
      statusname: statusname ?? this.statusname,
      airfieldtype_pm: airfieldtype_pm ?? this.airfieldtype_pm,
      reason: reason ?? this.reason,
      country_code: country_code ?? this.country_code,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (latitude.present) {
      map['latitude'] = Variable<double>(latitude.value);
    }
    if (longitude.present) {
      map['longitude'] = Variable<double>(longitude.value);
    }
    if (name_pm.present) {
      map['name_pm'] = Variable<String>(name_pm.value);
    }
    if (shortname.present) {
      map['shortname'] = Variable<String>(shortname.value);
    }
    if (icaocode.present) {
      map['icaocode'] = Variable<String>(icaocode.value);
    }
    if (arpt_ident.present) {
      map['arpt_ident'] = Variable<String>(arpt_ident.value);
    }
    if (usage_type.present) {
      map['usage_type'] = Variable<String>(usage_type.value);
    }
    if (statusname.present) {
      map['statusname'] = Variable<String>(statusname.value);
    }
    if (airfieldtype_pm.present) {
      map['airfieldtype_pm'] = Variable<String>(airfieldtype_pm.value);
    }
    if (reason.present) {
      map['reason'] = Variable<String>(reason.value);
    }
    if (country_code.present) {
      map['country_code'] = Variable<String>(country_code.value);
    }
    return map;
  }
}

class $C2rscAirfieldTable extends C2rscAirfield
    with TableInfo<$C2rscAirfieldTable, c2rsc_airfield> {
  final GeneratedDatabase _db;
  final String _alias;
  $C2rscAirfieldTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _latitudeMeta = const VerificationMeta('latitude');
  GeneratedRealColumn _latitude;
  @override
  GeneratedRealColumn get latitude => _latitude ??= _constructLatitude();
  GeneratedRealColumn _constructLatitude() {
    return GeneratedRealColumn(
      'latitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _longitudeMeta = const VerificationMeta('longitude');
  GeneratedRealColumn _longitude;
  @override
  GeneratedRealColumn get longitude => _longitude ??= _constructLongitude();
  GeneratedRealColumn _constructLongitude() {
    return GeneratedRealColumn(
      'longitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _name_pmMeta = const VerificationMeta('name_pm');
  GeneratedTextColumn _name_pm;
  @override
  GeneratedTextColumn get name_pm => _name_pm ??= _constructNamePm();
  GeneratedTextColumn _constructNamePm() {
    return GeneratedTextColumn(
      'name_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _shortnameMeta = const VerificationMeta('shortname');
  GeneratedTextColumn _shortname;
  @override
  GeneratedTextColumn get shortname => _shortname ??= _constructShortname();
  GeneratedTextColumn _constructShortname() {
    return GeneratedTextColumn(
      'shortname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaocodeMeta = const VerificationMeta('icaocode');
  GeneratedTextColumn _icaocode;
  @override
  GeneratedTextColumn get icaocode => _icaocode ??= _constructIcaocode();
  GeneratedTextColumn _constructIcaocode() {
    return GeneratedTextColumn(
      'icaocode',
      $tableName,
      true,
    );
  }

  final VerificationMeta _arpt_identMeta = const VerificationMeta('arpt_ident');
  GeneratedTextColumn _arpt_ident;
  @override
  GeneratedTextColumn get arpt_ident => _arpt_ident ??= _constructArptIdent();
  GeneratedTextColumn _constructArptIdent() {
    return GeneratedTextColumn(
      'arpt_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _usage_typeMeta = const VerificationMeta('usage_type');
  GeneratedTextColumn _usage_type;
  @override
  GeneratedTextColumn get usage_type => _usage_type ??= _constructUsageType();
  GeneratedTextColumn _constructUsageType() {
    return GeneratedTextColumn(
      'usage_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _statusnameMeta = const VerificationMeta('statusname');
  GeneratedTextColumn _statusname;
  @override
  GeneratedTextColumn get statusname => _statusname ??= _constructStatusname();
  GeneratedTextColumn _constructStatusname() {
    return GeneratedTextColumn(
      'statusname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _airfieldtype_pmMeta =
      const VerificationMeta('airfieldtype_pm');
  GeneratedTextColumn _airfieldtype_pm;
  @override
  GeneratedTextColumn get airfieldtype_pm =>
      _airfieldtype_pm ??= _constructAirfieldtypePm();
  GeneratedTextColumn _constructAirfieldtypePm() {
    return GeneratedTextColumn(
      'airfieldtype_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _reasonMeta = const VerificationMeta('reason');
  GeneratedTextColumn _reason;
  @override
  GeneratedTextColumn get reason => _reason ??= _constructReason();
  GeneratedTextColumn _constructReason() {
    return GeneratedTextColumn(
      'reason',
      $tableName,
      true,
    );
  }

  final VerificationMeta _country_codeMeta =
      const VerificationMeta('country_code');
  GeneratedTextColumn _country_code;
  @override
  GeneratedTextColumn get country_code =>
      _country_code ??= _constructCountryCode();
  GeneratedTextColumn _constructCountryCode() {
    return GeneratedTextColumn(
      'country_code',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        latitude,
        longitude,
        name_pm,
        shortname,
        icaocode,
        arpt_ident,
        usage_type,
        statusname,
        airfieldtype_pm,
        reason,
        country_code
      ];
  @override
  $C2rscAirfieldTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'c2rsc_airfield';
  @override
  final String actualTableName = 'c2rsc_airfield';
  @override
  VerificationContext validateIntegrity(Insertable<c2rsc_airfield> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('latitude')) {
      context.handle(_latitudeMeta,
          latitude.isAcceptableOrUnknown(data['latitude'], _latitudeMeta));
    }
    if (data.containsKey('longitude')) {
      context.handle(_longitudeMeta,
          longitude.isAcceptableOrUnknown(data['longitude'], _longitudeMeta));
    }
    if (data.containsKey('name_pm')) {
      context.handle(_name_pmMeta,
          name_pm.isAcceptableOrUnknown(data['name_pm'], _name_pmMeta));
    }
    if (data.containsKey('shortname')) {
      context.handle(_shortnameMeta,
          shortname.isAcceptableOrUnknown(data['shortname'], _shortnameMeta));
    }
    if (data.containsKey('icaocode')) {
      context.handle(_icaocodeMeta,
          icaocode.isAcceptableOrUnknown(data['icaocode'], _icaocodeMeta));
    }
    if (data.containsKey('arpt_ident')) {
      context.handle(
          _arpt_identMeta,
          arpt_ident.isAcceptableOrUnknown(
              data['arpt_ident'], _arpt_identMeta));
    }
    if (data.containsKey('usage_type')) {
      context.handle(
          _usage_typeMeta,
          usage_type.isAcceptableOrUnknown(
              data['usage_type'], _usage_typeMeta));
    }
    if (data.containsKey('statusname')) {
      context.handle(
          _statusnameMeta,
          statusname.isAcceptableOrUnknown(
              data['statusname'], _statusnameMeta));
    }
    if (data.containsKey('airfieldtype_pm')) {
      context.handle(
          _airfieldtype_pmMeta,
          airfieldtype_pm.isAcceptableOrUnknown(
              data['airfieldtype_pm'], _airfieldtype_pmMeta));
    }
    if (data.containsKey('reason')) {
      context.handle(_reasonMeta,
          reason.isAcceptableOrUnknown(data['reason'], _reasonMeta));
    }
    if (data.containsKey('country_code')) {
      context.handle(
          _country_codeMeta,
          country_code.isAcceptableOrUnknown(
              data['country_code'], _country_codeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  c2rsc_airfield map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return c2rsc_airfield.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $C2rscAirfieldTable createAlias(String alias) {
    return $C2rscAirfieldTable(_db, alias);
  }
}

class c2rsc_navigation_facility extends DataClass
    implements Insertable<c2rsc_navigation_facility> {
  final int id;
  final String class_pm;
  final int airfield_id;
  final int runway_id;
  c2rsc_navigation_facility(
      {@required this.id, this.class_pm, this.airfield_id, this.runway_id});
  factory c2rsc_navigation_facility.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return c2rsc_navigation_facility(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      class_pm: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}class_pm']),
      airfield_id: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}airfield_id']),
      runway_id:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}runway_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || class_pm != null) {
      map['class_pm'] = Variable<String>(class_pm);
    }
    if (!nullToAbsent || airfield_id != null) {
      map['airfield_id'] = Variable<int>(airfield_id);
    }
    if (!nullToAbsent || runway_id != null) {
      map['runway_id'] = Variable<int>(runway_id);
    }
    return map;
  }

  factory c2rsc_navigation_facility.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return c2rsc_navigation_facility(
      id: serializer.fromJson<int>(json['id']),
      class_pm: serializer.fromJson<String>(json['class_pm']),
      airfield_id: serializer.fromJson<int>(json['airfield_id']),
      runway_id: serializer.fromJson<int>(json['runway_id']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'class_pm': serializer.toJson<String>(class_pm),
      'airfield_id': serializer.toJson<int>(airfield_id),
      'runway_id': serializer.toJson<int>(runway_id),
    };
  }

  c2rsc_navigation_facility copyWith(
          {int id, String class_pm, int airfield_id, int runway_id}) =>
      c2rsc_navigation_facility(
        id: id ?? this.id,
        class_pm: class_pm ?? this.class_pm,
        airfield_id: airfield_id ?? this.airfield_id,
        runway_id: runway_id ?? this.runway_id,
      );
  @override
  String toString() {
    return (StringBuffer('c2rsc_navigation_facility(')
          ..write('id: $id, ')
          ..write('class_pm: $class_pm, ')
          ..write('airfield_id: $airfield_id, ')
          ..write('runway_id: $runway_id')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          class_pm.hashCode, $mrjc(airfield_id.hashCode, runway_id.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is c2rsc_navigation_facility &&
          other.id == this.id &&
          other.class_pm == this.class_pm &&
          other.airfield_id == this.airfield_id &&
          other.runway_id == this.runway_id);
}

class C2rscNavigationFacilityCompanion
    extends UpdateCompanion<c2rsc_navigation_facility> {
  final Value<int> id;
  final Value<String> class_pm;
  final Value<int> airfield_id;
  final Value<int> runway_id;
  const C2rscNavigationFacilityCompanion({
    this.id = const Value.absent(),
    this.class_pm = const Value.absent(),
    this.airfield_id = const Value.absent(),
    this.runway_id = const Value.absent(),
  });
  C2rscNavigationFacilityCompanion.insert({
    this.id = const Value.absent(),
    this.class_pm = const Value.absent(),
    this.airfield_id = const Value.absent(),
    this.runway_id = const Value.absent(),
  });
  static Insertable<c2rsc_navigation_facility> custom({
    Expression<int> id,
    Expression<String> class_pm,
    Expression<int> airfield_id,
    Expression<int> runway_id,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (class_pm != null) 'class_pm': class_pm,
      if (airfield_id != null) 'airfield_id': airfield_id,
      if (runway_id != null) 'runway_id': runway_id,
    });
  }

  C2rscNavigationFacilityCompanion copyWith(
      {Value<int> id,
      Value<String> class_pm,
      Value<int> airfield_id,
      Value<int> runway_id}) {
    return C2rscNavigationFacilityCompanion(
      id: id ?? this.id,
      class_pm: class_pm ?? this.class_pm,
      airfield_id: airfield_id ?? this.airfield_id,
      runway_id: runway_id ?? this.runway_id,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (class_pm.present) {
      map['class_pm'] = Variable<String>(class_pm.value);
    }
    if (airfield_id.present) {
      map['airfield_id'] = Variable<int>(airfield_id.value);
    }
    if (runway_id.present) {
      map['runway_id'] = Variable<int>(runway_id.value);
    }
    return map;
  }
}

class $C2rscNavigationFacilityTable extends C2rscNavigationFacility
    with TableInfo<$C2rscNavigationFacilityTable, c2rsc_navigation_facility> {
  final GeneratedDatabase _db;
  final String _alias;
  $C2rscNavigationFacilityTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _class_pmMeta = const VerificationMeta('class_pm');
  GeneratedTextColumn _class_pm;
  @override
  GeneratedTextColumn get class_pm => _class_pm ??= _constructClassPm();
  GeneratedTextColumn _constructClassPm() {
    return GeneratedTextColumn(
      'class_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _airfield_idMeta =
      const VerificationMeta('airfield_id');
  GeneratedIntColumn _airfield_id;
  @override
  GeneratedIntColumn get airfield_id => _airfield_id ??= _constructAirfieldId();
  GeneratedIntColumn _constructAirfieldId() {
    return GeneratedIntColumn('airfield_id', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES c2rsc_airfield(id)');
  }

  final VerificationMeta _runway_idMeta = const VerificationMeta('runway_id');
  GeneratedIntColumn _runway_id;
  @override
  GeneratedIntColumn get runway_id => _runway_id ??= _constructRunwayId();
  GeneratedIntColumn _constructRunwayId() {
    return GeneratedIntColumn('runway_id', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES c2rsc_runway(id)');
  }

  @override
  List<GeneratedColumn> get $columns => [id, class_pm, airfield_id, runway_id];
  @override
  $C2rscNavigationFacilityTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'c2rsc_navigation_facility';
  @override
  final String actualTableName = 'c2rsc_navigation_facility';
  @override
  VerificationContext validateIntegrity(
      Insertable<c2rsc_navigation_facility> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('class_pm')) {
      context.handle(_class_pmMeta,
          class_pm.isAcceptableOrUnknown(data['class_pm'], _class_pmMeta));
    }
    if (data.containsKey('airfield_id')) {
      context.handle(
          _airfield_idMeta,
          airfield_id.isAcceptableOrUnknown(
              data['airfield_id'], _airfield_idMeta));
    }
    if (data.containsKey('runway_id')) {
      context.handle(_runway_idMeta,
          runway_id.isAcceptableOrUnknown(data['runway_id'], _runway_idMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  c2rsc_navigation_facility map(Map<String, dynamic> data,
      {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return c2rsc_navigation_facility.fromData(data, _db,
        prefix: effectivePrefix);
  }

  @override
  $C2rscNavigationFacilityTable createAlias(String alias) {
    return $C2rscNavigationFacilityTable(_db, alias);
  }
}

class c2rsc_runway extends DataClass implements Insertable<c2rsc_runway> {
  final int id;
  final String name_pm;
  final bool is_main_runway;
  final String arpt_ident;
  final String high_ident;
  final double lcnvalue_pm;
  final double length_pm;
  final String low_ident;
  final String runwaystatus;
  final String structure_pm;
  final double width_pm;
  final double he_latitude;
  final double he_longitude;
  final double he_altitude;
  final double he_slope;
  final double he_magnetic_heading;
  final double he_true_heading;
  final double le_latitude;
  final double le_longitude;
  final double le_altitude;
  final double le_slope;
  final double le_magnetic_heading;
  final double le_true_heading;
  final DateTime etro;
  final String statusname;
  final int airfield_id;
  c2rsc_runway(
      {@required this.id,
      this.name_pm,
      this.is_main_runway,
      this.arpt_ident,
      this.high_ident,
      this.lcnvalue_pm,
      this.length_pm,
      this.low_ident,
      this.runwaystatus,
      this.structure_pm,
      this.width_pm,
      this.he_latitude,
      this.he_longitude,
      this.he_altitude,
      this.he_slope,
      this.he_magnetic_heading,
      this.he_true_heading,
      this.le_latitude,
      this.le_longitude,
      this.le_altitude,
      this.le_slope,
      this.le_magnetic_heading,
      this.le_true_heading,
      this.etro,
      this.statusname,
      this.airfield_id});
  factory c2rsc_runway.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final boolType = db.typeSystem.forDartType<bool>();
    final doubleType = db.typeSystem.forDartType<double>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return c2rsc_runway(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      name_pm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}name_pm']),
      is_main_runway: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}is_main_runway']),
      arpt_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arpt_ident']),
      high_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}high_ident']),
      lcnvalue_pm: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}lcnvalue_pm']),
      length_pm: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}length_pm']),
      low_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}low_ident']),
      runwaystatus: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}runwaystatus']),
      structure_pm: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}structure_pm']),
      width_pm: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}width_pm']),
      he_latitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}he_latitude']),
      he_longitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}he_longitude']),
      he_altitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}he_altitude']),
      he_slope: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}he_slope']),
      he_magnetic_heading: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}he_magnetic_heading']),
      he_true_heading: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}he_true_heading']),
      le_latitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}le_latitude']),
      le_longitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}le_longitude']),
      le_altitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}le_altitude']),
      le_slope: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}le_slope']),
      le_magnetic_heading: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}le_magnetic_heading']),
      le_true_heading: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}le_true_heading']),
      etro:
          dateTimeType.mapFromDatabaseResponse(data['${effectivePrefix}etro']),
      statusname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}statusname']),
      airfield_id: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}airfield_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || name_pm != null) {
      map['name_pm'] = Variable<String>(name_pm);
    }
    if (!nullToAbsent || is_main_runway != null) {
      map['is_main_runway'] = Variable<bool>(is_main_runway);
    }
    if (!nullToAbsent || arpt_ident != null) {
      map['arpt_ident'] = Variable<String>(arpt_ident);
    }
    if (!nullToAbsent || high_ident != null) {
      map['high_ident'] = Variable<String>(high_ident);
    }
    if (!nullToAbsent || lcnvalue_pm != null) {
      map['lcnvalue_pm'] = Variable<double>(lcnvalue_pm);
    }
    if (!nullToAbsent || length_pm != null) {
      map['length_pm'] = Variable<double>(length_pm);
    }
    if (!nullToAbsent || low_ident != null) {
      map['low_ident'] = Variable<String>(low_ident);
    }
    if (!nullToAbsent || runwaystatus != null) {
      map['runwaystatus'] = Variable<String>(runwaystatus);
    }
    if (!nullToAbsent || structure_pm != null) {
      map['structure_pm'] = Variable<String>(structure_pm);
    }
    if (!nullToAbsent || width_pm != null) {
      map['width_pm'] = Variable<double>(width_pm);
    }
    if (!nullToAbsent || he_latitude != null) {
      map['he_latitude'] = Variable<double>(he_latitude);
    }
    if (!nullToAbsent || he_longitude != null) {
      map['he_longitude'] = Variable<double>(he_longitude);
    }
    if (!nullToAbsent || he_altitude != null) {
      map['he_altitude'] = Variable<double>(he_altitude);
    }
    if (!nullToAbsent || he_slope != null) {
      map['he_slope'] = Variable<double>(he_slope);
    }
    if (!nullToAbsent || he_magnetic_heading != null) {
      map['he_magnetic_heading'] = Variable<double>(he_magnetic_heading);
    }
    if (!nullToAbsent || he_true_heading != null) {
      map['he_true_heading'] = Variable<double>(he_true_heading);
    }
    if (!nullToAbsent || le_latitude != null) {
      map['le_latitude'] = Variable<double>(le_latitude);
    }
    if (!nullToAbsent || le_longitude != null) {
      map['le_longitude'] = Variable<double>(le_longitude);
    }
    if (!nullToAbsent || le_altitude != null) {
      map['le_altitude'] = Variable<double>(le_altitude);
    }
    if (!nullToAbsent || le_slope != null) {
      map['le_slope'] = Variable<double>(le_slope);
    }
    if (!nullToAbsent || le_magnetic_heading != null) {
      map['le_magnetic_heading'] = Variable<double>(le_magnetic_heading);
    }
    if (!nullToAbsent || le_true_heading != null) {
      map['le_true_heading'] = Variable<double>(le_true_heading);
    }
    if (!nullToAbsent || etro != null) {
      map['etro'] = Variable<DateTime>(etro);
    }
    if (!nullToAbsent || statusname != null) {
      map['statusname'] = Variable<String>(statusname);
    }
    if (!nullToAbsent || airfield_id != null) {
      map['airfield_id'] = Variable<int>(airfield_id);
    }
    return map;
  }

  factory c2rsc_runway.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return c2rsc_runway(
      id: serializer.fromJson<int>(json['id']),
      name_pm: serializer.fromJson<String>(json['name_pm']),
      is_main_runway: serializer.fromJson<bool>(json['is_main_runway']),
      arpt_ident: serializer.fromJson<String>(json['arpt_ident']),
      high_ident: serializer.fromJson<String>(json['high_ident']),
      lcnvalue_pm: serializer.fromJson<double>(json['lcnvalue_pm']),
      length_pm: serializer.fromJson<double>(json['length_pm']),
      low_ident: serializer.fromJson<String>(json['low_ident']),
      runwaystatus: serializer.fromJson<String>(json['runwaystatus']),
      structure_pm: serializer.fromJson<String>(json['structure_pm']),
      width_pm: serializer.fromJson<double>(json['width_pm']),
      he_latitude: serializer.fromJson<double>(json['he_latitude']),
      he_longitude: serializer.fromJson<double>(json['he_longitude']),
      he_altitude: serializer.fromJson<double>(json['he_altitude']),
      he_slope: serializer.fromJson<double>(json['he_slope']),
      he_magnetic_heading:
          serializer.fromJson<double>(json['he_magnetic_heading']),
      he_true_heading: serializer.fromJson<double>(json['he_true_heading']),
      le_latitude: serializer.fromJson<double>(json['le_latitude']),
      le_longitude: serializer.fromJson<double>(json['le_longitude']),
      le_altitude: serializer.fromJson<double>(json['le_altitude']),
      le_slope: serializer.fromJson<double>(json['le_slope']),
      le_magnetic_heading:
          serializer.fromJson<double>(json['le_magnetic_heading']),
      le_true_heading: serializer.fromJson<double>(json['le_true_heading']),
      etro: serializer.fromJson<DateTime>(json['etro']),
      statusname: serializer.fromJson<String>(json['statusname']),
      airfield_id: serializer.fromJson<int>(json['airfield_id']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'name_pm': serializer.toJson<String>(name_pm),
      'is_main_runway': serializer.toJson<bool>(is_main_runway),
      'arpt_ident': serializer.toJson<String>(arpt_ident),
      'high_ident': serializer.toJson<String>(high_ident),
      'lcnvalue_pm': serializer.toJson<double>(lcnvalue_pm),
      'length_pm': serializer.toJson<double>(length_pm),
      'low_ident': serializer.toJson<String>(low_ident),
      'runwaystatus': serializer.toJson<String>(runwaystatus),
      'structure_pm': serializer.toJson<String>(structure_pm),
      'width_pm': serializer.toJson<double>(width_pm),
      'he_latitude': serializer.toJson<double>(he_latitude),
      'he_longitude': serializer.toJson<double>(he_longitude),
      'he_altitude': serializer.toJson<double>(he_altitude),
      'he_slope': serializer.toJson<double>(he_slope),
      'he_magnetic_heading': serializer.toJson<double>(he_magnetic_heading),
      'he_true_heading': serializer.toJson<double>(he_true_heading),
      'le_latitude': serializer.toJson<double>(le_latitude),
      'le_longitude': serializer.toJson<double>(le_longitude),
      'le_altitude': serializer.toJson<double>(le_altitude),
      'le_slope': serializer.toJson<double>(le_slope),
      'le_magnetic_heading': serializer.toJson<double>(le_magnetic_heading),
      'le_true_heading': serializer.toJson<double>(le_true_heading),
      'etro': serializer.toJson<DateTime>(etro),
      'statusname': serializer.toJson<String>(statusname),
      'airfield_id': serializer.toJson<int>(airfield_id),
    };
  }

  c2rsc_runway copyWith(
          {int id,
          String name_pm,
          bool is_main_runway,
          String arpt_ident,
          String high_ident,
          double lcnvalue_pm,
          double length_pm,
          String low_ident,
          String runwaystatus,
          String structure_pm,
          double width_pm,
          double he_latitude,
          double he_longitude,
          double he_altitude,
          double he_slope,
          double he_magnetic_heading,
          double he_true_heading,
          double le_latitude,
          double le_longitude,
          double le_altitude,
          double le_slope,
          double le_magnetic_heading,
          double le_true_heading,
          DateTime etro,
          String statusname,
          int airfield_id}) =>
      c2rsc_runway(
        id: id ?? this.id,
        name_pm: name_pm ?? this.name_pm,
        is_main_runway: is_main_runway ?? this.is_main_runway,
        arpt_ident: arpt_ident ?? this.arpt_ident,
        high_ident: high_ident ?? this.high_ident,
        lcnvalue_pm: lcnvalue_pm ?? this.lcnvalue_pm,
        length_pm: length_pm ?? this.length_pm,
        low_ident: low_ident ?? this.low_ident,
        runwaystatus: runwaystatus ?? this.runwaystatus,
        structure_pm: structure_pm ?? this.structure_pm,
        width_pm: width_pm ?? this.width_pm,
        he_latitude: he_latitude ?? this.he_latitude,
        he_longitude: he_longitude ?? this.he_longitude,
        he_altitude: he_altitude ?? this.he_altitude,
        he_slope: he_slope ?? this.he_slope,
        he_magnetic_heading: he_magnetic_heading ?? this.he_magnetic_heading,
        he_true_heading: he_true_heading ?? this.he_true_heading,
        le_latitude: le_latitude ?? this.le_latitude,
        le_longitude: le_longitude ?? this.le_longitude,
        le_altitude: le_altitude ?? this.le_altitude,
        le_slope: le_slope ?? this.le_slope,
        le_magnetic_heading: le_magnetic_heading ?? this.le_magnetic_heading,
        le_true_heading: le_true_heading ?? this.le_true_heading,
        etro: etro ?? this.etro,
        statusname: statusname ?? this.statusname,
        airfield_id: airfield_id ?? this.airfield_id,
      );
  @override
  String toString() {
    return (StringBuffer('c2rsc_runway(')
          ..write('id: $id, ')
          ..write('name_pm: $name_pm, ')
          ..write('is_main_runway: $is_main_runway, ')
          ..write('arpt_ident: $arpt_ident, ')
          ..write('high_ident: $high_ident, ')
          ..write('lcnvalue_pm: $lcnvalue_pm, ')
          ..write('length_pm: $length_pm, ')
          ..write('low_ident: $low_ident, ')
          ..write('runwaystatus: $runwaystatus, ')
          ..write('structure_pm: $structure_pm, ')
          ..write('width_pm: $width_pm, ')
          ..write('he_latitude: $he_latitude, ')
          ..write('he_longitude: $he_longitude, ')
          ..write('he_altitude: $he_altitude, ')
          ..write('he_slope: $he_slope, ')
          ..write('he_magnetic_heading: $he_magnetic_heading, ')
          ..write('he_true_heading: $he_true_heading, ')
          ..write('le_latitude: $le_latitude, ')
          ..write('le_longitude: $le_longitude, ')
          ..write('le_altitude: $le_altitude, ')
          ..write('le_slope: $le_slope, ')
          ..write('le_magnetic_heading: $le_magnetic_heading, ')
          ..write('le_true_heading: $le_true_heading, ')
          ..write('etro: $etro, ')
          ..write('statusname: $statusname, ')
          ..write('airfield_id: $airfield_id')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          name_pm.hashCode,
          $mrjc(
              is_main_runway.hashCode,
              $mrjc(
                  arpt_ident.hashCode,
                  $mrjc(
                      high_ident.hashCode,
                      $mrjc(
                          lcnvalue_pm.hashCode,
                          $mrjc(
                              length_pm.hashCode,
                              $mrjc(
                                  low_ident.hashCode,
                                  $mrjc(
                                      runwaystatus.hashCode,
                                      $mrjc(
                                          structure_pm.hashCode,
                                          $mrjc(
                                              width_pm.hashCode,
                                              $mrjc(
                                                  he_latitude.hashCode,
                                                  $mrjc(
                                                      he_longitude.hashCode,
                                                      $mrjc(
                                                          he_altitude.hashCode,
                                                          $mrjc(
                                                              he_slope.hashCode,
                                                              $mrjc(
                                                                  he_magnetic_heading
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      he_true_heading
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          le_latitude
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              le_longitude.hashCode,
                                                                              $mrjc(le_altitude.hashCode, $mrjc(le_slope.hashCode, $mrjc(le_magnetic_heading.hashCode, $mrjc(le_true_heading.hashCode, $mrjc(etro.hashCode, $mrjc(statusname.hashCode, airfield_id.hashCode))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is c2rsc_runway &&
          other.id == this.id &&
          other.name_pm == this.name_pm &&
          other.is_main_runway == this.is_main_runway &&
          other.arpt_ident == this.arpt_ident &&
          other.high_ident == this.high_ident &&
          other.lcnvalue_pm == this.lcnvalue_pm &&
          other.length_pm == this.length_pm &&
          other.low_ident == this.low_ident &&
          other.runwaystatus == this.runwaystatus &&
          other.structure_pm == this.structure_pm &&
          other.width_pm == this.width_pm &&
          other.he_latitude == this.he_latitude &&
          other.he_longitude == this.he_longitude &&
          other.he_altitude == this.he_altitude &&
          other.he_slope == this.he_slope &&
          other.he_magnetic_heading == this.he_magnetic_heading &&
          other.he_true_heading == this.he_true_heading &&
          other.le_latitude == this.le_latitude &&
          other.le_longitude == this.le_longitude &&
          other.le_altitude == this.le_altitude &&
          other.le_slope == this.le_slope &&
          other.le_magnetic_heading == this.le_magnetic_heading &&
          other.le_true_heading == this.le_true_heading &&
          other.etro == this.etro &&
          other.statusname == this.statusname &&
          other.airfield_id == this.airfield_id);
}

class C2rscRunwayCompanion extends UpdateCompanion<c2rsc_runway> {
  final Value<int> id;
  final Value<String> name_pm;
  final Value<bool> is_main_runway;
  final Value<String> arpt_ident;
  final Value<String> high_ident;
  final Value<double> lcnvalue_pm;
  final Value<double> length_pm;
  final Value<String> low_ident;
  final Value<String> runwaystatus;
  final Value<String> structure_pm;
  final Value<double> width_pm;
  final Value<double> he_latitude;
  final Value<double> he_longitude;
  final Value<double> he_altitude;
  final Value<double> he_slope;
  final Value<double> he_magnetic_heading;
  final Value<double> he_true_heading;
  final Value<double> le_latitude;
  final Value<double> le_longitude;
  final Value<double> le_altitude;
  final Value<double> le_slope;
  final Value<double> le_magnetic_heading;
  final Value<double> le_true_heading;
  final Value<DateTime> etro;
  final Value<String> statusname;
  final Value<int> airfield_id;
  const C2rscRunwayCompanion({
    this.id = const Value.absent(),
    this.name_pm = const Value.absent(),
    this.is_main_runway = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.high_ident = const Value.absent(),
    this.lcnvalue_pm = const Value.absent(),
    this.length_pm = const Value.absent(),
    this.low_ident = const Value.absent(),
    this.runwaystatus = const Value.absent(),
    this.structure_pm = const Value.absent(),
    this.width_pm = const Value.absent(),
    this.he_latitude = const Value.absent(),
    this.he_longitude = const Value.absent(),
    this.he_altitude = const Value.absent(),
    this.he_slope = const Value.absent(),
    this.he_magnetic_heading = const Value.absent(),
    this.he_true_heading = const Value.absent(),
    this.le_latitude = const Value.absent(),
    this.le_longitude = const Value.absent(),
    this.le_altitude = const Value.absent(),
    this.le_slope = const Value.absent(),
    this.le_magnetic_heading = const Value.absent(),
    this.le_true_heading = const Value.absent(),
    this.etro = const Value.absent(),
    this.statusname = const Value.absent(),
    this.airfield_id = const Value.absent(),
  });
  C2rscRunwayCompanion.insert({
    this.id = const Value.absent(),
    this.name_pm = const Value.absent(),
    this.is_main_runway = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.high_ident = const Value.absent(),
    this.lcnvalue_pm = const Value.absent(),
    this.length_pm = const Value.absent(),
    this.low_ident = const Value.absent(),
    this.runwaystatus = const Value.absent(),
    this.structure_pm = const Value.absent(),
    this.width_pm = const Value.absent(),
    this.he_latitude = const Value.absent(),
    this.he_longitude = const Value.absent(),
    this.he_altitude = const Value.absent(),
    this.he_slope = const Value.absent(),
    this.he_magnetic_heading = const Value.absent(),
    this.he_true_heading = const Value.absent(),
    this.le_latitude = const Value.absent(),
    this.le_longitude = const Value.absent(),
    this.le_altitude = const Value.absent(),
    this.le_slope = const Value.absent(),
    this.le_magnetic_heading = const Value.absent(),
    this.le_true_heading = const Value.absent(),
    this.etro = const Value.absent(),
    this.statusname = const Value.absent(),
    this.airfield_id = const Value.absent(),
  });
  static Insertable<c2rsc_runway> custom({
    Expression<int> id,
    Expression<String> name_pm,
    Expression<bool> is_main_runway,
    Expression<String> arpt_ident,
    Expression<String> high_ident,
    Expression<double> lcnvalue_pm,
    Expression<double> length_pm,
    Expression<String> low_ident,
    Expression<String> runwaystatus,
    Expression<String> structure_pm,
    Expression<double> width_pm,
    Expression<double> he_latitude,
    Expression<double> he_longitude,
    Expression<double> he_altitude,
    Expression<double> he_slope,
    Expression<double> he_magnetic_heading,
    Expression<double> he_true_heading,
    Expression<double> le_latitude,
    Expression<double> le_longitude,
    Expression<double> le_altitude,
    Expression<double> le_slope,
    Expression<double> le_magnetic_heading,
    Expression<double> le_true_heading,
    Expression<DateTime> etro,
    Expression<String> statusname,
    Expression<int> airfield_id,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (name_pm != null) 'name_pm': name_pm,
      if (is_main_runway != null) 'is_main_runway': is_main_runway,
      if (arpt_ident != null) 'arpt_ident': arpt_ident,
      if (high_ident != null) 'high_ident': high_ident,
      if (lcnvalue_pm != null) 'lcnvalue_pm': lcnvalue_pm,
      if (length_pm != null) 'length_pm': length_pm,
      if (low_ident != null) 'low_ident': low_ident,
      if (runwaystatus != null) 'runwaystatus': runwaystatus,
      if (structure_pm != null) 'structure_pm': structure_pm,
      if (width_pm != null) 'width_pm': width_pm,
      if (he_latitude != null) 'he_latitude': he_latitude,
      if (he_longitude != null) 'he_longitude': he_longitude,
      if (he_altitude != null) 'he_altitude': he_altitude,
      if (he_slope != null) 'he_slope': he_slope,
      if (he_magnetic_heading != null)
        'he_magnetic_heading': he_magnetic_heading,
      if (he_true_heading != null) 'he_true_heading': he_true_heading,
      if (le_latitude != null) 'le_latitude': le_latitude,
      if (le_longitude != null) 'le_longitude': le_longitude,
      if (le_altitude != null) 'le_altitude': le_altitude,
      if (le_slope != null) 'le_slope': le_slope,
      if (le_magnetic_heading != null)
        'le_magnetic_heading': le_magnetic_heading,
      if (le_true_heading != null) 'le_true_heading': le_true_heading,
      if (etro != null) 'etro': etro,
      if (statusname != null) 'statusname': statusname,
      if (airfield_id != null) 'airfield_id': airfield_id,
    });
  }

  C2rscRunwayCompanion copyWith(
      {Value<int> id,
      Value<String> name_pm,
      Value<bool> is_main_runway,
      Value<String> arpt_ident,
      Value<String> high_ident,
      Value<double> lcnvalue_pm,
      Value<double> length_pm,
      Value<String> low_ident,
      Value<String> runwaystatus,
      Value<String> structure_pm,
      Value<double> width_pm,
      Value<double> he_latitude,
      Value<double> he_longitude,
      Value<double> he_altitude,
      Value<double> he_slope,
      Value<double> he_magnetic_heading,
      Value<double> he_true_heading,
      Value<double> le_latitude,
      Value<double> le_longitude,
      Value<double> le_altitude,
      Value<double> le_slope,
      Value<double> le_magnetic_heading,
      Value<double> le_true_heading,
      Value<DateTime> etro,
      Value<String> statusname,
      Value<int> airfield_id}) {
    return C2rscRunwayCompanion(
      id: id ?? this.id,
      name_pm: name_pm ?? this.name_pm,
      is_main_runway: is_main_runway ?? this.is_main_runway,
      arpt_ident: arpt_ident ?? this.arpt_ident,
      high_ident: high_ident ?? this.high_ident,
      lcnvalue_pm: lcnvalue_pm ?? this.lcnvalue_pm,
      length_pm: length_pm ?? this.length_pm,
      low_ident: low_ident ?? this.low_ident,
      runwaystatus: runwaystatus ?? this.runwaystatus,
      structure_pm: structure_pm ?? this.structure_pm,
      width_pm: width_pm ?? this.width_pm,
      he_latitude: he_latitude ?? this.he_latitude,
      he_longitude: he_longitude ?? this.he_longitude,
      he_altitude: he_altitude ?? this.he_altitude,
      he_slope: he_slope ?? this.he_slope,
      he_magnetic_heading: he_magnetic_heading ?? this.he_magnetic_heading,
      he_true_heading: he_true_heading ?? this.he_true_heading,
      le_latitude: le_latitude ?? this.le_latitude,
      le_longitude: le_longitude ?? this.le_longitude,
      le_altitude: le_altitude ?? this.le_altitude,
      le_slope: le_slope ?? this.le_slope,
      le_magnetic_heading: le_magnetic_heading ?? this.le_magnetic_heading,
      le_true_heading: le_true_heading ?? this.le_true_heading,
      etro: etro ?? this.etro,
      statusname: statusname ?? this.statusname,
      airfield_id: airfield_id ?? this.airfield_id,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (name_pm.present) {
      map['name_pm'] = Variable<String>(name_pm.value);
    }
    if (is_main_runway.present) {
      map['is_main_runway'] = Variable<bool>(is_main_runway.value);
    }
    if (arpt_ident.present) {
      map['arpt_ident'] = Variable<String>(arpt_ident.value);
    }
    if (high_ident.present) {
      map['high_ident'] = Variable<String>(high_ident.value);
    }
    if (lcnvalue_pm.present) {
      map['lcnvalue_pm'] = Variable<double>(lcnvalue_pm.value);
    }
    if (length_pm.present) {
      map['length_pm'] = Variable<double>(length_pm.value);
    }
    if (low_ident.present) {
      map['low_ident'] = Variable<String>(low_ident.value);
    }
    if (runwaystatus.present) {
      map['runwaystatus'] = Variable<String>(runwaystatus.value);
    }
    if (structure_pm.present) {
      map['structure_pm'] = Variable<String>(structure_pm.value);
    }
    if (width_pm.present) {
      map['width_pm'] = Variable<double>(width_pm.value);
    }
    if (he_latitude.present) {
      map['he_latitude'] = Variable<double>(he_latitude.value);
    }
    if (he_longitude.present) {
      map['he_longitude'] = Variable<double>(he_longitude.value);
    }
    if (he_altitude.present) {
      map['he_altitude'] = Variable<double>(he_altitude.value);
    }
    if (he_slope.present) {
      map['he_slope'] = Variable<double>(he_slope.value);
    }
    if (he_magnetic_heading.present) {
      map['he_magnetic_heading'] = Variable<double>(he_magnetic_heading.value);
    }
    if (he_true_heading.present) {
      map['he_true_heading'] = Variable<double>(he_true_heading.value);
    }
    if (le_latitude.present) {
      map['le_latitude'] = Variable<double>(le_latitude.value);
    }
    if (le_longitude.present) {
      map['le_longitude'] = Variable<double>(le_longitude.value);
    }
    if (le_altitude.present) {
      map['le_altitude'] = Variable<double>(le_altitude.value);
    }
    if (le_slope.present) {
      map['le_slope'] = Variable<double>(le_slope.value);
    }
    if (le_magnetic_heading.present) {
      map['le_magnetic_heading'] = Variable<double>(le_magnetic_heading.value);
    }
    if (le_true_heading.present) {
      map['le_true_heading'] = Variable<double>(le_true_heading.value);
    }
    if (etro.present) {
      map['etro'] = Variable<DateTime>(etro.value);
    }
    if (statusname.present) {
      map['statusname'] = Variable<String>(statusname.value);
    }
    if (airfield_id.present) {
      map['airfield_id'] = Variable<int>(airfield_id.value);
    }
    return map;
  }
}

class $C2rscRunwayTable extends C2rscRunway
    with TableInfo<$C2rscRunwayTable, c2rsc_runway> {
  final GeneratedDatabase _db;
  final String _alias;
  $C2rscRunwayTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _name_pmMeta = const VerificationMeta('name_pm');
  GeneratedTextColumn _name_pm;
  @override
  GeneratedTextColumn get name_pm => _name_pm ??= _constructNamePm();
  GeneratedTextColumn _constructNamePm() {
    return GeneratedTextColumn(
      'name_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _is_main_runwayMeta =
      const VerificationMeta('is_main_runway');
  GeneratedBoolColumn _is_main_runway;
  @override
  GeneratedBoolColumn get is_main_runway =>
      _is_main_runway ??= _constructIsMainRunway();
  GeneratedBoolColumn _constructIsMainRunway() {
    return GeneratedBoolColumn(
      'is_main_runway',
      $tableName,
      true,
    );
  }

  final VerificationMeta _arpt_identMeta = const VerificationMeta('arpt_ident');
  GeneratedTextColumn _arpt_ident;
  @override
  GeneratedTextColumn get arpt_ident => _arpt_ident ??= _constructArptIdent();
  GeneratedTextColumn _constructArptIdent() {
    return GeneratedTextColumn(
      'arpt_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _high_identMeta = const VerificationMeta('high_ident');
  GeneratedTextColumn _high_ident;
  @override
  GeneratedTextColumn get high_ident => _high_ident ??= _constructHighIdent();
  GeneratedTextColumn _constructHighIdent() {
    return GeneratedTextColumn(
      'high_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lcnvalue_pmMeta =
      const VerificationMeta('lcnvalue_pm');
  GeneratedRealColumn _lcnvalue_pm;
  @override
  GeneratedRealColumn get lcnvalue_pm =>
      _lcnvalue_pm ??= _constructLcnvaluePm();
  GeneratedRealColumn _constructLcnvaluePm() {
    return GeneratedRealColumn(
      'lcnvalue_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _length_pmMeta = const VerificationMeta('length_pm');
  GeneratedRealColumn _length_pm;
  @override
  GeneratedRealColumn get length_pm => _length_pm ??= _constructLengthPm();
  GeneratedRealColumn _constructLengthPm() {
    return GeneratedRealColumn(
      'length_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _low_identMeta = const VerificationMeta('low_ident');
  GeneratedTextColumn _low_ident;
  @override
  GeneratedTextColumn get low_ident => _low_ident ??= _constructLowIdent();
  GeneratedTextColumn _constructLowIdent() {
    return GeneratedTextColumn(
      'low_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _runwaystatusMeta =
      const VerificationMeta('runwaystatus');
  GeneratedTextColumn _runwaystatus;
  @override
  GeneratedTextColumn get runwaystatus =>
      _runwaystatus ??= _constructRunwaystatus();
  GeneratedTextColumn _constructRunwaystatus() {
    return GeneratedTextColumn(
      'runwaystatus',
      $tableName,
      true,
    );
  }

  final VerificationMeta _structure_pmMeta =
      const VerificationMeta('structure_pm');
  GeneratedTextColumn _structure_pm;
  @override
  GeneratedTextColumn get structure_pm =>
      _structure_pm ??= _constructStructurePm();
  GeneratedTextColumn _constructStructurePm() {
    return GeneratedTextColumn(
      'structure_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _width_pmMeta = const VerificationMeta('width_pm');
  GeneratedRealColumn _width_pm;
  @override
  GeneratedRealColumn get width_pm => _width_pm ??= _constructWidthPm();
  GeneratedRealColumn _constructWidthPm() {
    return GeneratedRealColumn(
      'width_pm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _he_latitudeMeta =
      const VerificationMeta('he_latitude');
  GeneratedRealColumn _he_latitude;
  @override
  GeneratedRealColumn get he_latitude =>
      _he_latitude ??= _constructHeLatitude();
  GeneratedRealColumn _constructHeLatitude() {
    return GeneratedRealColumn(
      'he_latitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _he_longitudeMeta =
      const VerificationMeta('he_longitude');
  GeneratedRealColumn _he_longitude;
  @override
  GeneratedRealColumn get he_longitude =>
      _he_longitude ??= _constructHeLongitude();
  GeneratedRealColumn _constructHeLongitude() {
    return GeneratedRealColumn(
      'he_longitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _he_altitudeMeta =
      const VerificationMeta('he_altitude');
  GeneratedRealColumn _he_altitude;
  @override
  GeneratedRealColumn get he_altitude =>
      _he_altitude ??= _constructHeAltitude();
  GeneratedRealColumn _constructHeAltitude() {
    return GeneratedRealColumn(
      'he_altitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _he_slopeMeta = const VerificationMeta('he_slope');
  GeneratedRealColumn _he_slope;
  @override
  GeneratedRealColumn get he_slope => _he_slope ??= _constructHeSlope();
  GeneratedRealColumn _constructHeSlope() {
    return GeneratedRealColumn(
      'he_slope',
      $tableName,
      true,
    );
  }

  final VerificationMeta _he_magnetic_headingMeta =
      const VerificationMeta('he_magnetic_heading');
  GeneratedRealColumn _he_magnetic_heading;
  @override
  GeneratedRealColumn get he_magnetic_heading =>
      _he_magnetic_heading ??= _constructHeMagneticHeading();
  GeneratedRealColumn _constructHeMagneticHeading() {
    return GeneratedRealColumn(
      'he_magnetic_heading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _he_true_headingMeta =
      const VerificationMeta('he_true_heading');
  GeneratedRealColumn _he_true_heading;
  @override
  GeneratedRealColumn get he_true_heading =>
      _he_true_heading ??= _constructHeTrueHeading();
  GeneratedRealColumn _constructHeTrueHeading() {
    return GeneratedRealColumn(
      'he_true_heading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _le_latitudeMeta =
      const VerificationMeta('le_latitude');
  GeneratedRealColumn _le_latitude;
  @override
  GeneratedRealColumn get le_latitude =>
      _le_latitude ??= _constructLeLatitude();
  GeneratedRealColumn _constructLeLatitude() {
    return GeneratedRealColumn(
      'le_latitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _le_longitudeMeta =
      const VerificationMeta('le_longitude');
  GeneratedRealColumn _le_longitude;
  @override
  GeneratedRealColumn get le_longitude =>
      _le_longitude ??= _constructLeLongitude();
  GeneratedRealColumn _constructLeLongitude() {
    return GeneratedRealColumn(
      'le_longitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _le_altitudeMeta =
      const VerificationMeta('le_altitude');
  GeneratedRealColumn _le_altitude;
  @override
  GeneratedRealColumn get le_altitude =>
      _le_altitude ??= _constructLeAltitude();
  GeneratedRealColumn _constructLeAltitude() {
    return GeneratedRealColumn(
      'le_altitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _le_slopeMeta = const VerificationMeta('le_slope');
  GeneratedRealColumn _le_slope;
  @override
  GeneratedRealColumn get le_slope => _le_slope ??= _constructLeSlope();
  GeneratedRealColumn _constructLeSlope() {
    return GeneratedRealColumn(
      'le_slope',
      $tableName,
      true,
    );
  }

  final VerificationMeta _le_magnetic_headingMeta =
      const VerificationMeta('le_magnetic_heading');
  GeneratedRealColumn _le_magnetic_heading;
  @override
  GeneratedRealColumn get le_magnetic_heading =>
      _le_magnetic_heading ??= _constructLeMagneticHeading();
  GeneratedRealColumn _constructLeMagneticHeading() {
    return GeneratedRealColumn(
      'le_magnetic_heading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _le_true_headingMeta =
      const VerificationMeta('le_true_heading');
  GeneratedRealColumn _le_true_heading;
  @override
  GeneratedRealColumn get le_true_heading =>
      _le_true_heading ??= _constructLeTrueHeading();
  GeneratedRealColumn _constructLeTrueHeading() {
    return GeneratedRealColumn(
      'le_true_heading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _etroMeta = const VerificationMeta('etro');
  GeneratedDateTimeColumn _etro;
  @override
  GeneratedDateTimeColumn get etro => _etro ??= _constructEtro();
  GeneratedDateTimeColumn _constructEtro() {
    return GeneratedDateTimeColumn(
      'etro',
      $tableName,
      true,
    );
  }

  final VerificationMeta _statusnameMeta = const VerificationMeta('statusname');
  GeneratedTextColumn _statusname;
  @override
  GeneratedTextColumn get statusname => _statusname ??= _constructStatusname();
  GeneratedTextColumn _constructStatusname() {
    return GeneratedTextColumn(
      'statusname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _airfield_idMeta =
      const VerificationMeta('airfield_id');
  GeneratedIntColumn _airfield_id;
  @override
  GeneratedIntColumn get airfield_id => _airfield_id ??= _constructAirfieldId();
  GeneratedIntColumn _constructAirfieldId() {
    return GeneratedIntColumn('airfield_id', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES c2rsc_airfield(id)');
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        name_pm,
        is_main_runway,
        arpt_ident,
        high_ident,
        lcnvalue_pm,
        length_pm,
        low_ident,
        runwaystatus,
        structure_pm,
        width_pm,
        he_latitude,
        he_longitude,
        he_altitude,
        he_slope,
        he_magnetic_heading,
        he_true_heading,
        le_latitude,
        le_longitude,
        le_altitude,
        le_slope,
        le_magnetic_heading,
        le_true_heading,
        etro,
        statusname,
        airfield_id
      ];
  @override
  $C2rscRunwayTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'c2rsc_runway';
  @override
  final String actualTableName = 'c2rsc_runway';
  @override
  VerificationContext validateIntegrity(Insertable<c2rsc_runway> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('name_pm')) {
      context.handle(_name_pmMeta,
          name_pm.isAcceptableOrUnknown(data['name_pm'], _name_pmMeta));
    }
    if (data.containsKey('is_main_runway')) {
      context.handle(
          _is_main_runwayMeta,
          is_main_runway.isAcceptableOrUnknown(
              data['is_main_runway'], _is_main_runwayMeta));
    }
    if (data.containsKey('arpt_ident')) {
      context.handle(
          _arpt_identMeta,
          arpt_ident.isAcceptableOrUnknown(
              data['arpt_ident'], _arpt_identMeta));
    }
    if (data.containsKey('high_ident')) {
      context.handle(
          _high_identMeta,
          high_ident.isAcceptableOrUnknown(
              data['high_ident'], _high_identMeta));
    }
    if (data.containsKey('lcnvalue_pm')) {
      context.handle(
          _lcnvalue_pmMeta,
          lcnvalue_pm.isAcceptableOrUnknown(
              data['lcnvalue_pm'], _lcnvalue_pmMeta));
    }
    if (data.containsKey('length_pm')) {
      context.handle(_length_pmMeta,
          length_pm.isAcceptableOrUnknown(data['length_pm'], _length_pmMeta));
    }
    if (data.containsKey('low_ident')) {
      context.handle(_low_identMeta,
          low_ident.isAcceptableOrUnknown(data['low_ident'], _low_identMeta));
    }
    if (data.containsKey('runwaystatus')) {
      context.handle(
          _runwaystatusMeta,
          runwaystatus.isAcceptableOrUnknown(
              data['runwaystatus'], _runwaystatusMeta));
    }
    if (data.containsKey('structure_pm')) {
      context.handle(
          _structure_pmMeta,
          structure_pm.isAcceptableOrUnknown(
              data['structure_pm'], _structure_pmMeta));
    }
    if (data.containsKey('width_pm')) {
      context.handle(_width_pmMeta,
          width_pm.isAcceptableOrUnknown(data['width_pm'], _width_pmMeta));
    }
    if (data.containsKey('he_latitude')) {
      context.handle(
          _he_latitudeMeta,
          he_latitude.isAcceptableOrUnknown(
              data['he_latitude'], _he_latitudeMeta));
    }
    if (data.containsKey('he_longitude')) {
      context.handle(
          _he_longitudeMeta,
          he_longitude.isAcceptableOrUnknown(
              data['he_longitude'], _he_longitudeMeta));
    }
    if (data.containsKey('he_altitude')) {
      context.handle(
          _he_altitudeMeta,
          he_altitude.isAcceptableOrUnknown(
              data['he_altitude'], _he_altitudeMeta));
    }
    if (data.containsKey('he_slope')) {
      context.handle(_he_slopeMeta,
          he_slope.isAcceptableOrUnknown(data['he_slope'], _he_slopeMeta));
    }
    if (data.containsKey('he_magnetic_heading')) {
      context.handle(
          _he_magnetic_headingMeta,
          he_magnetic_heading.isAcceptableOrUnknown(
              data['he_magnetic_heading'], _he_magnetic_headingMeta));
    }
    if (data.containsKey('he_true_heading')) {
      context.handle(
          _he_true_headingMeta,
          he_true_heading.isAcceptableOrUnknown(
              data['he_true_heading'], _he_true_headingMeta));
    }
    if (data.containsKey('le_latitude')) {
      context.handle(
          _le_latitudeMeta,
          le_latitude.isAcceptableOrUnknown(
              data['le_latitude'], _le_latitudeMeta));
    }
    if (data.containsKey('le_longitude')) {
      context.handle(
          _le_longitudeMeta,
          le_longitude.isAcceptableOrUnknown(
              data['le_longitude'], _le_longitudeMeta));
    }
    if (data.containsKey('le_altitude')) {
      context.handle(
          _le_altitudeMeta,
          le_altitude.isAcceptableOrUnknown(
              data['le_altitude'], _le_altitudeMeta));
    }
    if (data.containsKey('le_slope')) {
      context.handle(_le_slopeMeta,
          le_slope.isAcceptableOrUnknown(data['le_slope'], _le_slopeMeta));
    }
    if (data.containsKey('le_magnetic_heading')) {
      context.handle(
          _le_magnetic_headingMeta,
          le_magnetic_heading.isAcceptableOrUnknown(
              data['le_magnetic_heading'], _le_magnetic_headingMeta));
    }
    if (data.containsKey('le_true_heading')) {
      context.handle(
          _le_true_headingMeta,
          le_true_heading.isAcceptableOrUnknown(
              data['le_true_heading'], _le_true_headingMeta));
    }
    if (data.containsKey('etro')) {
      context.handle(
          _etroMeta, etro.isAcceptableOrUnknown(data['etro'], _etroMeta));
    }
    if (data.containsKey('statusname')) {
      context.handle(
          _statusnameMeta,
          statusname.isAcceptableOrUnknown(
              data['statusname'], _statusnameMeta));
    }
    if (data.containsKey('airfield_id')) {
      context.handle(
          _airfield_idMeta,
          airfield_id.isAcceptableOrUnknown(
              data['airfield_id'], _airfield_idMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  c2rsc_runway map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return c2rsc_runway.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $C2rscRunwayTable createAlias(String alias) {
    return $C2rscRunwayTable(_db, alias);
  }
}

class c2rsc_runway_facility extends DataClass
    implements Insertable<c2rsc_runway_facility> {
  final int id;
  final bool is_applicable;
  final int explanation_type;
  final String direction;
  final int runway_id;
  c2rsc_runway_facility(
      {@required this.id,
      this.is_applicable,
      this.explanation_type,
      this.direction,
      this.runway_id});
  factory c2rsc_runway_facility.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final boolType = db.typeSystem.forDartType<bool>();
    final stringType = db.typeSystem.forDartType<String>();
    return c2rsc_runway_facility(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      is_applicable: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}is_applicable']),
      explanation_type: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}explanation_type']),
      direction: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}direction']),
      runway_id:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}runway_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || is_applicable != null) {
      map['is_applicable'] = Variable<bool>(is_applicable);
    }
    if (!nullToAbsent || explanation_type != null) {
      map['explanation_type'] = Variable<int>(explanation_type);
    }
    if (!nullToAbsent || direction != null) {
      map['direction'] = Variable<String>(direction);
    }
    if (!nullToAbsent || runway_id != null) {
      map['runway_id'] = Variable<int>(runway_id);
    }
    return map;
  }

  factory c2rsc_runway_facility.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return c2rsc_runway_facility(
      id: serializer.fromJson<int>(json['id']),
      is_applicable: serializer.fromJson<bool>(json['is_applicable']),
      explanation_type: serializer.fromJson<int>(json['explanation_type']),
      direction: serializer.fromJson<String>(json['direction']),
      runway_id: serializer.fromJson<int>(json['runway_id']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'is_applicable': serializer.toJson<bool>(is_applicable),
      'explanation_type': serializer.toJson<int>(explanation_type),
      'direction': serializer.toJson<String>(direction),
      'runway_id': serializer.toJson<int>(runway_id),
    };
  }

  c2rsc_runway_facility copyWith(
          {int id,
          bool is_applicable,
          int explanation_type,
          String direction,
          int runway_id}) =>
      c2rsc_runway_facility(
        id: id ?? this.id,
        is_applicable: is_applicable ?? this.is_applicable,
        explanation_type: explanation_type ?? this.explanation_type,
        direction: direction ?? this.direction,
        runway_id: runway_id ?? this.runway_id,
      );
  @override
  String toString() {
    return (StringBuffer('c2rsc_runway_facility(')
          ..write('id: $id, ')
          ..write('is_applicable: $is_applicable, ')
          ..write('explanation_type: $explanation_type, ')
          ..write('direction: $direction, ')
          ..write('runway_id: $runway_id')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          is_applicable.hashCode,
          $mrjc(explanation_type.hashCode,
              $mrjc(direction.hashCode, runway_id.hashCode)))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is c2rsc_runway_facility &&
          other.id == this.id &&
          other.is_applicable == this.is_applicable &&
          other.explanation_type == this.explanation_type &&
          other.direction == this.direction &&
          other.runway_id == this.runway_id);
}

class C2rscRunwayFacilityCompanion
    extends UpdateCompanion<c2rsc_runway_facility> {
  final Value<int> id;
  final Value<bool> is_applicable;
  final Value<int> explanation_type;
  final Value<String> direction;
  final Value<int> runway_id;
  const C2rscRunwayFacilityCompanion({
    this.id = const Value.absent(),
    this.is_applicable = const Value.absent(),
    this.explanation_type = const Value.absent(),
    this.direction = const Value.absent(),
    this.runway_id = const Value.absent(),
  });
  C2rscRunwayFacilityCompanion.insert({
    this.id = const Value.absent(),
    this.is_applicable = const Value.absent(),
    this.explanation_type = const Value.absent(),
    this.direction = const Value.absent(),
    this.runway_id = const Value.absent(),
  });
  static Insertable<c2rsc_runway_facility> custom({
    Expression<int> id,
    Expression<bool> is_applicable,
    Expression<int> explanation_type,
    Expression<String> direction,
    Expression<int> runway_id,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (is_applicable != null) 'is_applicable': is_applicable,
      if (explanation_type != null) 'explanation_type': explanation_type,
      if (direction != null) 'direction': direction,
      if (runway_id != null) 'runway_id': runway_id,
    });
  }

  C2rscRunwayFacilityCompanion copyWith(
      {Value<int> id,
      Value<bool> is_applicable,
      Value<int> explanation_type,
      Value<String> direction,
      Value<int> runway_id}) {
    return C2rscRunwayFacilityCompanion(
      id: id ?? this.id,
      is_applicable: is_applicable ?? this.is_applicable,
      explanation_type: explanation_type ?? this.explanation_type,
      direction: direction ?? this.direction,
      runway_id: runway_id ?? this.runway_id,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (is_applicable.present) {
      map['is_applicable'] = Variable<bool>(is_applicable.value);
    }
    if (explanation_type.present) {
      map['explanation_type'] = Variable<int>(explanation_type.value);
    }
    if (direction.present) {
      map['direction'] = Variable<String>(direction.value);
    }
    if (runway_id.present) {
      map['runway_id'] = Variable<int>(runway_id.value);
    }
    return map;
  }
}

class $C2rscRunwayFacilityTable extends C2rscRunwayFacility
    with TableInfo<$C2rscRunwayFacilityTable, c2rsc_runway_facility> {
  final GeneratedDatabase _db;
  final String _alias;
  $C2rscRunwayFacilityTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _is_applicableMeta =
      const VerificationMeta('is_applicable');
  GeneratedBoolColumn _is_applicable;
  @override
  GeneratedBoolColumn get is_applicable =>
      _is_applicable ??= _constructIsApplicable();
  GeneratedBoolColumn _constructIsApplicable() {
    return GeneratedBoolColumn(
      'is_applicable',
      $tableName,
      true,
    );
  }

  final VerificationMeta _explanation_typeMeta =
      const VerificationMeta('explanation_type');
  GeneratedIntColumn _explanation_type;
  @override
  GeneratedIntColumn get explanation_type =>
      _explanation_type ??= _constructExplanationType();
  GeneratedIntColumn _constructExplanationType() {
    return GeneratedIntColumn(
      'explanation_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _directionMeta = const VerificationMeta('direction');
  GeneratedTextColumn _direction;
  @override
  GeneratedTextColumn get direction => _direction ??= _constructDirection();
  GeneratedTextColumn _constructDirection() {
    return GeneratedTextColumn(
      'direction',
      $tableName,
      true,
    );
  }

  final VerificationMeta _runway_idMeta = const VerificationMeta('runway_id');
  GeneratedIntColumn _runway_id;
  @override
  GeneratedIntColumn get runway_id => _runway_id ??= _constructRunwayId();
  GeneratedIntColumn _constructRunwayId() {
    return GeneratedIntColumn('runway_id', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES c2rsc_runway(id)');
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, is_applicable, explanation_type, direction, runway_id];
  @override
  $C2rscRunwayFacilityTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'c2rsc_runway_facility';
  @override
  final String actualTableName = 'c2rsc_runway_facility';
  @override
  VerificationContext validateIntegrity(
      Insertable<c2rsc_runway_facility> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('is_applicable')) {
      context.handle(
          _is_applicableMeta,
          is_applicable.isAcceptableOrUnknown(
              data['is_applicable'], _is_applicableMeta));
    }
    if (data.containsKey('explanation_type')) {
      context.handle(
          _explanation_typeMeta,
          explanation_type.isAcceptableOrUnknown(
              data['explanation_type'], _explanation_typeMeta));
    }
    if (data.containsKey('direction')) {
      context.handle(_directionMeta,
          direction.isAcceptableOrUnknown(data['direction'], _directionMeta));
    }
    if (data.containsKey('runway_id')) {
      context.handle(_runway_idMeta,
          runway_id.isAcceptableOrUnknown(data['runway_id'], _runway_idMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  c2rsc_runway_facility map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return c2rsc_runway_facility.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $C2rscRunwayFacilityTable createAlias(String alias) {
    return $C2rscRunwayFacilityTable(_db, alias);
  }
}

class dafif_airfield extends DataClass implements Insertable<dafif_airfield> {
  final int id;
  final String arptident;
  final String name;
  final String stateprov;
  final String icao;
  final String faahostid;
  final String lochdatum;
  final String wgsdatum;
  final String wgslat;
  final String wgsdlat;
  final String wgslong;
  final String wgsdlong;
  final String elev;
  final String type;
  final String magvar;
  final String wac;
  final String beacon;
  final String secondarpt;
  final String opragy;
  final String secname;
  final String secicao;
  final String secfaa;
  final String secopragy;
  final String cycledate;
  final String terrain;
  final String hydro;
  final String crc32;
  final double lat;
  final double lon;
  final double distancetoorigin;
  dafif_airfield(
      {@required this.id,
      this.arptident,
      this.name,
      this.stateprov,
      this.icao,
      this.faahostid,
      this.lochdatum,
      this.wgsdatum,
      this.wgslat,
      this.wgsdlat,
      this.wgslong,
      this.wgsdlong,
      this.elev,
      this.type,
      this.magvar,
      this.wac,
      this.beacon,
      this.secondarpt,
      this.opragy,
      this.secname,
      this.secicao,
      this.secfaa,
      this.secopragy,
      this.cycledate,
      this.terrain,
      this.hydro,
      this.crc32,
      this.lat,
      this.lon,
      this.distancetoorigin});
  factory dafif_airfield.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_airfield(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arptident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arptident']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      stateprov: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}stateprov']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      faahostid: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}faahostid']),
      lochdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lochdatum']),
      wgsdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdatum']),
      wgslat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat']),
      wgsdlat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat']),
      wgslong:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslong']),
      wgsdlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong']),
      elev: stringType.mapFromDatabaseResponse(data['${effectivePrefix}elev']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      magvar:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}magvar']),
      wac: stringType.mapFromDatabaseResponse(data['${effectivePrefix}wac']),
      beacon:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}beacon']),
      secondarpt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}secondarpt']),
      opragy:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}opragy']),
      secname:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}secname']),
      secicao:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}secicao']),
      secfaa:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}secfaa']),
      secopragy: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}secopragy']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      terrain:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}terrain']),
      hydro:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}hydro']),
      crc32:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      lat: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat']),
      lon: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon']),
      distancetoorigin: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}distancetoorigin']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arptident != null) {
      map['arptident'] = Variable<String>(arptident);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || stateprov != null) {
      map['stateprov'] = Variable<String>(stateprov);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || faahostid != null) {
      map['faahostid'] = Variable<String>(faahostid);
    }
    if (!nullToAbsent || lochdatum != null) {
      map['lochdatum'] = Variable<String>(lochdatum);
    }
    if (!nullToAbsent || wgsdatum != null) {
      map['wgsdatum'] = Variable<String>(wgsdatum);
    }
    if (!nullToAbsent || wgslat != null) {
      map['wgslat'] = Variable<String>(wgslat);
    }
    if (!nullToAbsent || wgsdlat != null) {
      map['wgsdlat'] = Variable<String>(wgsdlat);
    }
    if (!nullToAbsent || wgslong != null) {
      map['wgslong'] = Variable<String>(wgslong);
    }
    if (!nullToAbsent || wgsdlong != null) {
      map['wgsdlong'] = Variable<String>(wgsdlong);
    }
    if (!nullToAbsent || elev != null) {
      map['elev'] = Variable<String>(elev);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || magvar != null) {
      map['magvar'] = Variable<String>(magvar);
    }
    if (!nullToAbsent || wac != null) {
      map['wac'] = Variable<String>(wac);
    }
    if (!nullToAbsent || beacon != null) {
      map['beacon'] = Variable<String>(beacon);
    }
    if (!nullToAbsent || secondarpt != null) {
      map['secondarpt'] = Variable<String>(secondarpt);
    }
    if (!nullToAbsent || opragy != null) {
      map['opragy'] = Variable<String>(opragy);
    }
    if (!nullToAbsent || secname != null) {
      map['secname'] = Variable<String>(secname);
    }
    if (!nullToAbsent || secicao != null) {
      map['secicao'] = Variable<String>(secicao);
    }
    if (!nullToAbsent || secfaa != null) {
      map['secfaa'] = Variable<String>(secfaa);
    }
    if (!nullToAbsent || secopragy != null) {
      map['secopragy'] = Variable<String>(secopragy);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || terrain != null) {
      map['terrain'] = Variable<String>(terrain);
    }
    if (!nullToAbsent || hydro != null) {
      map['hydro'] = Variable<String>(hydro);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<String>(crc32);
    }
    if (!nullToAbsent || lat != null) {
      map['lat'] = Variable<double>(lat);
    }
    if (!nullToAbsent || lon != null) {
      map['lon'] = Variable<double>(lon);
    }
    if (!nullToAbsent || distancetoorigin != null) {
      map['distancetoorigin'] = Variable<double>(distancetoorigin);
    }
    return map;
  }

  factory dafif_airfield.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_airfield(
      id: serializer.fromJson<int>(json['id']),
      arptident: serializer.fromJson<String>(json['arptident']),
      name: serializer.fromJson<String>(json['name']),
      stateprov: serializer.fromJson<String>(json['stateprov']),
      icao: serializer.fromJson<String>(json['icao']),
      faahostid: serializer.fromJson<String>(json['faahostid']),
      lochdatum: serializer.fromJson<String>(json['lochdatum']),
      wgsdatum: serializer.fromJson<String>(json['wgsdatum']),
      wgslat: serializer.fromJson<String>(json['wgslat']),
      wgsdlat: serializer.fromJson<String>(json['wgsdlat']),
      wgslong: serializer.fromJson<String>(json['wgslong']),
      wgsdlong: serializer.fromJson<String>(json['wgsdlong']),
      elev: serializer.fromJson<String>(json['elev']),
      type: serializer.fromJson<String>(json['type']),
      magvar: serializer.fromJson<String>(json['magvar']),
      wac: serializer.fromJson<String>(json['wac']),
      beacon: serializer.fromJson<String>(json['beacon']),
      secondarpt: serializer.fromJson<String>(json['secondarpt']),
      opragy: serializer.fromJson<String>(json['opragy']),
      secname: serializer.fromJson<String>(json['secname']),
      secicao: serializer.fromJson<String>(json['secicao']),
      secfaa: serializer.fromJson<String>(json['secfaa']),
      secopragy: serializer.fromJson<String>(json['secopragy']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      terrain: serializer.fromJson<String>(json['terrain']),
      hydro: serializer.fromJson<String>(json['hydro']),
      crc32: serializer.fromJson<String>(json['crc32']),
      lat: serializer.fromJson<double>(json['lat']),
      lon: serializer.fromJson<double>(json['lon']),
      distancetoorigin: serializer.fromJson<double>(json['distancetoorigin']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arptident': serializer.toJson<String>(arptident),
      'name': serializer.toJson<String>(name),
      'stateprov': serializer.toJson<String>(stateprov),
      'icao': serializer.toJson<String>(icao),
      'faahostid': serializer.toJson<String>(faahostid),
      'lochdatum': serializer.toJson<String>(lochdatum),
      'wgsdatum': serializer.toJson<String>(wgsdatum),
      'wgslat': serializer.toJson<String>(wgslat),
      'wgsdlat': serializer.toJson<String>(wgsdlat),
      'wgslong': serializer.toJson<String>(wgslong),
      'wgsdlong': serializer.toJson<String>(wgsdlong),
      'elev': serializer.toJson<String>(elev),
      'type': serializer.toJson<String>(type),
      'magvar': serializer.toJson<String>(magvar),
      'wac': serializer.toJson<String>(wac),
      'beacon': serializer.toJson<String>(beacon),
      'secondarpt': serializer.toJson<String>(secondarpt),
      'opragy': serializer.toJson<String>(opragy),
      'secname': serializer.toJson<String>(secname),
      'secicao': serializer.toJson<String>(secicao),
      'secfaa': serializer.toJson<String>(secfaa),
      'secopragy': serializer.toJson<String>(secopragy),
      'cycledate': serializer.toJson<String>(cycledate),
      'terrain': serializer.toJson<String>(terrain),
      'hydro': serializer.toJson<String>(hydro),
      'crc32': serializer.toJson<String>(crc32),
      'lat': serializer.toJson<double>(lat),
      'lon': serializer.toJson<double>(lon),
      'distancetoorigin': serializer.toJson<double>(distancetoorigin),
    };
  }

  dafif_airfield copyWith(
          {int id,
          String arptident,
          String name,
          String stateprov,
          String icao,
          String faahostid,
          String lochdatum,
          String wgsdatum,
          String wgslat,
          String wgsdlat,
          String wgslong,
          String wgsdlong,
          String elev,
          String type,
          String magvar,
          String wac,
          String beacon,
          String secondarpt,
          String opragy,
          String secname,
          String secicao,
          String secfaa,
          String secopragy,
          String cycledate,
          String terrain,
          String hydro,
          String crc32,
          double lat,
          double lon,
          double distancetoorigin}) =>
      dafif_airfield(
        id: id ?? this.id,
        arptident: arptident ?? this.arptident,
        name: name ?? this.name,
        stateprov: stateprov ?? this.stateprov,
        icao: icao ?? this.icao,
        faahostid: faahostid ?? this.faahostid,
        lochdatum: lochdatum ?? this.lochdatum,
        wgsdatum: wgsdatum ?? this.wgsdatum,
        wgslat: wgslat ?? this.wgslat,
        wgsdlat: wgsdlat ?? this.wgsdlat,
        wgslong: wgslong ?? this.wgslong,
        wgsdlong: wgsdlong ?? this.wgsdlong,
        elev: elev ?? this.elev,
        type: type ?? this.type,
        magvar: magvar ?? this.magvar,
        wac: wac ?? this.wac,
        beacon: beacon ?? this.beacon,
        secondarpt: secondarpt ?? this.secondarpt,
        opragy: opragy ?? this.opragy,
        secname: secname ?? this.secname,
        secicao: secicao ?? this.secicao,
        secfaa: secfaa ?? this.secfaa,
        secopragy: secopragy ?? this.secopragy,
        cycledate: cycledate ?? this.cycledate,
        terrain: terrain ?? this.terrain,
        hydro: hydro ?? this.hydro,
        crc32: crc32 ?? this.crc32,
        lat: lat ?? this.lat,
        lon: lon ?? this.lon,
        distancetoorigin: distancetoorigin ?? this.distancetoorigin,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_airfield(')
          ..write('id: $id, ')
          ..write('arptident: $arptident, ')
          ..write('name: $name, ')
          ..write('stateprov: $stateprov, ')
          ..write('icao: $icao, ')
          ..write('faahostid: $faahostid, ')
          ..write('lochdatum: $lochdatum, ')
          ..write('wgsdatum: $wgsdatum, ')
          ..write('wgslat: $wgslat, ')
          ..write('wgsdlat: $wgsdlat, ')
          ..write('wgslong: $wgslong, ')
          ..write('wgsdlong: $wgsdlong, ')
          ..write('elev: $elev, ')
          ..write('type: $type, ')
          ..write('magvar: $magvar, ')
          ..write('wac: $wac, ')
          ..write('beacon: $beacon, ')
          ..write('secondarpt: $secondarpt, ')
          ..write('opragy: $opragy, ')
          ..write('secname: $secname, ')
          ..write('secicao: $secicao, ')
          ..write('secfaa: $secfaa, ')
          ..write('secopragy: $secopragy, ')
          ..write('cycledate: $cycledate, ')
          ..write('terrain: $terrain, ')
          ..write('hydro: $hydro, ')
          ..write('crc32: $crc32, ')
          ..write('lat: $lat, ')
          ..write('lon: $lon, ')
          ..write('distancetoorigin: $distancetoorigin')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arptident.hashCode,
          $mrjc(
              name.hashCode,
              $mrjc(
                  stateprov.hashCode,
                  $mrjc(
                      icao.hashCode,
                      $mrjc(
                          faahostid.hashCode,
                          $mrjc(
                              lochdatum.hashCode,
                              $mrjc(
                                  wgsdatum.hashCode,
                                  $mrjc(
                                      wgslat.hashCode,
                                      $mrjc(
                                          wgsdlat.hashCode,
                                          $mrjc(
                                              wgslong.hashCode,
                                              $mrjc(
                                                  wgsdlong.hashCode,
                                                  $mrjc(
                                                      elev.hashCode,
                                                      $mrjc(
                                                          type.hashCode,
                                                          $mrjc(
                                                              magvar.hashCode,
                                                              $mrjc(
                                                                  wac.hashCode,
                                                                  $mrjc(
                                                                      beacon
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          secondarpt
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              opragy.hashCode,
                                                                              $mrjc(secname.hashCode, $mrjc(secicao.hashCode, $mrjc(secfaa.hashCode, $mrjc(secopragy.hashCode, $mrjc(cycledate.hashCode, $mrjc(terrain.hashCode, $mrjc(hydro.hashCode, $mrjc(crc32.hashCode, $mrjc(lat.hashCode, $mrjc(lon.hashCode, distancetoorigin.hashCode))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_airfield &&
          other.id == this.id &&
          other.arptident == this.arptident &&
          other.name == this.name &&
          other.stateprov == this.stateprov &&
          other.icao == this.icao &&
          other.faahostid == this.faahostid &&
          other.lochdatum == this.lochdatum &&
          other.wgsdatum == this.wgsdatum &&
          other.wgslat == this.wgslat &&
          other.wgsdlat == this.wgsdlat &&
          other.wgslong == this.wgslong &&
          other.wgsdlong == this.wgsdlong &&
          other.elev == this.elev &&
          other.type == this.type &&
          other.magvar == this.magvar &&
          other.wac == this.wac &&
          other.beacon == this.beacon &&
          other.secondarpt == this.secondarpt &&
          other.opragy == this.opragy &&
          other.secname == this.secname &&
          other.secicao == this.secicao &&
          other.secfaa == this.secfaa &&
          other.secopragy == this.secopragy &&
          other.cycledate == this.cycledate &&
          other.terrain == this.terrain &&
          other.hydro == this.hydro &&
          other.crc32 == this.crc32 &&
          other.lat == this.lat &&
          other.lon == this.lon &&
          other.distancetoorigin == this.distancetoorigin);
}

class DafifAirfieldCompanion extends UpdateCompanion<dafif_airfield> {
  final Value<int> id;
  final Value<String> arptident;
  final Value<String> name;
  final Value<String> stateprov;
  final Value<String> icao;
  final Value<String> faahostid;
  final Value<String> lochdatum;
  final Value<String> wgsdatum;
  final Value<String> wgslat;
  final Value<String> wgsdlat;
  final Value<String> wgslong;
  final Value<String> wgsdlong;
  final Value<String> elev;
  final Value<String> type;
  final Value<String> magvar;
  final Value<String> wac;
  final Value<String> beacon;
  final Value<String> secondarpt;
  final Value<String> opragy;
  final Value<String> secname;
  final Value<String> secicao;
  final Value<String> secfaa;
  final Value<String> secopragy;
  final Value<String> cycledate;
  final Value<String> terrain;
  final Value<String> hydro;
  final Value<String> crc32;
  final Value<double> lat;
  final Value<double> lon;
  final Value<double> distancetoorigin;
  const DafifAirfieldCompanion({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.name = const Value.absent(),
    this.stateprov = const Value.absent(),
    this.icao = const Value.absent(),
    this.faahostid = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.elev = const Value.absent(),
    this.type = const Value.absent(),
    this.magvar = const Value.absent(),
    this.wac = const Value.absent(),
    this.beacon = const Value.absent(),
    this.secondarpt = const Value.absent(),
    this.opragy = const Value.absent(),
    this.secname = const Value.absent(),
    this.secicao = const Value.absent(),
    this.secfaa = const Value.absent(),
    this.secopragy = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.terrain = const Value.absent(),
    this.hydro = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat = const Value.absent(),
    this.lon = const Value.absent(),
    this.distancetoorigin = const Value.absent(),
  });
  DafifAirfieldCompanion.insert({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.name = const Value.absent(),
    this.stateprov = const Value.absent(),
    this.icao = const Value.absent(),
    this.faahostid = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.elev = const Value.absent(),
    this.type = const Value.absent(),
    this.magvar = const Value.absent(),
    this.wac = const Value.absent(),
    this.beacon = const Value.absent(),
    this.secondarpt = const Value.absent(),
    this.opragy = const Value.absent(),
    this.secname = const Value.absent(),
    this.secicao = const Value.absent(),
    this.secfaa = const Value.absent(),
    this.secopragy = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.terrain = const Value.absent(),
    this.hydro = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat = const Value.absent(),
    this.lon = const Value.absent(),
    this.distancetoorigin = const Value.absent(),
  });
  static Insertable<dafif_airfield> custom({
    Expression<int> id,
    Expression<String> arptident,
    Expression<String> name,
    Expression<String> stateprov,
    Expression<String> icao,
    Expression<String> faahostid,
    Expression<String> lochdatum,
    Expression<String> wgsdatum,
    Expression<String> wgslat,
    Expression<String> wgsdlat,
    Expression<String> wgslong,
    Expression<String> wgsdlong,
    Expression<String> elev,
    Expression<String> type,
    Expression<String> magvar,
    Expression<String> wac,
    Expression<String> beacon,
    Expression<String> secondarpt,
    Expression<String> opragy,
    Expression<String> secname,
    Expression<String> secicao,
    Expression<String> secfaa,
    Expression<String> secopragy,
    Expression<String> cycledate,
    Expression<String> terrain,
    Expression<String> hydro,
    Expression<String> crc32,
    Expression<double> lat,
    Expression<double> lon,
    Expression<double> distancetoorigin,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arptident != null) 'arptident': arptident,
      if (name != null) 'name': name,
      if (stateprov != null) 'stateprov': stateprov,
      if (icao != null) 'icao': icao,
      if (faahostid != null) 'faahostid': faahostid,
      if (lochdatum != null) 'lochdatum': lochdatum,
      if (wgsdatum != null) 'wgsdatum': wgsdatum,
      if (wgslat != null) 'wgslat': wgslat,
      if (wgsdlat != null) 'wgsdlat': wgsdlat,
      if (wgslong != null) 'wgslong': wgslong,
      if (wgsdlong != null) 'wgsdlong': wgsdlong,
      if (elev != null) 'elev': elev,
      if (type != null) 'type': type,
      if (magvar != null) 'magvar': magvar,
      if (wac != null) 'wac': wac,
      if (beacon != null) 'beacon': beacon,
      if (secondarpt != null) 'secondarpt': secondarpt,
      if (opragy != null) 'opragy': opragy,
      if (secname != null) 'secname': secname,
      if (secicao != null) 'secicao': secicao,
      if (secfaa != null) 'secfaa': secfaa,
      if (secopragy != null) 'secopragy': secopragy,
      if (cycledate != null) 'cycledate': cycledate,
      if (terrain != null) 'terrain': terrain,
      if (hydro != null) 'hydro': hydro,
      if (crc32 != null) 'crc32': crc32,
      if (lat != null) 'lat': lat,
      if (lon != null) 'lon': lon,
      if (distancetoorigin != null) 'distancetoorigin': distancetoorigin,
    });
  }

  DafifAirfieldCompanion copyWith(
      {Value<int> id,
      Value<String> arptident,
      Value<String> name,
      Value<String> stateprov,
      Value<String> icao,
      Value<String> faahostid,
      Value<String> lochdatum,
      Value<String> wgsdatum,
      Value<String> wgslat,
      Value<String> wgsdlat,
      Value<String> wgslong,
      Value<String> wgsdlong,
      Value<String> elev,
      Value<String> type,
      Value<String> magvar,
      Value<String> wac,
      Value<String> beacon,
      Value<String> secondarpt,
      Value<String> opragy,
      Value<String> secname,
      Value<String> secicao,
      Value<String> secfaa,
      Value<String> secopragy,
      Value<String> cycledate,
      Value<String> terrain,
      Value<String> hydro,
      Value<String> crc32,
      Value<double> lat,
      Value<double> lon,
      Value<double> distancetoorigin}) {
    return DafifAirfieldCompanion(
      id: id ?? this.id,
      arptident: arptident ?? this.arptident,
      name: name ?? this.name,
      stateprov: stateprov ?? this.stateprov,
      icao: icao ?? this.icao,
      faahostid: faahostid ?? this.faahostid,
      lochdatum: lochdatum ?? this.lochdatum,
      wgsdatum: wgsdatum ?? this.wgsdatum,
      wgslat: wgslat ?? this.wgslat,
      wgsdlat: wgsdlat ?? this.wgsdlat,
      wgslong: wgslong ?? this.wgslong,
      wgsdlong: wgsdlong ?? this.wgsdlong,
      elev: elev ?? this.elev,
      type: type ?? this.type,
      magvar: magvar ?? this.magvar,
      wac: wac ?? this.wac,
      beacon: beacon ?? this.beacon,
      secondarpt: secondarpt ?? this.secondarpt,
      opragy: opragy ?? this.opragy,
      secname: secname ?? this.secname,
      secicao: secicao ?? this.secicao,
      secfaa: secfaa ?? this.secfaa,
      secopragy: secopragy ?? this.secopragy,
      cycledate: cycledate ?? this.cycledate,
      terrain: terrain ?? this.terrain,
      hydro: hydro ?? this.hydro,
      crc32: crc32 ?? this.crc32,
      lat: lat ?? this.lat,
      lon: lon ?? this.lon,
      distancetoorigin: distancetoorigin ?? this.distancetoorigin,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arptident.present) {
      map['arptident'] = Variable<String>(arptident.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (stateprov.present) {
      map['stateprov'] = Variable<String>(stateprov.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (faahostid.present) {
      map['faahostid'] = Variable<String>(faahostid.value);
    }
    if (lochdatum.present) {
      map['lochdatum'] = Variable<String>(lochdatum.value);
    }
    if (wgsdatum.present) {
      map['wgsdatum'] = Variable<String>(wgsdatum.value);
    }
    if (wgslat.present) {
      map['wgslat'] = Variable<String>(wgslat.value);
    }
    if (wgsdlat.present) {
      map['wgsdlat'] = Variable<String>(wgsdlat.value);
    }
    if (wgslong.present) {
      map['wgslong'] = Variable<String>(wgslong.value);
    }
    if (wgsdlong.present) {
      map['wgsdlong'] = Variable<String>(wgsdlong.value);
    }
    if (elev.present) {
      map['elev'] = Variable<String>(elev.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (magvar.present) {
      map['magvar'] = Variable<String>(magvar.value);
    }
    if (wac.present) {
      map['wac'] = Variable<String>(wac.value);
    }
    if (beacon.present) {
      map['beacon'] = Variable<String>(beacon.value);
    }
    if (secondarpt.present) {
      map['secondarpt'] = Variable<String>(secondarpt.value);
    }
    if (opragy.present) {
      map['opragy'] = Variable<String>(opragy.value);
    }
    if (secname.present) {
      map['secname'] = Variable<String>(secname.value);
    }
    if (secicao.present) {
      map['secicao'] = Variable<String>(secicao.value);
    }
    if (secfaa.present) {
      map['secfaa'] = Variable<String>(secfaa.value);
    }
    if (secopragy.present) {
      map['secopragy'] = Variable<String>(secopragy.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (terrain.present) {
      map['terrain'] = Variable<String>(terrain.value);
    }
    if (hydro.present) {
      map['hydro'] = Variable<String>(hydro.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<String>(crc32.value);
    }
    if (lat.present) {
      map['lat'] = Variable<double>(lat.value);
    }
    if (lon.present) {
      map['lon'] = Variable<double>(lon.value);
    }
    if (distancetoorigin.present) {
      map['distancetoorigin'] = Variable<double>(distancetoorigin.value);
    }
    return map;
  }
}

class $DafifAirfieldTable extends DafifAirfield
    with TableInfo<$DafifAirfieldTable, dafif_airfield> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAirfieldTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arptidentMeta = const VerificationMeta('arptident');
  GeneratedTextColumn _arptident;
  @override
  GeneratedTextColumn get arptident => _arptident ??= _constructArptident();
  GeneratedTextColumn _constructArptident() {
    return GeneratedTextColumn(
      'arptident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _stateprovMeta = const VerificationMeta('stateprov');
  GeneratedTextColumn _stateprov;
  @override
  GeneratedTextColumn get stateprov => _stateprov ??= _constructStateprov();
  GeneratedTextColumn _constructStateprov() {
    return GeneratedTextColumn(
      'stateprov',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _faahostidMeta = const VerificationMeta('faahostid');
  GeneratedTextColumn _faahostid;
  @override
  GeneratedTextColumn get faahostid => _faahostid ??= _constructFaahostid();
  GeneratedTextColumn _constructFaahostid() {
    return GeneratedTextColumn(
      'faahostid',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lochdatumMeta = const VerificationMeta('lochdatum');
  GeneratedTextColumn _lochdatum;
  @override
  GeneratedTextColumn get lochdatum => _lochdatum ??= _constructLochdatum();
  GeneratedTextColumn _constructLochdatum() {
    return GeneratedTextColumn(
      'lochdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdatumMeta = const VerificationMeta('wgsdatum');
  GeneratedTextColumn _wgsdatum;
  @override
  GeneratedTextColumn get wgsdatum => _wgsdatum ??= _constructWgsdatum();
  GeneratedTextColumn _constructWgsdatum() {
    return GeneratedTextColumn(
      'wgsdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslatMeta = const VerificationMeta('wgslat');
  GeneratedTextColumn _wgslat;
  @override
  GeneratedTextColumn get wgslat => _wgslat ??= _constructWgslat();
  GeneratedTextColumn _constructWgslat() {
    return GeneratedTextColumn(
      'wgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlatMeta = const VerificationMeta('wgsdlat');
  GeneratedTextColumn _wgsdlat;
  @override
  GeneratedTextColumn get wgsdlat => _wgsdlat ??= _constructWgsdlat();
  GeneratedTextColumn _constructWgsdlat() {
    return GeneratedTextColumn(
      'wgsdlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslongMeta = const VerificationMeta('wgslong');
  GeneratedTextColumn _wgslong;
  @override
  GeneratedTextColumn get wgslong => _wgslong ??= _constructWgslong();
  GeneratedTextColumn _constructWgslong() {
    return GeneratedTextColumn(
      'wgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlongMeta = const VerificationMeta('wgsdlong');
  GeneratedTextColumn _wgsdlong;
  @override
  GeneratedTextColumn get wgsdlong => _wgsdlong ??= _constructWgsdlong();
  GeneratedTextColumn _constructWgsdlong() {
    return GeneratedTextColumn(
      'wgsdlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _elevMeta = const VerificationMeta('elev');
  GeneratedTextColumn _elev;
  @override
  GeneratedTextColumn get elev => _elev ??= _constructElev();
  GeneratedTextColumn _constructElev() {
    return GeneratedTextColumn(
      'elev',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _magvarMeta = const VerificationMeta('magvar');
  GeneratedTextColumn _magvar;
  @override
  GeneratedTextColumn get magvar => _magvar ??= _constructMagvar();
  GeneratedTextColumn _constructMagvar() {
    return GeneratedTextColumn(
      'magvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wacMeta = const VerificationMeta('wac');
  GeneratedTextColumn _wac;
  @override
  GeneratedTextColumn get wac => _wac ??= _constructWac();
  GeneratedTextColumn _constructWac() {
    return GeneratedTextColumn(
      'wac',
      $tableName,
      true,
    );
  }

  final VerificationMeta _beaconMeta = const VerificationMeta('beacon');
  GeneratedTextColumn _beacon;
  @override
  GeneratedTextColumn get beacon => _beacon ??= _constructBeacon();
  GeneratedTextColumn _constructBeacon() {
    return GeneratedTextColumn(
      'beacon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _secondarptMeta = const VerificationMeta('secondarpt');
  GeneratedTextColumn _secondarpt;
  @override
  GeneratedTextColumn get secondarpt => _secondarpt ??= _constructSecondarpt();
  GeneratedTextColumn _constructSecondarpt() {
    return GeneratedTextColumn(
      'secondarpt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _opragyMeta = const VerificationMeta('opragy');
  GeneratedTextColumn _opragy;
  @override
  GeneratedTextColumn get opragy => _opragy ??= _constructOpragy();
  GeneratedTextColumn _constructOpragy() {
    return GeneratedTextColumn(
      'opragy',
      $tableName,
      true,
    );
  }

  final VerificationMeta _secnameMeta = const VerificationMeta('secname');
  GeneratedTextColumn _secname;
  @override
  GeneratedTextColumn get secname => _secname ??= _constructSecname();
  GeneratedTextColumn _constructSecname() {
    return GeneratedTextColumn(
      'secname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _secicaoMeta = const VerificationMeta('secicao');
  GeneratedTextColumn _secicao;
  @override
  GeneratedTextColumn get secicao => _secicao ??= _constructSecicao();
  GeneratedTextColumn _constructSecicao() {
    return GeneratedTextColumn(
      'secicao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _secfaaMeta = const VerificationMeta('secfaa');
  GeneratedTextColumn _secfaa;
  @override
  GeneratedTextColumn get secfaa => _secfaa ??= _constructSecfaa();
  GeneratedTextColumn _constructSecfaa() {
    return GeneratedTextColumn(
      'secfaa',
      $tableName,
      true,
    );
  }

  final VerificationMeta _secopragyMeta = const VerificationMeta('secopragy');
  GeneratedTextColumn _secopragy;
  @override
  GeneratedTextColumn get secopragy => _secopragy ??= _constructSecopragy();
  GeneratedTextColumn _constructSecopragy() {
    return GeneratedTextColumn(
      'secopragy',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _terrainMeta = const VerificationMeta('terrain');
  GeneratedTextColumn _terrain;
  @override
  GeneratedTextColumn get terrain => _terrain ??= _constructTerrain();
  GeneratedTextColumn _constructTerrain() {
    return GeneratedTextColumn(
      'terrain',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hydroMeta = const VerificationMeta('hydro');
  GeneratedTextColumn _hydro;
  @override
  GeneratedTextColumn get hydro => _hydro ??= _constructHydro();
  GeneratedTextColumn _constructHydro() {
    return GeneratedTextColumn(
      'hydro',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedTextColumn _crc32;
  @override
  GeneratedTextColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedTextColumn _constructCrc32() {
    return GeneratedTextColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _latMeta = const VerificationMeta('lat');
  GeneratedRealColumn _lat;
  @override
  GeneratedRealColumn get lat => _lat ??= _constructLat();
  GeneratedRealColumn _constructLat() {
    return GeneratedRealColumn(
      'lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lonMeta = const VerificationMeta('lon');
  GeneratedRealColumn _lon;
  @override
  GeneratedRealColumn get lon => _lon ??= _constructLon();
  GeneratedRealColumn _constructLon() {
    return GeneratedRealColumn(
      'lon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _distancetooriginMeta =
      const VerificationMeta('distancetoorigin');
  GeneratedRealColumn _distancetoorigin;
  @override
  GeneratedRealColumn get distancetoorigin =>
      _distancetoorigin ??= _constructDistancetoorigin();
  GeneratedRealColumn _constructDistancetoorigin() {
    return GeneratedRealColumn(
      'distancetoorigin',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arptident,
        name,
        stateprov,
        icao,
        faahostid,
        lochdatum,
        wgsdatum,
        wgslat,
        wgsdlat,
        wgslong,
        wgsdlong,
        elev,
        type,
        magvar,
        wac,
        beacon,
        secondarpt,
        opragy,
        secname,
        secicao,
        secfaa,
        secopragy,
        cycledate,
        terrain,
        hydro,
        crc32,
        lat,
        lon,
        distancetoorigin
      ];
  @override
  $DafifAirfieldTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_airfield';
  @override
  final String actualTableName = 'dafif_airfield';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_airfield> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arptident')) {
      context.handle(_arptidentMeta,
          arptident.isAcceptableOrUnknown(data['arptident'], _arptidentMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('stateprov')) {
      context.handle(_stateprovMeta,
          stateprov.isAcceptableOrUnknown(data['stateprov'], _stateprovMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('faahostid')) {
      context.handle(_faahostidMeta,
          faahostid.isAcceptableOrUnknown(data['faahostid'], _faahostidMeta));
    }
    if (data.containsKey('lochdatum')) {
      context.handle(_lochdatumMeta,
          lochdatum.isAcceptableOrUnknown(data['lochdatum'], _lochdatumMeta));
    }
    if (data.containsKey('wgsdatum')) {
      context.handle(_wgsdatumMeta,
          wgsdatum.isAcceptableOrUnknown(data['wgsdatum'], _wgsdatumMeta));
    }
    if (data.containsKey('wgslat')) {
      context.handle(_wgslatMeta,
          wgslat.isAcceptableOrUnknown(data['wgslat'], _wgslatMeta));
    }
    if (data.containsKey('wgsdlat')) {
      context.handle(_wgsdlatMeta,
          wgsdlat.isAcceptableOrUnknown(data['wgsdlat'], _wgsdlatMeta));
    }
    if (data.containsKey('wgslong')) {
      context.handle(_wgslongMeta,
          wgslong.isAcceptableOrUnknown(data['wgslong'], _wgslongMeta));
    }
    if (data.containsKey('wgsdlong')) {
      context.handle(_wgsdlongMeta,
          wgsdlong.isAcceptableOrUnknown(data['wgsdlong'], _wgsdlongMeta));
    }
    if (data.containsKey('elev')) {
      context.handle(
          _elevMeta, elev.isAcceptableOrUnknown(data['elev'], _elevMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('magvar')) {
      context.handle(_magvarMeta,
          magvar.isAcceptableOrUnknown(data['magvar'], _magvarMeta));
    }
    if (data.containsKey('wac')) {
      context.handle(
          _wacMeta, wac.isAcceptableOrUnknown(data['wac'], _wacMeta));
    }
    if (data.containsKey('beacon')) {
      context.handle(_beaconMeta,
          beacon.isAcceptableOrUnknown(data['beacon'], _beaconMeta));
    }
    if (data.containsKey('secondarpt')) {
      context.handle(
          _secondarptMeta,
          secondarpt.isAcceptableOrUnknown(
              data['secondarpt'], _secondarptMeta));
    }
    if (data.containsKey('opragy')) {
      context.handle(_opragyMeta,
          opragy.isAcceptableOrUnknown(data['opragy'], _opragyMeta));
    }
    if (data.containsKey('secname')) {
      context.handle(_secnameMeta,
          secname.isAcceptableOrUnknown(data['secname'], _secnameMeta));
    }
    if (data.containsKey('secicao')) {
      context.handle(_secicaoMeta,
          secicao.isAcceptableOrUnknown(data['secicao'], _secicaoMeta));
    }
    if (data.containsKey('secfaa')) {
      context.handle(_secfaaMeta,
          secfaa.isAcceptableOrUnknown(data['secfaa'], _secfaaMeta));
    }
    if (data.containsKey('secopragy')) {
      context.handle(_secopragyMeta,
          secopragy.isAcceptableOrUnknown(data['secopragy'], _secopragyMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('terrain')) {
      context.handle(_terrainMeta,
          terrain.isAcceptableOrUnknown(data['terrain'], _terrainMeta));
    }
    if (data.containsKey('hydro')) {
      context.handle(
          _hydroMeta, hydro.isAcceptableOrUnknown(data['hydro'], _hydroMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('lat')) {
      context.handle(
          _latMeta, lat.isAcceptableOrUnknown(data['lat'], _latMeta));
    }
    if (data.containsKey('lon')) {
      context.handle(
          _lonMeta, lon.isAcceptableOrUnknown(data['lon'], _lonMeta));
    }
    if (data.containsKey('distancetoorigin')) {
      context.handle(
          _distancetooriginMeta,
          distancetoorigin.isAcceptableOrUnknown(
              data['distancetoorigin'], _distancetooriginMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_airfield map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_airfield.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAirfieldTable createAlias(String alias) {
    return $DafifAirfieldTable(_db, alias);
  }
}

class dafif_appc_arpt_type extends DataClass
    implements Insertable<dafif_appc_arpt_type> {
  final int id;
  final String type;
  final String description;
  final int crc32;
  dafif_appc_arpt_type(
      {@required this.id, this.type, this.description, this.crc32});
  factory dafif_appc_arpt_type.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_appc_arpt_type(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      description: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}description']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_appc_arpt_type.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_appc_arpt_type(
      id: serializer.fromJson<int>(json['id']),
      type: serializer.fromJson<String>(json['type']),
      description: serializer.fromJson<String>(json['description']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'type': serializer.toJson<String>(type),
      'description': serializer.toJson<String>(description),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_appc_arpt_type copyWith(
          {int id, String type, String description, int crc32}) =>
      dafif_appc_arpt_type(
        id: id ?? this.id,
        type: type ?? this.type,
        description: description ?? this.description,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_appc_arpt_type(')
          ..write('id: $id, ')
          ..write('type: $type, ')
          ..write('description: $description, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(type.hashCode, $mrjc(description.hashCode, crc32.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_appc_arpt_type &&
          other.id == this.id &&
          other.type == this.type &&
          other.description == this.description &&
          other.crc32 == this.crc32);
}

class DafifAppcArptTypeCompanion extends UpdateCompanion<dafif_appc_arpt_type> {
  final Value<int> id;
  final Value<String> type;
  final Value<String> description;
  final Value<int> crc32;
  const DafifAppcArptTypeCompanion({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAppcArptTypeCompanion.insert({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_appc_arpt_type> custom({
    Expression<int> id,
    Expression<String> type,
    Expression<String> description,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (type != null) 'type': type,
      if (description != null) 'description': description,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAppcArptTypeCompanion copyWith(
      {Value<int> id,
      Value<String> type,
      Value<String> description,
      Value<int> crc32}) {
    return DafifAppcArptTypeCompanion(
      id: id ?? this.id,
      type: type ?? this.type,
      description: description ?? this.description,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAppcArptTypeTable extends DafifAppcArptType
    with TableInfo<$DafifAppcArptTypeTable, dafif_appc_arpt_type> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAppcArptTypeTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descriptionMeta =
      const VerificationMeta('description');
  GeneratedTextColumn _description;
  @override
  GeneratedTextColumn get description =>
      _description ??= _constructDescription();
  GeneratedTextColumn _constructDescription() {
    return GeneratedTextColumn(
      'description',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, type, description, crc32];
  @override
  $DafifAppcArptTypeTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_appc_arpt_type';
  @override
  final String actualTableName = 'dafif_appc_arpt_type';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_appc_arpt_type> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('description')) {
      context.handle(
          _descriptionMeta,
          description.isAcceptableOrUnknown(
              data['description'], _descriptionMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_appc_arpt_type map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_appc_arpt_type.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAppcArptTypeTable createAlias(String alias) {
    return $DafifAppcArptTypeTable(_db, alias);
  }
}

class dafif_appc_ats_type extends DataClass
    implements Insertable<dafif_appc_ats_type> {
  final int id;
  final String type;
  final String description;
  final int crc32;
  dafif_appc_ats_type(
      {@required this.id, this.type, this.description, this.crc32});
  factory dafif_appc_ats_type.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_appc_ats_type(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      description: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}description']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_appc_ats_type.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_appc_ats_type(
      id: serializer.fromJson<int>(json['id']),
      type: serializer.fromJson<String>(json['type']),
      description: serializer.fromJson<String>(json['description']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'type': serializer.toJson<String>(type),
      'description': serializer.toJson<String>(description),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_appc_ats_type copyWith(
          {int id, String type, String description, int crc32}) =>
      dafif_appc_ats_type(
        id: id ?? this.id,
        type: type ?? this.type,
        description: description ?? this.description,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_appc_ats_type(')
          ..write('id: $id, ')
          ..write('type: $type, ')
          ..write('description: $description, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(type.hashCode, $mrjc(description.hashCode, crc32.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_appc_ats_type &&
          other.id == this.id &&
          other.type == this.type &&
          other.description == this.description &&
          other.crc32 == this.crc32);
}

class DafifAppcAtsTypeCompanion extends UpdateCompanion<dafif_appc_ats_type> {
  final Value<int> id;
  final Value<String> type;
  final Value<String> description;
  final Value<int> crc32;
  const DafifAppcAtsTypeCompanion({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAppcAtsTypeCompanion.insert({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_appc_ats_type> custom({
    Expression<int> id,
    Expression<String> type,
    Expression<String> description,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (type != null) 'type': type,
      if (description != null) 'description': description,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAppcAtsTypeCompanion copyWith(
      {Value<int> id,
      Value<String> type,
      Value<String> description,
      Value<int> crc32}) {
    return DafifAppcAtsTypeCompanion(
      id: id ?? this.id,
      type: type ?? this.type,
      description: description ?? this.description,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAppcAtsTypeTable extends DafifAppcAtsType
    with TableInfo<$DafifAppcAtsTypeTable, dafif_appc_ats_type> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAppcAtsTypeTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descriptionMeta =
      const VerificationMeta('description');
  GeneratedTextColumn _description;
  @override
  GeneratedTextColumn get description =>
      _description ??= _constructDescription();
  GeneratedTextColumn _constructDescription() {
    return GeneratedTextColumn(
      'description',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, type, description, crc32];
  @override
  $DafifAppcAtsTypeTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_appc_ats_type';
  @override
  final String actualTableName = 'dafif_appc_ats_type';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_appc_ats_type> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('description')) {
      context.handle(
          _descriptionMeta,
          description.isAcceptableOrUnknown(
              data['description'], _descriptionMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_appc_ats_type map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_appc_ats_type.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAppcAtsTypeTable createAlias(String alias) {
    return $DafifAppcAtsTypeTable(_db, alias);
  }
}

class dafif_appc_bdry_type extends DataClass
    implements Insertable<dafif_appc_bdry_type> {
  final int id;
  final String type;
  final String description;
  final int crc32;
  dafif_appc_bdry_type(
      {@required this.id, this.type, this.description, this.crc32});
  factory dafif_appc_bdry_type.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_appc_bdry_type(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      description: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}description']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_appc_bdry_type.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_appc_bdry_type(
      id: serializer.fromJson<int>(json['id']),
      type: serializer.fromJson<String>(json['type']),
      description: serializer.fromJson<String>(json['description']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'type': serializer.toJson<String>(type),
      'description': serializer.toJson<String>(description),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_appc_bdry_type copyWith(
          {int id, String type, String description, int crc32}) =>
      dafif_appc_bdry_type(
        id: id ?? this.id,
        type: type ?? this.type,
        description: description ?? this.description,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_appc_bdry_type(')
          ..write('id: $id, ')
          ..write('type: $type, ')
          ..write('description: $description, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(type.hashCode, $mrjc(description.hashCode, crc32.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_appc_bdry_type &&
          other.id == this.id &&
          other.type == this.type &&
          other.description == this.description &&
          other.crc32 == this.crc32);
}

class DafifAppcBdryTypeCompanion extends UpdateCompanion<dafif_appc_bdry_type> {
  final Value<int> id;
  final Value<String> type;
  final Value<String> description;
  final Value<int> crc32;
  const DafifAppcBdryTypeCompanion({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAppcBdryTypeCompanion.insert({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_appc_bdry_type> custom({
    Expression<int> id,
    Expression<String> type,
    Expression<String> description,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (type != null) 'type': type,
      if (description != null) 'description': description,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAppcBdryTypeCompanion copyWith(
      {Value<int> id,
      Value<String> type,
      Value<String> description,
      Value<int> crc32}) {
    return DafifAppcBdryTypeCompanion(
      id: id ?? this.id,
      type: type ?? this.type,
      description: description ?? this.description,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAppcBdryTypeTable extends DafifAppcBdryType
    with TableInfo<$DafifAppcBdryTypeTable, dafif_appc_bdry_type> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAppcBdryTypeTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descriptionMeta =
      const VerificationMeta('description');
  GeneratedTextColumn _description;
  @override
  GeneratedTextColumn get description =>
      _description ??= _constructDescription();
  GeneratedTextColumn _constructDescription() {
    return GeneratedTextColumn(
      'description',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, type, description, crc32];
  @override
  $DafifAppcBdryTypeTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_appc_bdry_type';
  @override
  final String actualTableName = 'dafif_appc_bdry_type';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_appc_bdry_type> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('description')) {
      context.handle(
          _descriptionMeta,
          description.isAcceptableOrUnknown(
              data['description'], _descriptionMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_appc_bdry_type map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_appc_bdry_type.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAppcBdryTypeTable createAlias(String alias) {
    return $DafifAppcBdryTypeTable(_db, alias);
  }
}

class dafif_appc_cc_icao extends DataClass
    implements Insertable<dafif_appc_cc_icao> {
  final int id;
  final String country;
  final String countryname;
  final String icaorgn;
  final String usage;
  final int crc32;
  dafif_appc_cc_icao(
      {@required this.id,
      this.country,
      this.countryname,
      this.icaorgn,
      this.usage,
      this.crc32});
  factory dafif_appc_cc_icao.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_appc_cc_icao(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      country:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}country']),
      countryname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}countryname']),
      icaorgn:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}icaorgn']),
      usage:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}usage']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || country != null) {
      map['country'] = Variable<String>(country);
    }
    if (!nullToAbsent || countryname != null) {
      map['countryname'] = Variable<String>(countryname);
    }
    if (!nullToAbsent || icaorgn != null) {
      map['icaorgn'] = Variable<String>(icaorgn);
    }
    if (!nullToAbsent || usage != null) {
      map['usage'] = Variable<String>(usage);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_appc_cc_icao.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_appc_cc_icao(
      id: serializer.fromJson<int>(json['id']),
      country: serializer.fromJson<String>(json['country']),
      countryname: serializer.fromJson<String>(json['countryname']),
      icaorgn: serializer.fromJson<String>(json['icaorgn']),
      usage: serializer.fromJson<String>(json['usage']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'country': serializer.toJson<String>(country),
      'countryname': serializer.toJson<String>(countryname),
      'icaorgn': serializer.toJson<String>(icaorgn),
      'usage': serializer.toJson<String>(usage),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_appc_cc_icao copyWith(
          {int id,
          String country,
          String countryname,
          String icaorgn,
          String usage,
          int crc32}) =>
      dafif_appc_cc_icao(
        id: id ?? this.id,
        country: country ?? this.country,
        countryname: countryname ?? this.countryname,
        icaorgn: icaorgn ?? this.icaorgn,
        usage: usage ?? this.usage,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_appc_cc_icao(')
          ..write('id: $id, ')
          ..write('country: $country, ')
          ..write('countryname: $countryname, ')
          ..write('icaorgn: $icaorgn, ')
          ..write('usage: $usage, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          country.hashCode,
          $mrjc(
              countryname.hashCode,
              $mrjc(
                  icaorgn.hashCode, $mrjc(usage.hashCode, crc32.hashCode))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_appc_cc_icao &&
          other.id == this.id &&
          other.country == this.country &&
          other.countryname == this.countryname &&
          other.icaorgn == this.icaorgn &&
          other.usage == this.usage &&
          other.crc32 == this.crc32);
}

class DafifAppcCcIcaoCompanion extends UpdateCompanion<dafif_appc_cc_icao> {
  final Value<int> id;
  final Value<String> country;
  final Value<String> countryname;
  final Value<String> icaorgn;
  final Value<String> usage;
  final Value<int> crc32;
  const DafifAppcCcIcaoCompanion({
    this.id = const Value.absent(),
    this.country = const Value.absent(),
    this.countryname = const Value.absent(),
    this.icaorgn = const Value.absent(),
    this.usage = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAppcCcIcaoCompanion.insert({
    this.id = const Value.absent(),
    this.country = const Value.absent(),
    this.countryname = const Value.absent(),
    this.icaorgn = const Value.absent(),
    this.usage = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_appc_cc_icao> custom({
    Expression<int> id,
    Expression<String> country,
    Expression<String> countryname,
    Expression<String> icaorgn,
    Expression<String> usage,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (country != null) 'country': country,
      if (countryname != null) 'countryname': countryname,
      if (icaorgn != null) 'icaorgn': icaorgn,
      if (usage != null) 'usage': usage,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAppcCcIcaoCompanion copyWith(
      {Value<int> id,
      Value<String> country,
      Value<String> countryname,
      Value<String> icaorgn,
      Value<String> usage,
      Value<int> crc32}) {
    return DafifAppcCcIcaoCompanion(
      id: id ?? this.id,
      country: country ?? this.country,
      countryname: countryname ?? this.countryname,
      icaorgn: icaorgn ?? this.icaorgn,
      usage: usage ?? this.usage,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (country.present) {
      map['country'] = Variable<String>(country.value);
    }
    if (countryname.present) {
      map['countryname'] = Variable<String>(countryname.value);
    }
    if (icaorgn.present) {
      map['icaorgn'] = Variable<String>(icaorgn.value);
    }
    if (usage.present) {
      map['usage'] = Variable<String>(usage.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAppcCcIcaoTable extends DafifAppcCcIcao
    with TableInfo<$DafifAppcCcIcaoTable, dafif_appc_cc_icao> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAppcCcIcaoTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _countryMeta = const VerificationMeta('country');
  GeneratedTextColumn _country;
  @override
  GeneratedTextColumn get country => _country ??= _constructCountry();
  GeneratedTextColumn _constructCountry() {
    return GeneratedTextColumn(
      'country',
      $tableName,
      true,
    );
  }

  final VerificationMeta _countrynameMeta =
      const VerificationMeta('countryname');
  GeneratedTextColumn _countryname;
  @override
  GeneratedTextColumn get countryname =>
      _countryname ??= _constructCountryname();
  GeneratedTextColumn _constructCountryname() {
    return GeneratedTextColumn(
      'countryname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaorgnMeta = const VerificationMeta('icaorgn');
  GeneratedTextColumn _icaorgn;
  @override
  GeneratedTextColumn get icaorgn => _icaorgn ??= _constructIcaorgn();
  GeneratedTextColumn _constructIcaorgn() {
    return GeneratedTextColumn(
      'icaorgn',
      $tableName,
      true,
    );
  }

  final VerificationMeta _usageMeta = const VerificationMeta('usage');
  GeneratedTextColumn _usage;
  @override
  GeneratedTextColumn get usage => _usage ??= _constructUsage();
  GeneratedTextColumn _constructUsage() {
    return GeneratedTextColumn(
      'usage',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, country, countryname, icaorgn, usage, crc32];
  @override
  $DafifAppcCcIcaoTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_appc_cc_icao';
  @override
  final String actualTableName = 'dafif_appc_cc_icao';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_appc_cc_icao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('country')) {
      context.handle(_countryMeta,
          country.isAcceptableOrUnknown(data['country'], _countryMeta));
    }
    if (data.containsKey('countryname')) {
      context.handle(
          _countrynameMeta,
          countryname.isAcceptableOrUnknown(
              data['countryname'], _countrynameMeta));
    }
    if (data.containsKey('icaorgn')) {
      context.handle(_icaorgnMeta,
          icaorgn.isAcceptableOrUnknown(data['icaorgn'], _icaorgnMeta));
    }
    if (data.containsKey('usage')) {
      context.handle(
          _usageMeta, usage.isAcceptableOrUnknown(data['usage'], _usageMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_appc_cc_icao map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_appc_cc_icao.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAppcCcIcaoTable createAlias(String alias) {
    return $DafifAppcCcIcaoTable(_db, alias);
  }
}

class dafif_appc_level extends DataClass
    implements Insertable<dafif_appc_level> {
  final int id;
  final String levelinfo;
  final String description;
  final int crc32;
  dafif_appc_level(
      {@required this.id, this.levelinfo, this.description, this.crc32});
  factory dafif_appc_level.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_appc_level(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      levelinfo: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}levelinfo']),
      description: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}description']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || levelinfo != null) {
      map['levelinfo'] = Variable<String>(levelinfo);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_appc_level.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_appc_level(
      id: serializer.fromJson<int>(json['id']),
      levelinfo: serializer.fromJson<String>(json['levelinfo']),
      description: serializer.fromJson<String>(json['description']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'levelinfo': serializer.toJson<String>(levelinfo),
      'description': serializer.toJson<String>(description),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_appc_level copyWith(
          {int id, String levelinfo, String description, int crc32}) =>
      dafif_appc_level(
        id: id ?? this.id,
        levelinfo: levelinfo ?? this.levelinfo,
        description: description ?? this.description,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_appc_level(')
          ..write('id: $id, ')
          ..write('levelinfo: $levelinfo, ')
          ..write('description: $description, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(levelinfo.hashCode, $mrjc(description.hashCode, crc32.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_appc_level &&
          other.id == this.id &&
          other.levelinfo == this.levelinfo &&
          other.description == this.description &&
          other.crc32 == this.crc32);
}

class DafifAppcLevelCompanion extends UpdateCompanion<dafif_appc_level> {
  final Value<int> id;
  final Value<String> levelinfo;
  final Value<String> description;
  final Value<int> crc32;
  const DafifAppcLevelCompanion({
    this.id = const Value.absent(),
    this.levelinfo = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAppcLevelCompanion.insert({
    this.id = const Value.absent(),
    this.levelinfo = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_appc_level> custom({
    Expression<int> id,
    Expression<String> levelinfo,
    Expression<String> description,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (levelinfo != null) 'levelinfo': levelinfo,
      if (description != null) 'description': description,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAppcLevelCompanion copyWith(
      {Value<int> id,
      Value<String> levelinfo,
      Value<String> description,
      Value<int> crc32}) {
    return DafifAppcLevelCompanion(
      id: id ?? this.id,
      levelinfo: levelinfo ?? this.levelinfo,
      description: description ?? this.description,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (levelinfo.present) {
      map['levelinfo'] = Variable<String>(levelinfo.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAppcLevelTable extends DafifAppcLevel
    with TableInfo<$DafifAppcLevelTable, dafif_appc_level> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAppcLevelTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _levelinfoMeta = const VerificationMeta('levelinfo');
  GeneratedTextColumn _levelinfo;
  @override
  GeneratedTextColumn get levelinfo => _levelinfo ??= _constructLevelinfo();
  GeneratedTextColumn _constructLevelinfo() {
    return GeneratedTextColumn(
      'levelinfo',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descriptionMeta =
      const VerificationMeta('description');
  GeneratedTextColumn _description;
  @override
  GeneratedTextColumn get description =>
      _description ??= _constructDescription();
  GeneratedTextColumn _constructDescription() {
    return GeneratedTextColumn(
      'description',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, levelinfo, description, crc32];
  @override
  $DafifAppcLevelTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_appc_level';
  @override
  final String actualTableName = 'dafif_appc_level';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_appc_level> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('levelinfo')) {
      context.handle(_levelinfoMeta,
          levelinfo.isAcceptableOrUnknown(data['levelinfo'], _levelinfoMeta));
    }
    if (data.containsKey('description')) {
      context.handle(
          _descriptionMeta,
          description.isAcceptableOrUnknown(
              data['description'], _descriptionMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_appc_level map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_appc_level.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAppcLevelTable createAlias(String alias) {
    return $DafifAppcLevelTable(_db, alias);
  }
}

class dafif_appc_suas_type extends DataClass
    implements Insertable<dafif_appc_suas_type> {
  final int id;
  final String type;
  final String description;
  final int crc32;
  dafif_appc_suas_type(
      {@required this.id, this.type, this.description, this.crc32});
  factory dafif_appc_suas_type.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_appc_suas_type(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      description: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}description']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_appc_suas_type.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_appc_suas_type(
      id: serializer.fromJson<int>(json['id']),
      type: serializer.fromJson<String>(json['type']),
      description: serializer.fromJson<String>(json['description']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'type': serializer.toJson<String>(type),
      'description': serializer.toJson<String>(description),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_appc_suas_type copyWith(
          {int id, String type, String description, int crc32}) =>
      dafif_appc_suas_type(
        id: id ?? this.id,
        type: type ?? this.type,
        description: description ?? this.description,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_appc_suas_type(')
          ..write('id: $id, ')
          ..write('type: $type, ')
          ..write('description: $description, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(type.hashCode, $mrjc(description.hashCode, crc32.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_appc_suas_type &&
          other.id == this.id &&
          other.type == this.type &&
          other.description == this.description &&
          other.crc32 == this.crc32);
}

class DafifAppcSuasTypeCompanion extends UpdateCompanion<dafif_appc_suas_type> {
  final Value<int> id;
  final Value<String> type;
  final Value<String> description;
  final Value<int> crc32;
  const DafifAppcSuasTypeCompanion({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAppcSuasTypeCompanion.insert({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.description = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_appc_suas_type> custom({
    Expression<int> id,
    Expression<String> type,
    Expression<String> description,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (type != null) 'type': type,
      if (description != null) 'description': description,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAppcSuasTypeCompanion copyWith(
      {Value<int> id,
      Value<String> type,
      Value<String> description,
      Value<int> crc32}) {
    return DafifAppcSuasTypeCompanion(
      id: id ?? this.id,
      type: type ?? this.type,
      description: description ?? this.description,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAppcSuasTypeTable extends DafifAppcSuasType
    with TableInfo<$DafifAppcSuasTypeTable, dafif_appc_suas_type> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAppcSuasTypeTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descriptionMeta =
      const VerificationMeta('description');
  GeneratedTextColumn _description;
  @override
  GeneratedTextColumn get description =>
      _description ??= _constructDescription();
  GeneratedTextColumn _constructDescription() {
    return GeneratedTextColumn(
      'description',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, type, description, crc32];
  @override
  $DafifAppcSuasTypeTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_appc_suas_type';
  @override
  final String actualTableName = 'dafif_appc_suas_type';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_appc_suas_type> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('description')) {
      context.handle(
          _descriptionMeta,
          description.isAcceptableOrUnknown(
              data['description'], _descriptionMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_appc_suas_type map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_appc_suas_type.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAppcSuasTypeTable createAlias(String alias) {
    return $DafifAppcSuasTypeTable(_db, alias);
  }
}

class dafif_arresting_system extends DataClass
    implements Insertable<dafif_arresting_system> {
  final int id;
  final String arptident;
  final String rwyident;
  final String strlocation;
  final String type;
  final String energyabsorptiondevicetype;
  final String engagingdevicetype;
  dafif_arresting_system(
      {@required this.id,
      this.arptident,
      this.rwyident,
      this.strlocation,
      this.type,
      this.energyabsorptiondevicetype,
      this.engagingdevicetype});
  factory dafif_arresting_system.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_arresting_system(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arptident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arptident']),
      rwyident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}rwyident']),
      strlocation: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}strlocation']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      energyabsorptiondevicetype: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}energyabsorptiondevicetype']),
      engagingdevicetype: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}engagingdevicetype']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arptident != null) {
      map['arptident'] = Variable<String>(arptident);
    }
    if (!nullToAbsent || rwyident != null) {
      map['rwyident'] = Variable<String>(rwyident);
    }
    if (!nullToAbsent || strlocation != null) {
      map['strlocation'] = Variable<String>(strlocation);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || energyabsorptiondevicetype != null) {
      map['energyabsorptiondevicetype'] =
          Variable<String>(energyabsorptiondevicetype);
    }
    if (!nullToAbsent || engagingdevicetype != null) {
      map['engagingdevicetype'] = Variable<String>(engagingdevicetype);
    }
    return map;
  }

  factory dafif_arresting_system.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_arresting_system(
      id: serializer.fromJson<int>(json['id']),
      arptident: serializer.fromJson<String>(json['arptident']),
      rwyident: serializer.fromJson<String>(json['rwyident']),
      strlocation: serializer.fromJson<String>(json['strlocation']),
      type: serializer.fromJson<String>(json['type']),
      energyabsorptiondevicetype:
          serializer.fromJson<String>(json['energyabsorptiondevicetype']),
      engagingdevicetype:
          serializer.fromJson<String>(json['engagingdevicetype']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arptident': serializer.toJson<String>(arptident),
      'rwyident': serializer.toJson<String>(rwyident),
      'strlocation': serializer.toJson<String>(strlocation),
      'type': serializer.toJson<String>(type),
      'energyabsorptiondevicetype':
          serializer.toJson<String>(energyabsorptiondevicetype),
      'engagingdevicetype': serializer.toJson<String>(engagingdevicetype),
    };
  }

  dafif_arresting_system copyWith(
          {int id,
          String arptident,
          String rwyident,
          String strlocation,
          String type,
          String energyabsorptiondevicetype,
          String engagingdevicetype}) =>
      dafif_arresting_system(
        id: id ?? this.id,
        arptident: arptident ?? this.arptident,
        rwyident: rwyident ?? this.rwyident,
        strlocation: strlocation ?? this.strlocation,
        type: type ?? this.type,
        energyabsorptiondevicetype:
            energyabsorptiondevicetype ?? this.energyabsorptiondevicetype,
        engagingdevicetype: engagingdevicetype ?? this.engagingdevicetype,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_arresting_system(')
          ..write('id: $id, ')
          ..write('arptident: $arptident, ')
          ..write('rwyident: $rwyident, ')
          ..write('strlocation: $strlocation, ')
          ..write('type: $type, ')
          ..write('energyabsorptiondevicetype: $energyabsorptiondevicetype, ')
          ..write('engagingdevicetype: $engagingdevicetype')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arptident.hashCode,
          $mrjc(
              rwyident.hashCode,
              $mrjc(
                  strlocation.hashCode,
                  $mrjc(
                      type.hashCode,
                      $mrjc(energyabsorptiondevicetype.hashCode,
                          engagingdevicetype.hashCode)))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_arresting_system &&
          other.id == this.id &&
          other.arptident == this.arptident &&
          other.rwyident == this.rwyident &&
          other.strlocation == this.strlocation &&
          other.type == this.type &&
          other.energyabsorptiondevicetype == this.energyabsorptiondevicetype &&
          other.engagingdevicetype == this.engagingdevicetype);
}

class DafifArrestingSystemCompanion
    extends UpdateCompanion<dafif_arresting_system> {
  final Value<int> id;
  final Value<String> arptident;
  final Value<String> rwyident;
  final Value<String> strlocation;
  final Value<String> type;
  final Value<String> energyabsorptiondevicetype;
  final Value<String> engagingdevicetype;
  const DafifArrestingSystemCompanion({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.rwyident = const Value.absent(),
    this.strlocation = const Value.absent(),
    this.type = const Value.absent(),
    this.energyabsorptiondevicetype = const Value.absent(),
    this.engagingdevicetype = const Value.absent(),
  });
  DafifArrestingSystemCompanion.insert({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.rwyident = const Value.absent(),
    this.strlocation = const Value.absent(),
    this.type = const Value.absent(),
    this.energyabsorptiondevicetype = const Value.absent(),
    this.engagingdevicetype = const Value.absent(),
  });
  static Insertable<dafif_arresting_system> custom({
    Expression<int> id,
    Expression<String> arptident,
    Expression<String> rwyident,
    Expression<String> strlocation,
    Expression<String> type,
    Expression<String> energyabsorptiondevicetype,
    Expression<String> engagingdevicetype,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arptident != null) 'arptident': arptident,
      if (rwyident != null) 'rwyident': rwyident,
      if (strlocation != null) 'strlocation': strlocation,
      if (type != null) 'type': type,
      if (energyabsorptiondevicetype != null)
        'energyabsorptiondevicetype': energyabsorptiondevicetype,
      if (engagingdevicetype != null) 'engagingdevicetype': engagingdevicetype,
    });
  }

  DafifArrestingSystemCompanion copyWith(
      {Value<int> id,
      Value<String> arptident,
      Value<String> rwyident,
      Value<String> strlocation,
      Value<String> type,
      Value<String> energyabsorptiondevicetype,
      Value<String> engagingdevicetype}) {
    return DafifArrestingSystemCompanion(
      id: id ?? this.id,
      arptident: arptident ?? this.arptident,
      rwyident: rwyident ?? this.rwyident,
      strlocation: strlocation ?? this.strlocation,
      type: type ?? this.type,
      energyabsorptiondevicetype:
          energyabsorptiondevicetype ?? this.energyabsorptiondevicetype,
      engagingdevicetype: engagingdevicetype ?? this.engagingdevicetype,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arptident.present) {
      map['arptident'] = Variable<String>(arptident.value);
    }
    if (rwyident.present) {
      map['rwyident'] = Variable<String>(rwyident.value);
    }
    if (strlocation.present) {
      map['strlocation'] = Variable<String>(strlocation.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (energyabsorptiondevicetype.present) {
      map['energyabsorptiondevicetype'] =
          Variable<String>(energyabsorptiondevicetype.value);
    }
    if (engagingdevicetype.present) {
      map['engagingdevicetype'] = Variable<String>(engagingdevicetype.value);
    }
    return map;
  }
}

class $DafifArrestingSystemTable extends DafifArrestingSystem
    with TableInfo<$DafifArrestingSystemTable, dafif_arresting_system> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifArrestingSystemTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arptidentMeta = const VerificationMeta('arptident');
  GeneratedTextColumn _arptident;
  @override
  GeneratedTextColumn get arptident => _arptident ??= _constructArptident();
  GeneratedTextColumn _constructArptident() {
    return GeneratedTextColumn(
      'arptident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rwyidentMeta = const VerificationMeta('rwyident');
  GeneratedTextColumn _rwyident;
  @override
  GeneratedTextColumn get rwyident => _rwyident ??= _constructRwyident();
  GeneratedTextColumn _constructRwyident() {
    return GeneratedTextColumn(
      'rwyident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _strlocationMeta =
      const VerificationMeta('strlocation');
  GeneratedTextColumn _strlocation;
  @override
  GeneratedTextColumn get strlocation =>
      _strlocation ??= _constructStrlocation();
  GeneratedTextColumn _constructStrlocation() {
    return GeneratedTextColumn(
      'strlocation',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _energyabsorptiondevicetypeMeta =
      const VerificationMeta('energyabsorptiondevicetype');
  GeneratedTextColumn _energyabsorptiondevicetype;
  @override
  GeneratedTextColumn get energyabsorptiondevicetype =>
      _energyabsorptiondevicetype ??= _constructEnergyabsorptiondevicetype();
  GeneratedTextColumn _constructEnergyabsorptiondevicetype() {
    return GeneratedTextColumn(
      'energyabsorptiondevicetype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _engagingdevicetypeMeta =
      const VerificationMeta('engagingdevicetype');
  GeneratedTextColumn _engagingdevicetype;
  @override
  GeneratedTextColumn get engagingdevicetype =>
      _engagingdevicetype ??= _constructEngagingdevicetype();
  GeneratedTextColumn _constructEngagingdevicetype() {
    return GeneratedTextColumn(
      'engagingdevicetype',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arptident,
        rwyident,
        strlocation,
        type,
        energyabsorptiondevicetype,
        engagingdevicetype
      ];
  @override
  $DafifArrestingSystemTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_arresting_system';
  @override
  final String actualTableName = 'dafif_arresting_system';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_arresting_system> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arptident')) {
      context.handle(_arptidentMeta,
          arptident.isAcceptableOrUnknown(data['arptident'], _arptidentMeta));
    }
    if (data.containsKey('rwyident')) {
      context.handle(_rwyidentMeta,
          rwyident.isAcceptableOrUnknown(data['rwyident'], _rwyidentMeta));
    }
    if (data.containsKey('strlocation')) {
      context.handle(
          _strlocationMeta,
          strlocation.isAcceptableOrUnknown(
              data['strlocation'], _strlocationMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('energyabsorptiondevicetype')) {
      context.handle(
          _energyabsorptiondevicetypeMeta,
          energyabsorptiondevicetype.isAcceptableOrUnknown(
              data['energyabsorptiondevicetype'],
              _energyabsorptiondevicetypeMeta));
    }
    if (data.containsKey('engagingdevicetype')) {
      context.handle(
          _engagingdevicetypeMeta,
          engagingdevicetype.isAcceptableOrUnknown(
              data['engagingdevicetype'], _engagingdevicetypeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_arresting_system map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_arresting_system.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifArrestingSystemTable createAlias(String alias) {
    return $DafifArrestingSystemTable(_db, alias);
  }
}

class dafif_atsroute extends DataClass implements Insertable<dafif_atsroute> {
  final int id;
  final String icao;
  final String atsident;
  final String direction;
  final String level;
  final int sequence;
  final double wpt1_latitude;
  final double wpt1_longitude;
  final String wpt1_ident;
  final double wpt2_latitude;
  final double wpt2_longitude;
  final String wpt2_ident;
  final String upperlimitstring;
  final String lowerlimitstring;
  final String wpt1_country;
  final String wpt2_country;
  final String type;
  final String bidirect;
  final String freqclass;
  final String status;
  final String wpt1icao;
  final String wpt1navtype;
  final String wpt1desc1;
  final String wpt1desc2;
  final String wpt1desc3;
  final String wpt1desc4;
  final String wpt1wgslat;
  final String wpt1wgslong;
  final String navtype;
  final String rnp;
  final String wpt2desc1;
  final String wpt2desc2;
  final String wpt2desc3;
  final String wpt2desc4;
  final String wpt2icao;
  final String wpt2wgslat;
  final String wpt2wgslong;
  final String distance;
  final String inbdcrs;
  final String minalt;
  final String outbdcrs;
  final String maa;
  final String cruiselevel;
  final String cycledate;
  final String rvsm;
  final String fixturn1;
  final String fixturn2;
  final String topleftlat;
  final String topleftlon;
  final String bottomrightlat;
  final String bottomrightlon;
  final int crc32;
  dafif_atsroute(
      {@required this.id,
      this.icao,
      this.atsident,
      this.direction,
      this.level,
      this.sequence,
      this.wpt1_latitude,
      this.wpt1_longitude,
      this.wpt1_ident,
      this.wpt2_latitude,
      this.wpt2_longitude,
      this.wpt2_ident,
      this.upperlimitstring,
      this.lowerlimitstring,
      this.wpt1_country,
      this.wpt2_country,
      this.type,
      this.bidirect,
      this.freqclass,
      this.status,
      this.wpt1icao,
      this.wpt1navtype,
      this.wpt1desc1,
      this.wpt1desc2,
      this.wpt1desc3,
      this.wpt1desc4,
      this.wpt1wgslat,
      this.wpt1wgslong,
      this.navtype,
      this.rnp,
      this.wpt2desc1,
      this.wpt2desc2,
      this.wpt2desc3,
      this.wpt2desc4,
      this.wpt2icao,
      this.wpt2wgslat,
      this.wpt2wgslong,
      this.distance,
      this.inbdcrs,
      this.minalt,
      this.outbdcrs,
      this.maa,
      this.cruiselevel,
      this.cycledate,
      this.rvsm,
      this.fixturn1,
      this.fixturn2,
      this.topleftlat,
      this.topleftlon,
      this.bottomrightlat,
      this.bottomrightlon,
      this.crc32});
  factory dafif_atsroute.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_atsroute(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      atsident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}atsident']),
      direction: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}direction']),
      level:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}level']),
      sequence:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}sequence']),
      wpt1_latitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1_latitude']),
      wpt1_longitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1_longitude']),
      wpt1_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1_ident']),
      wpt2_latitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2_latitude']),
      wpt2_longitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2_longitude']),
      wpt2_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2_ident']),
      upperlimitstring: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}upperlimitstring']),
      lowerlimitstring: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowerlimitstring']),
      wpt1_country: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1_country']),
      wpt2_country: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2_country']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      bidirect: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bidirect']),
      freqclass: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqclass']),
      status:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}status']),
      wpt1icao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1icao']),
      wpt1navtype: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1navtype']),
      wpt1desc1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1desc1']),
      wpt1desc2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1desc2']),
      wpt1desc3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1desc3']),
      wpt1desc4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1desc4']),
      wpt1wgslat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1wgslat']),
      wpt1wgslong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt1wgslong']),
      navtype:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navtype']),
      rnp: stringType.mapFromDatabaseResponse(data['${effectivePrefix}rnp']),
      wpt2desc1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2desc1']),
      wpt2desc2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2desc2']),
      wpt2desc3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2desc3']),
      wpt2desc4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2desc4']),
      wpt2icao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2icao']),
      wpt2wgslat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2wgslat']),
      wpt2wgslong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt2wgslong']),
      distance: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}distance']),
      inbdcrs:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}inbdcrs']),
      minalt:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}minalt']),
      outbdcrs: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}outbdcrs']),
      maa: stringType.mapFromDatabaseResponse(data['${effectivePrefix}maa']),
      cruiselevel: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cruiselevel']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      rvsm: stringType.mapFromDatabaseResponse(data['${effectivePrefix}rvsm']),
      fixturn1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}fixturn1']),
      fixturn2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}fixturn2']),
      topleftlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}topleftlat']),
      topleftlon: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}topleftlon']),
      bottomrightlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bottomrightlat']),
      bottomrightlon: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bottomrightlon']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || atsident != null) {
      map['atsident'] = Variable<String>(atsident);
    }
    if (!nullToAbsent || direction != null) {
      map['direction'] = Variable<String>(direction);
    }
    if (!nullToAbsent || level != null) {
      map['level'] = Variable<String>(level);
    }
    if (!nullToAbsent || sequence != null) {
      map['sequence'] = Variable<int>(sequence);
    }
    if (!nullToAbsent || wpt1_latitude != null) {
      map['wpt1_latitude'] = Variable<double>(wpt1_latitude);
    }
    if (!nullToAbsent || wpt1_longitude != null) {
      map['wpt1_longitude'] = Variable<double>(wpt1_longitude);
    }
    if (!nullToAbsent || wpt1_ident != null) {
      map['wpt1_ident'] = Variable<String>(wpt1_ident);
    }
    if (!nullToAbsent || wpt2_latitude != null) {
      map['wpt2_latitude'] = Variable<double>(wpt2_latitude);
    }
    if (!nullToAbsent || wpt2_longitude != null) {
      map['wpt2_longitude'] = Variable<double>(wpt2_longitude);
    }
    if (!nullToAbsent || wpt2_ident != null) {
      map['wpt2_ident'] = Variable<String>(wpt2_ident);
    }
    if (!nullToAbsent || upperlimitstring != null) {
      map['upperlimitstring'] = Variable<String>(upperlimitstring);
    }
    if (!nullToAbsent || lowerlimitstring != null) {
      map['lowerlimitstring'] = Variable<String>(lowerlimitstring);
    }
    if (!nullToAbsent || wpt1_country != null) {
      map['wpt1_country'] = Variable<String>(wpt1_country);
    }
    if (!nullToAbsent || wpt2_country != null) {
      map['wpt2_country'] = Variable<String>(wpt2_country);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || bidirect != null) {
      map['bidirect'] = Variable<String>(bidirect);
    }
    if (!nullToAbsent || freqclass != null) {
      map['freqclass'] = Variable<String>(freqclass);
    }
    if (!nullToAbsent || status != null) {
      map['status'] = Variable<String>(status);
    }
    if (!nullToAbsent || wpt1icao != null) {
      map['wpt1icao'] = Variable<String>(wpt1icao);
    }
    if (!nullToAbsent || wpt1navtype != null) {
      map['wpt1navtype'] = Variable<String>(wpt1navtype);
    }
    if (!nullToAbsent || wpt1desc1 != null) {
      map['wpt1desc1'] = Variable<String>(wpt1desc1);
    }
    if (!nullToAbsent || wpt1desc2 != null) {
      map['wpt1desc2'] = Variable<String>(wpt1desc2);
    }
    if (!nullToAbsent || wpt1desc3 != null) {
      map['wpt1desc3'] = Variable<String>(wpt1desc3);
    }
    if (!nullToAbsent || wpt1desc4 != null) {
      map['wpt1desc4'] = Variable<String>(wpt1desc4);
    }
    if (!nullToAbsent || wpt1wgslat != null) {
      map['wpt1wgslat'] = Variable<String>(wpt1wgslat);
    }
    if (!nullToAbsent || wpt1wgslong != null) {
      map['wpt1wgslong'] = Variable<String>(wpt1wgslong);
    }
    if (!nullToAbsent || navtype != null) {
      map['navtype'] = Variable<String>(navtype);
    }
    if (!nullToAbsent || rnp != null) {
      map['rnp'] = Variable<String>(rnp);
    }
    if (!nullToAbsent || wpt2desc1 != null) {
      map['wpt2desc1'] = Variable<String>(wpt2desc1);
    }
    if (!nullToAbsent || wpt2desc2 != null) {
      map['wpt2desc2'] = Variable<String>(wpt2desc2);
    }
    if (!nullToAbsent || wpt2desc3 != null) {
      map['wpt2desc3'] = Variable<String>(wpt2desc3);
    }
    if (!nullToAbsent || wpt2desc4 != null) {
      map['wpt2desc4'] = Variable<String>(wpt2desc4);
    }
    if (!nullToAbsent || wpt2icao != null) {
      map['wpt2icao'] = Variable<String>(wpt2icao);
    }
    if (!nullToAbsent || wpt2wgslat != null) {
      map['wpt2wgslat'] = Variable<String>(wpt2wgslat);
    }
    if (!nullToAbsent || wpt2wgslong != null) {
      map['wpt2wgslong'] = Variable<String>(wpt2wgslong);
    }
    if (!nullToAbsent || distance != null) {
      map['distance'] = Variable<String>(distance);
    }
    if (!nullToAbsent || inbdcrs != null) {
      map['inbdcrs'] = Variable<String>(inbdcrs);
    }
    if (!nullToAbsent || minalt != null) {
      map['minalt'] = Variable<String>(minalt);
    }
    if (!nullToAbsent || outbdcrs != null) {
      map['outbdcrs'] = Variable<String>(outbdcrs);
    }
    if (!nullToAbsent || maa != null) {
      map['maa'] = Variable<String>(maa);
    }
    if (!nullToAbsent || cruiselevel != null) {
      map['cruiselevel'] = Variable<String>(cruiselevel);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || rvsm != null) {
      map['rvsm'] = Variable<String>(rvsm);
    }
    if (!nullToAbsent || fixturn1 != null) {
      map['fixturn1'] = Variable<String>(fixturn1);
    }
    if (!nullToAbsent || fixturn2 != null) {
      map['fixturn2'] = Variable<String>(fixturn2);
    }
    if (!nullToAbsent || topleftlat != null) {
      map['topleftlat'] = Variable<String>(topleftlat);
    }
    if (!nullToAbsent || topleftlon != null) {
      map['topleftlon'] = Variable<String>(topleftlon);
    }
    if (!nullToAbsent || bottomrightlat != null) {
      map['bottomrightlat'] = Variable<String>(bottomrightlat);
    }
    if (!nullToAbsent || bottomrightlon != null) {
      map['bottomrightlon'] = Variable<String>(bottomrightlon);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_atsroute.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_atsroute(
      id: serializer.fromJson<int>(json['id']),
      icao: serializer.fromJson<String>(json['icao']),
      atsident: serializer.fromJson<String>(json['atsident']),
      direction: serializer.fromJson<String>(json['direction']),
      level: serializer.fromJson<String>(json['level']),
      sequence: serializer.fromJson<int>(json['sequence']),
      wpt1_latitude: serializer.fromJson<double>(json['wpt1_latitude']),
      wpt1_longitude: serializer.fromJson<double>(json['wpt1_longitude']),
      wpt1_ident: serializer.fromJson<String>(json['wpt1_ident']),
      wpt2_latitude: serializer.fromJson<double>(json['wpt2_latitude']),
      wpt2_longitude: serializer.fromJson<double>(json['wpt2_longitude']),
      wpt2_ident: serializer.fromJson<String>(json['wpt2_ident']),
      upperlimitstring: serializer.fromJson<String>(json['upperlimitstring']),
      lowerlimitstring: serializer.fromJson<String>(json['lowerlimitstring']),
      wpt1_country: serializer.fromJson<String>(json['wpt1_country']),
      wpt2_country: serializer.fromJson<String>(json['wpt2_country']),
      type: serializer.fromJson<String>(json['type']),
      bidirect: serializer.fromJson<String>(json['bidirect']),
      freqclass: serializer.fromJson<String>(json['freqclass']),
      status: serializer.fromJson<String>(json['status']),
      wpt1icao: serializer.fromJson<String>(json['wpt1icao']),
      wpt1navtype: serializer.fromJson<String>(json['wpt1navtype']),
      wpt1desc1: serializer.fromJson<String>(json['wpt1desc1']),
      wpt1desc2: serializer.fromJson<String>(json['wpt1desc2']),
      wpt1desc3: serializer.fromJson<String>(json['wpt1desc3']),
      wpt1desc4: serializer.fromJson<String>(json['wpt1desc4']),
      wpt1wgslat: serializer.fromJson<String>(json['wpt1wgslat']),
      wpt1wgslong: serializer.fromJson<String>(json['wpt1wgslong']),
      navtype: serializer.fromJson<String>(json['navtype']),
      rnp: serializer.fromJson<String>(json['rnp']),
      wpt2desc1: serializer.fromJson<String>(json['wpt2desc1']),
      wpt2desc2: serializer.fromJson<String>(json['wpt2desc2']),
      wpt2desc3: serializer.fromJson<String>(json['wpt2desc3']),
      wpt2desc4: serializer.fromJson<String>(json['wpt2desc4']),
      wpt2icao: serializer.fromJson<String>(json['wpt2icao']),
      wpt2wgslat: serializer.fromJson<String>(json['wpt2wgslat']),
      wpt2wgslong: serializer.fromJson<String>(json['wpt2wgslong']),
      distance: serializer.fromJson<String>(json['distance']),
      inbdcrs: serializer.fromJson<String>(json['inbdcrs']),
      minalt: serializer.fromJson<String>(json['minalt']),
      outbdcrs: serializer.fromJson<String>(json['outbdcrs']),
      maa: serializer.fromJson<String>(json['maa']),
      cruiselevel: serializer.fromJson<String>(json['cruiselevel']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      rvsm: serializer.fromJson<String>(json['rvsm']),
      fixturn1: serializer.fromJson<String>(json['fixturn1']),
      fixturn2: serializer.fromJson<String>(json['fixturn2']),
      topleftlat: serializer.fromJson<String>(json['topleftlat']),
      topleftlon: serializer.fromJson<String>(json['topleftlon']),
      bottomrightlat: serializer.fromJson<String>(json['bottomrightlat']),
      bottomrightlon: serializer.fromJson<String>(json['bottomrightlon']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'icao': serializer.toJson<String>(icao),
      'atsident': serializer.toJson<String>(atsident),
      'direction': serializer.toJson<String>(direction),
      'level': serializer.toJson<String>(level),
      'sequence': serializer.toJson<int>(sequence),
      'wpt1_latitude': serializer.toJson<double>(wpt1_latitude),
      'wpt1_longitude': serializer.toJson<double>(wpt1_longitude),
      'wpt1_ident': serializer.toJson<String>(wpt1_ident),
      'wpt2_latitude': serializer.toJson<double>(wpt2_latitude),
      'wpt2_longitude': serializer.toJson<double>(wpt2_longitude),
      'wpt2_ident': serializer.toJson<String>(wpt2_ident),
      'upperlimitstring': serializer.toJson<String>(upperlimitstring),
      'lowerlimitstring': serializer.toJson<String>(lowerlimitstring),
      'wpt1_country': serializer.toJson<String>(wpt1_country),
      'wpt2_country': serializer.toJson<String>(wpt2_country),
      'type': serializer.toJson<String>(type),
      'bidirect': serializer.toJson<String>(bidirect),
      'freqclass': serializer.toJson<String>(freqclass),
      'status': serializer.toJson<String>(status),
      'wpt1icao': serializer.toJson<String>(wpt1icao),
      'wpt1navtype': serializer.toJson<String>(wpt1navtype),
      'wpt1desc1': serializer.toJson<String>(wpt1desc1),
      'wpt1desc2': serializer.toJson<String>(wpt1desc2),
      'wpt1desc3': serializer.toJson<String>(wpt1desc3),
      'wpt1desc4': serializer.toJson<String>(wpt1desc4),
      'wpt1wgslat': serializer.toJson<String>(wpt1wgslat),
      'wpt1wgslong': serializer.toJson<String>(wpt1wgslong),
      'navtype': serializer.toJson<String>(navtype),
      'rnp': serializer.toJson<String>(rnp),
      'wpt2desc1': serializer.toJson<String>(wpt2desc1),
      'wpt2desc2': serializer.toJson<String>(wpt2desc2),
      'wpt2desc3': serializer.toJson<String>(wpt2desc3),
      'wpt2desc4': serializer.toJson<String>(wpt2desc4),
      'wpt2icao': serializer.toJson<String>(wpt2icao),
      'wpt2wgslat': serializer.toJson<String>(wpt2wgslat),
      'wpt2wgslong': serializer.toJson<String>(wpt2wgslong),
      'distance': serializer.toJson<String>(distance),
      'inbdcrs': serializer.toJson<String>(inbdcrs),
      'minalt': serializer.toJson<String>(minalt),
      'outbdcrs': serializer.toJson<String>(outbdcrs),
      'maa': serializer.toJson<String>(maa),
      'cruiselevel': serializer.toJson<String>(cruiselevel),
      'cycledate': serializer.toJson<String>(cycledate),
      'rvsm': serializer.toJson<String>(rvsm),
      'fixturn1': serializer.toJson<String>(fixturn1),
      'fixturn2': serializer.toJson<String>(fixturn2),
      'topleftlat': serializer.toJson<String>(topleftlat),
      'topleftlon': serializer.toJson<String>(topleftlon),
      'bottomrightlat': serializer.toJson<String>(bottomrightlat),
      'bottomrightlon': serializer.toJson<String>(bottomrightlon),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_atsroute copyWith(
          {int id,
          String icao,
          String atsident,
          String direction,
          String level,
          int sequence,
          double wpt1_latitude,
          double wpt1_longitude,
          String wpt1_ident,
          double wpt2_latitude,
          double wpt2_longitude,
          String wpt2_ident,
          String upperlimitstring,
          String lowerlimitstring,
          String wpt1_country,
          String wpt2_country,
          String type,
          String bidirect,
          String freqclass,
          String status,
          String wpt1icao,
          String wpt1navtype,
          String wpt1desc1,
          String wpt1desc2,
          String wpt1desc3,
          String wpt1desc4,
          String wpt1wgslat,
          String wpt1wgslong,
          String navtype,
          String rnp,
          String wpt2desc1,
          String wpt2desc2,
          String wpt2desc3,
          String wpt2desc4,
          String wpt2icao,
          String wpt2wgslat,
          String wpt2wgslong,
          String distance,
          String inbdcrs,
          String minalt,
          String outbdcrs,
          String maa,
          String cruiselevel,
          String cycledate,
          String rvsm,
          String fixturn1,
          String fixturn2,
          String topleftlat,
          String topleftlon,
          String bottomrightlat,
          String bottomrightlon,
          int crc32}) =>
      dafif_atsroute(
        id: id ?? this.id,
        icao: icao ?? this.icao,
        atsident: atsident ?? this.atsident,
        direction: direction ?? this.direction,
        level: level ?? this.level,
        sequence: sequence ?? this.sequence,
        wpt1_latitude: wpt1_latitude ?? this.wpt1_latitude,
        wpt1_longitude: wpt1_longitude ?? this.wpt1_longitude,
        wpt1_ident: wpt1_ident ?? this.wpt1_ident,
        wpt2_latitude: wpt2_latitude ?? this.wpt2_latitude,
        wpt2_longitude: wpt2_longitude ?? this.wpt2_longitude,
        wpt2_ident: wpt2_ident ?? this.wpt2_ident,
        upperlimitstring: upperlimitstring ?? this.upperlimitstring,
        lowerlimitstring: lowerlimitstring ?? this.lowerlimitstring,
        wpt1_country: wpt1_country ?? this.wpt1_country,
        wpt2_country: wpt2_country ?? this.wpt2_country,
        type: type ?? this.type,
        bidirect: bidirect ?? this.bidirect,
        freqclass: freqclass ?? this.freqclass,
        status: status ?? this.status,
        wpt1icao: wpt1icao ?? this.wpt1icao,
        wpt1navtype: wpt1navtype ?? this.wpt1navtype,
        wpt1desc1: wpt1desc1 ?? this.wpt1desc1,
        wpt1desc2: wpt1desc2 ?? this.wpt1desc2,
        wpt1desc3: wpt1desc3 ?? this.wpt1desc3,
        wpt1desc4: wpt1desc4 ?? this.wpt1desc4,
        wpt1wgslat: wpt1wgslat ?? this.wpt1wgslat,
        wpt1wgslong: wpt1wgslong ?? this.wpt1wgslong,
        navtype: navtype ?? this.navtype,
        rnp: rnp ?? this.rnp,
        wpt2desc1: wpt2desc1 ?? this.wpt2desc1,
        wpt2desc2: wpt2desc2 ?? this.wpt2desc2,
        wpt2desc3: wpt2desc3 ?? this.wpt2desc3,
        wpt2desc4: wpt2desc4 ?? this.wpt2desc4,
        wpt2icao: wpt2icao ?? this.wpt2icao,
        wpt2wgslat: wpt2wgslat ?? this.wpt2wgslat,
        wpt2wgslong: wpt2wgslong ?? this.wpt2wgslong,
        distance: distance ?? this.distance,
        inbdcrs: inbdcrs ?? this.inbdcrs,
        minalt: minalt ?? this.minalt,
        outbdcrs: outbdcrs ?? this.outbdcrs,
        maa: maa ?? this.maa,
        cruiselevel: cruiselevel ?? this.cruiselevel,
        cycledate: cycledate ?? this.cycledate,
        rvsm: rvsm ?? this.rvsm,
        fixturn1: fixturn1 ?? this.fixturn1,
        fixturn2: fixturn2 ?? this.fixturn2,
        topleftlat: topleftlat ?? this.topleftlat,
        topleftlon: topleftlon ?? this.topleftlon,
        bottomrightlat: bottomrightlat ?? this.bottomrightlat,
        bottomrightlon: bottomrightlon ?? this.bottomrightlon,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_atsroute(')
          ..write('id: $id, ')
          ..write('icao: $icao, ')
          ..write('atsident: $atsident, ')
          ..write('direction: $direction, ')
          ..write('level: $level, ')
          ..write('sequence: $sequence, ')
          ..write('wpt1_latitude: $wpt1_latitude, ')
          ..write('wpt1_longitude: $wpt1_longitude, ')
          ..write('wpt1_ident: $wpt1_ident, ')
          ..write('wpt2_latitude: $wpt2_latitude, ')
          ..write('wpt2_longitude: $wpt2_longitude, ')
          ..write('wpt2_ident: $wpt2_ident, ')
          ..write('upperlimitstring: $upperlimitstring, ')
          ..write('lowerlimitstring: $lowerlimitstring, ')
          ..write('wpt1_country: $wpt1_country, ')
          ..write('wpt2_country: $wpt2_country, ')
          ..write('type: $type, ')
          ..write('bidirect: $bidirect, ')
          ..write('freqclass: $freqclass, ')
          ..write('status: $status, ')
          ..write('wpt1icao: $wpt1icao, ')
          ..write('wpt1navtype: $wpt1navtype, ')
          ..write('wpt1desc1: $wpt1desc1, ')
          ..write('wpt1desc2: $wpt1desc2, ')
          ..write('wpt1desc3: $wpt1desc3, ')
          ..write('wpt1desc4: $wpt1desc4, ')
          ..write('wpt1wgslat: $wpt1wgslat, ')
          ..write('wpt1wgslong: $wpt1wgslong, ')
          ..write('navtype: $navtype, ')
          ..write('rnp: $rnp, ')
          ..write('wpt2desc1: $wpt2desc1, ')
          ..write('wpt2desc2: $wpt2desc2, ')
          ..write('wpt2desc3: $wpt2desc3, ')
          ..write('wpt2desc4: $wpt2desc4, ')
          ..write('wpt2icao: $wpt2icao, ')
          ..write('wpt2wgslat: $wpt2wgslat, ')
          ..write('wpt2wgslong: $wpt2wgslong, ')
          ..write('distance: $distance, ')
          ..write('inbdcrs: $inbdcrs, ')
          ..write('minalt: $minalt, ')
          ..write('outbdcrs: $outbdcrs, ')
          ..write('maa: $maa, ')
          ..write('cruiselevel: $cruiselevel, ')
          ..write('cycledate: $cycledate, ')
          ..write('rvsm: $rvsm, ')
          ..write('fixturn1: $fixturn1, ')
          ..write('fixturn2: $fixturn2, ')
          ..write('topleftlat: $topleftlat, ')
          ..write('topleftlon: $topleftlon, ')
          ..write('bottomrightlat: $bottomrightlat, ')
          ..write('bottomrightlon: $bottomrightlon, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          icao.hashCode,
          $mrjc(
              atsident.hashCode,
              $mrjc(
                  direction.hashCode,
                  $mrjc(
                      level.hashCode,
                      $mrjc(
                          sequence.hashCode,
                          $mrjc(
                              wpt1_latitude.hashCode,
                              $mrjc(
                                  wpt1_longitude.hashCode,
                                  $mrjc(
                                      wpt1_ident.hashCode,
                                      $mrjc(
                                          wpt2_latitude.hashCode,
                                          $mrjc(
                                              wpt2_longitude.hashCode,
                                              $mrjc(
                                                  wpt2_ident.hashCode,
                                                  $mrjc(
                                                      upperlimitstring.hashCode,
                                                      $mrjc(
                                                          lowerlimitstring
                                                              .hashCode,
                                                          $mrjc(
                                                              wpt1_country
                                                                  .hashCode,
                                                              $mrjc(
                                                                  wpt2_country
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      type
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          bidirect
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              freqclass.hashCode,
                                                                              $mrjc(status.hashCode, $mrjc(wpt1icao.hashCode, $mrjc(wpt1navtype.hashCode, $mrjc(wpt1desc1.hashCode, $mrjc(wpt1desc2.hashCode, $mrjc(wpt1desc3.hashCode, $mrjc(wpt1desc4.hashCode, $mrjc(wpt1wgslat.hashCode, $mrjc(wpt1wgslong.hashCode, $mrjc(navtype.hashCode, $mrjc(rnp.hashCode, $mrjc(wpt2desc1.hashCode, $mrjc(wpt2desc2.hashCode, $mrjc(wpt2desc3.hashCode, $mrjc(wpt2desc4.hashCode, $mrjc(wpt2icao.hashCode, $mrjc(wpt2wgslat.hashCode, $mrjc(wpt2wgslong.hashCode, $mrjc(distance.hashCode, $mrjc(inbdcrs.hashCode, $mrjc(minalt.hashCode, $mrjc(outbdcrs.hashCode, $mrjc(maa.hashCode, $mrjc(cruiselevel.hashCode, $mrjc(cycledate.hashCode, $mrjc(rvsm.hashCode, $mrjc(fixturn1.hashCode, $mrjc(fixturn2.hashCode, $mrjc(topleftlat.hashCode, $mrjc(topleftlon.hashCode, $mrjc(bottomrightlat.hashCode, $mrjc(bottomrightlon.hashCode, crc32.hashCode))))))))))))))))))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_atsroute &&
          other.id == this.id &&
          other.icao == this.icao &&
          other.atsident == this.atsident &&
          other.direction == this.direction &&
          other.level == this.level &&
          other.sequence == this.sequence &&
          other.wpt1_latitude == this.wpt1_latitude &&
          other.wpt1_longitude == this.wpt1_longitude &&
          other.wpt1_ident == this.wpt1_ident &&
          other.wpt2_latitude == this.wpt2_latitude &&
          other.wpt2_longitude == this.wpt2_longitude &&
          other.wpt2_ident == this.wpt2_ident &&
          other.upperlimitstring == this.upperlimitstring &&
          other.lowerlimitstring == this.lowerlimitstring &&
          other.wpt1_country == this.wpt1_country &&
          other.wpt2_country == this.wpt2_country &&
          other.type == this.type &&
          other.bidirect == this.bidirect &&
          other.freqclass == this.freqclass &&
          other.status == this.status &&
          other.wpt1icao == this.wpt1icao &&
          other.wpt1navtype == this.wpt1navtype &&
          other.wpt1desc1 == this.wpt1desc1 &&
          other.wpt1desc2 == this.wpt1desc2 &&
          other.wpt1desc3 == this.wpt1desc3 &&
          other.wpt1desc4 == this.wpt1desc4 &&
          other.wpt1wgslat == this.wpt1wgslat &&
          other.wpt1wgslong == this.wpt1wgslong &&
          other.navtype == this.navtype &&
          other.rnp == this.rnp &&
          other.wpt2desc1 == this.wpt2desc1 &&
          other.wpt2desc2 == this.wpt2desc2 &&
          other.wpt2desc3 == this.wpt2desc3 &&
          other.wpt2desc4 == this.wpt2desc4 &&
          other.wpt2icao == this.wpt2icao &&
          other.wpt2wgslat == this.wpt2wgslat &&
          other.wpt2wgslong == this.wpt2wgslong &&
          other.distance == this.distance &&
          other.inbdcrs == this.inbdcrs &&
          other.minalt == this.minalt &&
          other.outbdcrs == this.outbdcrs &&
          other.maa == this.maa &&
          other.cruiselevel == this.cruiselevel &&
          other.cycledate == this.cycledate &&
          other.rvsm == this.rvsm &&
          other.fixturn1 == this.fixturn1 &&
          other.fixturn2 == this.fixturn2 &&
          other.topleftlat == this.topleftlat &&
          other.topleftlon == this.topleftlon &&
          other.bottomrightlat == this.bottomrightlat &&
          other.bottomrightlon == this.bottomrightlon &&
          other.crc32 == this.crc32);
}

class DafifAtsrouteCompanion extends UpdateCompanion<dafif_atsroute> {
  final Value<int> id;
  final Value<String> icao;
  final Value<String> atsident;
  final Value<String> direction;
  final Value<String> level;
  final Value<int> sequence;
  final Value<double> wpt1_latitude;
  final Value<double> wpt1_longitude;
  final Value<String> wpt1_ident;
  final Value<double> wpt2_latitude;
  final Value<double> wpt2_longitude;
  final Value<String> wpt2_ident;
  final Value<String> upperlimitstring;
  final Value<String> lowerlimitstring;
  final Value<String> wpt1_country;
  final Value<String> wpt2_country;
  final Value<String> type;
  final Value<String> bidirect;
  final Value<String> freqclass;
  final Value<String> status;
  final Value<String> wpt1icao;
  final Value<String> wpt1navtype;
  final Value<String> wpt1desc1;
  final Value<String> wpt1desc2;
  final Value<String> wpt1desc3;
  final Value<String> wpt1desc4;
  final Value<String> wpt1wgslat;
  final Value<String> wpt1wgslong;
  final Value<String> navtype;
  final Value<String> rnp;
  final Value<String> wpt2desc1;
  final Value<String> wpt2desc2;
  final Value<String> wpt2desc3;
  final Value<String> wpt2desc4;
  final Value<String> wpt2icao;
  final Value<String> wpt2wgslat;
  final Value<String> wpt2wgslong;
  final Value<String> distance;
  final Value<String> inbdcrs;
  final Value<String> minalt;
  final Value<String> outbdcrs;
  final Value<String> maa;
  final Value<String> cruiselevel;
  final Value<String> cycledate;
  final Value<String> rvsm;
  final Value<String> fixturn1;
  final Value<String> fixturn2;
  final Value<String> topleftlat;
  final Value<String> topleftlon;
  final Value<String> bottomrightlat;
  final Value<String> bottomrightlon;
  final Value<int> crc32;
  const DafifAtsrouteCompanion({
    this.id = const Value.absent(),
    this.icao = const Value.absent(),
    this.atsident = const Value.absent(),
    this.direction = const Value.absent(),
    this.level = const Value.absent(),
    this.sequence = const Value.absent(),
    this.wpt1_latitude = const Value.absent(),
    this.wpt1_longitude = const Value.absent(),
    this.wpt1_ident = const Value.absent(),
    this.wpt2_latitude = const Value.absent(),
    this.wpt2_longitude = const Value.absent(),
    this.wpt2_ident = const Value.absent(),
    this.upperlimitstring = const Value.absent(),
    this.lowerlimitstring = const Value.absent(),
    this.wpt1_country = const Value.absent(),
    this.wpt2_country = const Value.absent(),
    this.type = const Value.absent(),
    this.bidirect = const Value.absent(),
    this.freqclass = const Value.absent(),
    this.status = const Value.absent(),
    this.wpt1icao = const Value.absent(),
    this.wpt1navtype = const Value.absent(),
    this.wpt1desc1 = const Value.absent(),
    this.wpt1desc2 = const Value.absent(),
    this.wpt1desc3 = const Value.absent(),
    this.wpt1desc4 = const Value.absent(),
    this.wpt1wgslat = const Value.absent(),
    this.wpt1wgslong = const Value.absent(),
    this.navtype = const Value.absent(),
    this.rnp = const Value.absent(),
    this.wpt2desc1 = const Value.absent(),
    this.wpt2desc2 = const Value.absent(),
    this.wpt2desc3 = const Value.absent(),
    this.wpt2desc4 = const Value.absent(),
    this.wpt2icao = const Value.absent(),
    this.wpt2wgslat = const Value.absent(),
    this.wpt2wgslong = const Value.absent(),
    this.distance = const Value.absent(),
    this.inbdcrs = const Value.absent(),
    this.minalt = const Value.absent(),
    this.outbdcrs = const Value.absent(),
    this.maa = const Value.absent(),
    this.cruiselevel = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.rvsm = const Value.absent(),
    this.fixturn1 = const Value.absent(),
    this.fixturn2 = const Value.absent(),
    this.topleftlat = const Value.absent(),
    this.topleftlon = const Value.absent(),
    this.bottomrightlat = const Value.absent(),
    this.bottomrightlon = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifAtsrouteCompanion.insert({
    this.id = const Value.absent(),
    this.icao = const Value.absent(),
    this.atsident = const Value.absent(),
    this.direction = const Value.absent(),
    this.level = const Value.absent(),
    this.sequence = const Value.absent(),
    this.wpt1_latitude = const Value.absent(),
    this.wpt1_longitude = const Value.absent(),
    this.wpt1_ident = const Value.absent(),
    this.wpt2_latitude = const Value.absent(),
    this.wpt2_longitude = const Value.absent(),
    this.wpt2_ident = const Value.absent(),
    this.upperlimitstring = const Value.absent(),
    this.lowerlimitstring = const Value.absent(),
    this.wpt1_country = const Value.absent(),
    this.wpt2_country = const Value.absent(),
    this.type = const Value.absent(),
    this.bidirect = const Value.absent(),
    this.freqclass = const Value.absent(),
    this.status = const Value.absent(),
    this.wpt1icao = const Value.absent(),
    this.wpt1navtype = const Value.absent(),
    this.wpt1desc1 = const Value.absent(),
    this.wpt1desc2 = const Value.absent(),
    this.wpt1desc3 = const Value.absent(),
    this.wpt1desc4 = const Value.absent(),
    this.wpt1wgslat = const Value.absent(),
    this.wpt1wgslong = const Value.absent(),
    this.navtype = const Value.absent(),
    this.rnp = const Value.absent(),
    this.wpt2desc1 = const Value.absent(),
    this.wpt2desc2 = const Value.absent(),
    this.wpt2desc3 = const Value.absent(),
    this.wpt2desc4 = const Value.absent(),
    this.wpt2icao = const Value.absent(),
    this.wpt2wgslat = const Value.absent(),
    this.wpt2wgslong = const Value.absent(),
    this.distance = const Value.absent(),
    this.inbdcrs = const Value.absent(),
    this.minalt = const Value.absent(),
    this.outbdcrs = const Value.absent(),
    this.maa = const Value.absent(),
    this.cruiselevel = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.rvsm = const Value.absent(),
    this.fixturn1 = const Value.absent(),
    this.fixturn2 = const Value.absent(),
    this.topleftlat = const Value.absent(),
    this.topleftlon = const Value.absent(),
    this.bottomrightlat = const Value.absent(),
    this.bottomrightlon = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_atsroute> custom({
    Expression<int> id,
    Expression<String> icao,
    Expression<String> atsident,
    Expression<String> direction,
    Expression<String> level,
    Expression<int> sequence,
    Expression<double> wpt1_latitude,
    Expression<double> wpt1_longitude,
    Expression<String> wpt1_ident,
    Expression<double> wpt2_latitude,
    Expression<double> wpt2_longitude,
    Expression<String> wpt2_ident,
    Expression<String> upperlimitstring,
    Expression<String> lowerlimitstring,
    Expression<String> wpt1_country,
    Expression<String> wpt2_country,
    Expression<String> type,
    Expression<String> bidirect,
    Expression<String> freqclass,
    Expression<String> status,
    Expression<String> wpt1icao,
    Expression<String> wpt1navtype,
    Expression<String> wpt1desc1,
    Expression<String> wpt1desc2,
    Expression<String> wpt1desc3,
    Expression<String> wpt1desc4,
    Expression<String> wpt1wgslat,
    Expression<String> wpt1wgslong,
    Expression<String> navtype,
    Expression<String> rnp,
    Expression<String> wpt2desc1,
    Expression<String> wpt2desc2,
    Expression<String> wpt2desc3,
    Expression<String> wpt2desc4,
    Expression<String> wpt2icao,
    Expression<String> wpt2wgslat,
    Expression<String> wpt2wgslong,
    Expression<String> distance,
    Expression<String> inbdcrs,
    Expression<String> minalt,
    Expression<String> outbdcrs,
    Expression<String> maa,
    Expression<String> cruiselevel,
    Expression<String> cycledate,
    Expression<String> rvsm,
    Expression<String> fixturn1,
    Expression<String> fixturn2,
    Expression<String> topleftlat,
    Expression<String> topleftlon,
    Expression<String> bottomrightlat,
    Expression<String> bottomrightlon,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (icao != null) 'icao': icao,
      if (atsident != null) 'atsident': atsident,
      if (direction != null) 'direction': direction,
      if (level != null) 'level': level,
      if (sequence != null) 'sequence': sequence,
      if (wpt1_latitude != null) 'wpt1_latitude': wpt1_latitude,
      if (wpt1_longitude != null) 'wpt1_longitude': wpt1_longitude,
      if (wpt1_ident != null) 'wpt1_ident': wpt1_ident,
      if (wpt2_latitude != null) 'wpt2_latitude': wpt2_latitude,
      if (wpt2_longitude != null) 'wpt2_longitude': wpt2_longitude,
      if (wpt2_ident != null) 'wpt2_ident': wpt2_ident,
      if (upperlimitstring != null) 'upperlimitstring': upperlimitstring,
      if (lowerlimitstring != null) 'lowerlimitstring': lowerlimitstring,
      if (wpt1_country != null) 'wpt1_country': wpt1_country,
      if (wpt2_country != null) 'wpt2_country': wpt2_country,
      if (type != null) 'type': type,
      if (bidirect != null) 'bidirect': bidirect,
      if (freqclass != null) 'freqclass': freqclass,
      if (status != null) 'status': status,
      if (wpt1icao != null) 'wpt1icao': wpt1icao,
      if (wpt1navtype != null) 'wpt1navtype': wpt1navtype,
      if (wpt1desc1 != null) 'wpt1desc1': wpt1desc1,
      if (wpt1desc2 != null) 'wpt1desc2': wpt1desc2,
      if (wpt1desc3 != null) 'wpt1desc3': wpt1desc3,
      if (wpt1desc4 != null) 'wpt1desc4': wpt1desc4,
      if (wpt1wgslat != null) 'wpt1wgslat': wpt1wgslat,
      if (wpt1wgslong != null) 'wpt1wgslong': wpt1wgslong,
      if (navtype != null) 'navtype': navtype,
      if (rnp != null) 'rnp': rnp,
      if (wpt2desc1 != null) 'wpt2desc1': wpt2desc1,
      if (wpt2desc2 != null) 'wpt2desc2': wpt2desc2,
      if (wpt2desc3 != null) 'wpt2desc3': wpt2desc3,
      if (wpt2desc4 != null) 'wpt2desc4': wpt2desc4,
      if (wpt2icao != null) 'wpt2icao': wpt2icao,
      if (wpt2wgslat != null) 'wpt2wgslat': wpt2wgslat,
      if (wpt2wgslong != null) 'wpt2wgslong': wpt2wgslong,
      if (distance != null) 'distance': distance,
      if (inbdcrs != null) 'inbdcrs': inbdcrs,
      if (minalt != null) 'minalt': minalt,
      if (outbdcrs != null) 'outbdcrs': outbdcrs,
      if (maa != null) 'maa': maa,
      if (cruiselevel != null) 'cruiselevel': cruiselevel,
      if (cycledate != null) 'cycledate': cycledate,
      if (rvsm != null) 'rvsm': rvsm,
      if (fixturn1 != null) 'fixturn1': fixturn1,
      if (fixturn2 != null) 'fixturn2': fixturn2,
      if (topleftlat != null) 'topleftlat': topleftlat,
      if (topleftlon != null) 'topleftlon': topleftlon,
      if (bottomrightlat != null) 'bottomrightlat': bottomrightlat,
      if (bottomrightlon != null) 'bottomrightlon': bottomrightlon,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifAtsrouteCompanion copyWith(
      {Value<int> id,
      Value<String> icao,
      Value<String> atsident,
      Value<String> direction,
      Value<String> level,
      Value<int> sequence,
      Value<double> wpt1_latitude,
      Value<double> wpt1_longitude,
      Value<String> wpt1_ident,
      Value<double> wpt2_latitude,
      Value<double> wpt2_longitude,
      Value<String> wpt2_ident,
      Value<String> upperlimitstring,
      Value<String> lowerlimitstring,
      Value<String> wpt1_country,
      Value<String> wpt2_country,
      Value<String> type,
      Value<String> bidirect,
      Value<String> freqclass,
      Value<String> status,
      Value<String> wpt1icao,
      Value<String> wpt1navtype,
      Value<String> wpt1desc1,
      Value<String> wpt1desc2,
      Value<String> wpt1desc3,
      Value<String> wpt1desc4,
      Value<String> wpt1wgslat,
      Value<String> wpt1wgslong,
      Value<String> navtype,
      Value<String> rnp,
      Value<String> wpt2desc1,
      Value<String> wpt2desc2,
      Value<String> wpt2desc3,
      Value<String> wpt2desc4,
      Value<String> wpt2icao,
      Value<String> wpt2wgslat,
      Value<String> wpt2wgslong,
      Value<String> distance,
      Value<String> inbdcrs,
      Value<String> minalt,
      Value<String> outbdcrs,
      Value<String> maa,
      Value<String> cruiselevel,
      Value<String> cycledate,
      Value<String> rvsm,
      Value<String> fixturn1,
      Value<String> fixturn2,
      Value<String> topleftlat,
      Value<String> topleftlon,
      Value<String> bottomrightlat,
      Value<String> bottomrightlon,
      Value<int> crc32}) {
    return DafifAtsrouteCompanion(
      id: id ?? this.id,
      icao: icao ?? this.icao,
      atsident: atsident ?? this.atsident,
      direction: direction ?? this.direction,
      level: level ?? this.level,
      sequence: sequence ?? this.sequence,
      wpt1_latitude: wpt1_latitude ?? this.wpt1_latitude,
      wpt1_longitude: wpt1_longitude ?? this.wpt1_longitude,
      wpt1_ident: wpt1_ident ?? this.wpt1_ident,
      wpt2_latitude: wpt2_latitude ?? this.wpt2_latitude,
      wpt2_longitude: wpt2_longitude ?? this.wpt2_longitude,
      wpt2_ident: wpt2_ident ?? this.wpt2_ident,
      upperlimitstring: upperlimitstring ?? this.upperlimitstring,
      lowerlimitstring: lowerlimitstring ?? this.lowerlimitstring,
      wpt1_country: wpt1_country ?? this.wpt1_country,
      wpt2_country: wpt2_country ?? this.wpt2_country,
      type: type ?? this.type,
      bidirect: bidirect ?? this.bidirect,
      freqclass: freqclass ?? this.freqclass,
      status: status ?? this.status,
      wpt1icao: wpt1icao ?? this.wpt1icao,
      wpt1navtype: wpt1navtype ?? this.wpt1navtype,
      wpt1desc1: wpt1desc1 ?? this.wpt1desc1,
      wpt1desc2: wpt1desc2 ?? this.wpt1desc2,
      wpt1desc3: wpt1desc3 ?? this.wpt1desc3,
      wpt1desc4: wpt1desc4 ?? this.wpt1desc4,
      wpt1wgslat: wpt1wgslat ?? this.wpt1wgslat,
      wpt1wgslong: wpt1wgslong ?? this.wpt1wgslong,
      navtype: navtype ?? this.navtype,
      rnp: rnp ?? this.rnp,
      wpt2desc1: wpt2desc1 ?? this.wpt2desc1,
      wpt2desc2: wpt2desc2 ?? this.wpt2desc2,
      wpt2desc3: wpt2desc3 ?? this.wpt2desc3,
      wpt2desc4: wpt2desc4 ?? this.wpt2desc4,
      wpt2icao: wpt2icao ?? this.wpt2icao,
      wpt2wgslat: wpt2wgslat ?? this.wpt2wgslat,
      wpt2wgslong: wpt2wgslong ?? this.wpt2wgslong,
      distance: distance ?? this.distance,
      inbdcrs: inbdcrs ?? this.inbdcrs,
      minalt: minalt ?? this.minalt,
      outbdcrs: outbdcrs ?? this.outbdcrs,
      maa: maa ?? this.maa,
      cruiselevel: cruiselevel ?? this.cruiselevel,
      cycledate: cycledate ?? this.cycledate,
      rvsm: rvsm ?? this.rvsm,
      fixturn1: fixturn1 ?? this.fixturn1,
      fixturn2: fixturn2 ?? this.fixturn2,
      topleftlat: topleftlat ?? this.topleftlat,
      topleftlon: topleftlon ?? this.topleftlon,
      bottomrightlat: bottomrightlat ?? this.bottomrightlat,
      bottomrightlon: bottomrightlon ?? this.bottomrightlon,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (atsident.present) {
      map['atsident'] = Variable<String>(atsident.value);
    }
    if (direction.present) {
      map['direction'] = Variable<String>(direction.value);
    }
    if (level.present) {
      map['level'] = Variable<String>(level.value);
    }
    if (sequence.present) {
      map['sequence'] = Variable<int>(sequence.value);
    }
    if (wpt1_latitude.present) {
      map['wpt1_latitude'] = Variable<double>(wpt1_latitude.value);
    }
    if (wpt1_longitude.present) {
      map['wpt1_longitude'] = Variable<double>(wpt1_longitude.value);
    }
    if (wpt1_ident.present) {
      map['wpt1_ident'] = Variable<String>(wpt1_ident.value);
    }
    if (wpt2_latitude.present) {
      map['wpt2_latitude'] = Variable<double>(wpt2_latitude.value);
    }
    if (wpt2_longitude.present) {
      map['wpt2_longitude'] = Variable<double>(wpt2_longitude.value);
    }
    if (wpt2_ident.present) {
      map['wpt2_ident'] = Variable<String>(wpt2_ident.value);
    }
    if (upperlimitstring.present) {
      map['upperlimitstring'] = Variable<String>(upperlimitstring.value);
    }
    if (lowerlimitstring.present) {
      map['lowerlimitstring'] = Variable<String>(lowerlimitstring.value);
    }
    if (wpt1_country.present) {
      map['wpt1_country'] = Variable<String>(wpt1_country.value);
    }
    if (wpt2_country.present) {
      map['wpt2_country'] = Variable<String>(wpt2_country.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (bidirect.present) {
      map['bidirect'] = Variable<String>(bidirect.value);
    }
    if (freqclass.present) {
      map['freqclass'] = Variable<String>(freqclass.value);
    }
    if (status.present) {
      map['status'] = Variable<String>(status.value);
    }
    if (wpt1icao.present) {
      map['wpt1icao'] = Variable<String>(wpt1icao.value);
    }
    if (wpt1navtype.present) {
      map['wpt1navtype'] = Variable<String>(wpt1navtype.value);
    }
    if (wpt1desc1.present) {
      map['wpt1desc1'] = Variable<String>(wpt1desc1.value);
    }
    if (wpt1desc2.present) {
      map['wpt1desc2'] = Variable<String>(wpt1desc2.value);
    }
    if (wpt1desc3.present) {
      map['wpt1desc3'] = Variable<String>(wpt1desc3.value);
    }
    if (wpt1desc4.present) {
      map['wpt1desc4'] = Variable<String>(wpt1desc4.value);
    }
    if (wpt1wgslat.present) {
      map['wpt1wgslat'] = Variable<String>(wpt1wgslat.value);
    }
    if (wpt1wgslong.present) {
      map['wpt1wgslong'] = Variable<String>(wpt1wgslong.value);
    }
    if (navtype.present) {
      map['navtype'] = Variable<String>(navtype.value);
    }
    if (rnp.present) {
      map['rnp'] = Variable<String>(rnp.value);
    }
    if (wpt2desc1.present) {
      map['wpt2desc1'] = Variable<String>(wpt2desc1.value);
    }
    if (wpt2desc2.present) {
      map['wpt2desc2'] = Variable<String>(wpt2desc2.value);
    }
    if (wpt2desc3.present) {
      map['wpt2desc3'] = Variable<String>(wpt2desc3.value);
    }
    if (wpt2desc4.present) {
      map['wpt2desc4'] = Variable<String>(wpt2desc4.value);
    }
    if (wpt2icao.present) {
      map['wpt2icao'] = Variable<String>(wpt2icao.value);
    }
    if (wpt2wgslat.present) {
      map['wpt2wgslat'] = Variable<String>(wpt2wgslat.value);
    }
    if (wpt2wgslong.present) {
      map['wpt2wgslong'] = Variable<String>(wpt2wgslong.value);
    }
    if (distance.present) {
      map['distance'] = Variable<String>(distance.value);
    }
    if (inbdcrs.present) {
      map['inbdcrs'] = Variable<String>(inbdcrs.value);
    }
    if (minalt.present) {
      map['minalt'] = Variable<String>(minalt.value);
    }
    if (outbdcrs.present) {
      map['outbdcrs'] = Variable<String>(outbdcrs.value);
    }
    if (maa.present) {
      map['maa'] = Variable<String>(maa.value);
    }
    if (cruiselevel.present) {
      map['cruiselevel'] = Variable<String>(cruiselevel.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (rvsm.present) {
      map['rvsm'] = Variable<String>(rvsm.value);
    }
    if (fixturn1.present) {
      map['fixturn1'] = Variable<String>(fixturn1.value);
    }
    if (fixturn2.present) {
      map['fixturn2'] = Variable<String>(fixturn2.value);
    }
    if (topleftlat.present) {
      map['topleftlat'] = Variable<String>(topleftlat.value);
    }
    if (topleftlon.present) {
      map['topleftlon'] = Variable<String>(topleftlon.value);
    }
    if (bottomrightlat.present) {
      map['bottomrightlat'] = Variable<String>(bottomrightlat.value);
    }
    if (bottomrightlon.present) {
      map['bottomrightlon'] = Variable<String>(bottomrightlon.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifAtsrouteTable extends DafifAtsroute
    with TableInfo<$DafifAtsrouteTable, dafif_atsroute> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifAtsrouteTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _atsidentMeta = const VerificationMeta('atsident');
  GeneratedTextColumn _atsident;
  @override
  GeneratedTextColumn get atsident => _atsident ??= _constructAtsident();
  GeneratedTextColumn _constructAtsident() {
    return GeneratedTextColumn(
      'atsident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _directionMeta = const VerificationMeta('direction');
  GeneratedTextColumn _direction;
  @override
  GeneratedTextColumn get direction => _direction ??= _constructDirection();
  GeneratedTextColumn _constructDirection() {
    return GeneratedTextColumn(
      'direction',
      $tableName,
      true,
    );
  }

  final VerificationMeta _levelMeta = const VerificationMeta('level');
  GeneratedTextColumn _level;
  @override
  GeneratedTextColumn get level => _level ??= _constructLevel();
  GeneratedTextColumn _constructLevel() {
    return GeneratedTextColumn(
      'level',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sequenceMeta = const VerificationMeta('sequence');
  GeneratedIntColumn _sequence;
  @override
  GeneratedIntColumn get sequence => _sequence ??= _constructSequence();
  GeneratedIntColumn _constructSequence() {
    return GeneratedIntColumn(
      'sequence',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1_latitudeMeta =
      const VerificationMeta('wpt1_latitude');
  GeneratedRealColumn _wpt1_latitude;
  @override
  GeneratedRealColumn get wpt1_latitude =>
      _wpt1_latitude ??= _constructWpt1Latitude();
  GeneratedRealColumn _constructWpt1Latitude() {
    return GeneratedRealColumn(
      'wpt1_latitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1_longitudeMeta =
      const VerificationMeta('wpt1_longitude');
  GeneratedRealColumn _wpt1_longitude;
  @override
  GeneratedRealColumn get wpt1_longitude =>
      _wpt1_longitude ??= _constructWpt1Longitude();
  GeneratedRealColumn _constructWpt1Longitude() {
    return GeneratedRealColumn(
      'wpt1_longitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1_identMeta = const VerificationMeta('wpt1_ident');
  GeneratedTextColumn _wpt1_ident;
  @override
  GeneratedTextColumn get wpt1_ident => _wpt1_ident ??= _constructWpt1Ident();
  GeneratedTextColumn _constructWpt1Ident() {
    return GeneratedTextColumn(
      'wpt1_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2_latitudeMeta =
      const VerificationMeta('wpt2_latitude');
  GeneratedRealColumn _wpt2_latitude;
  @override
  GeneratedRealColumn get wpt2_latitude =>
      _wpt2_latitude ??= _constructWpt2Latitude();
  GeneratedRealColumn _constructWpt2Latitude() {
    return GeneratedRealColumn(
      'wpt2_latitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2_longitudeMeta =
      const VerificationMeta('wpt2_longitude');
  GeneratedRealColumn _wpt2_longitude;
  @override
  GeneratedRealColumn get wpt2_longitude =>
      _wpt2_longitude ??= _constructWpt2Longitude();
  GeneratedRealColumn _constructWpt2Longitude() {
    return GeneratedRealColumn(
      'wpt2_longitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2_identMeta = const VerificationMeta('wpt2_ident');
  GeneratedTextColumn _wpt2_ident;
  @override
  GeneratedTextColumn get wpt2_ident => _wpt2_ident ??= _constructWpt2Ident();
  GeneratedTextColumn _constructWpt2Ident() {
    return GeneratedTextColumn(
      'wpt2_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _upperlimitstringMeta =
      const VerificationMeta('upperlimitstring');
  GeneratedTextColumn _upperlimitstring;
  @override
  GeneratedTextColumn get upperlimitstring =>
      _upperlimitstring ??= _constructUpperlimitstring();
  GeneratedTextColumn _constructUpperlimitstring() {
    return GeneratedTextColumn(
      'upperlimitstring',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowerlimitstringMeta =
      const VerificationMeta('lowerlimitstring');
  GeneratedTextColumn _lowerlimitstring;
  @override
  GeneratedTextColumn get lowerlimitstring =>
      _lowerlimitstring ??= _constructLowerlimitstring();
  GeneratedTextColumn _constructLowerlimitstring() {
    return GeneratedTextColumn(
      'lowerlimitstring',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1_countryMeta =
      const VerificationMeta('wpt1_country');
  GeneratedTextColumn _wpt1_country;
  @override
  GeneratedTextColumn get wpt1_country =>
      _wpt1_country ??= _constructWpt1Country();
  GeneratedTextColumn _constructWpt1Country() {
    return GeneratedTextColumn(
      'wpt1_country',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2_countryMeta =
      const VerificationMeta('wpt2_country');
  GeneratedTextColumn _wpt2_country;
  @override
  GeneratedTextColumn get wpt2_country =>
      _wpt2_country ??= _constructWpt2Country();
  GeneratedTextColumn _constructWpt2Country() {
    return GeneratedTextColumn(
      'wpt2_country',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bidirectMeta = const VerificationMeta('bidirect');
  GeneratedTextColumn _bidirect;
  @override
  GeneratedTextColumn get bidirect => _bidirect ??= _constructBidirect();
  GeneratedTextColumn _constructBidirect() {
    return GeneratedTextColumn(
      'bidirect',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqclassMeta = const VerificationMeta('freqclass');
  GeneratedTextColumn _freqclass;
  @override
  GeneratedTextColumn get freqclass => _freqclass ??= _constructFreqclass();
  GeneratedTextColumn _constructFreqclass() {
    return GeneratedTextColumn(
      'freqclass',
      $tableName,
      true,
    );
  }

  final VerificationMeta _statusMeta = const VerificationMeta('status');
  GeneratedTextColumn _status;
  @override
  GeneratedTextColumn get status => _status ??= _constructStatus();
  GeneratedTextColumn _constructStatus() {
    return GeneratedTextColumn(
      'status',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1icaoMeta = const VerificationMeta('wpt1icao');
  GeneratedTextColumn _wpt1icao;
  @override
  GeneratedTextColumn get wpt1icao => _wpt1icao ??= _constructWpt1icao();
  GeneratedTextColumn _constructWpt1icao() {
    return GeneratedTextColumn(
      'wpt1icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1navtypeMeta =
      const VerificationMeta('wpt1navtype');
  GeneratedTextColumn _wpt1navtype;
  @override
  GeneratedTextColumn get wpt1navtype =>
      _wpt1navtype ??= _constructWpt1navtype();
  GeneratedTextColumn _constructWpt1navtype() {
    return GeneratedTextColumn(
      'wpt1navtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1desc1Meta = const VerificationMeta('wpt1desc1');
  GeneratedTextColumn _wpt1desc1;
  @override
  GeneratedTextColumn get wpt1desc1 => _wpt1desc1 ??= _constructWpt1desc1();
  GeneratedTextColumn _constructWpt1desc1() {
    return GeneratedTextColumn(
      'wpt1desc1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1desc2Meta = const VerificationMeta('wpt1desc2');
  GeneratedTextColumn _wpt1desc2;
  @override
  GeneratedTextColumn get wpt1desc2 => _wpt1desc2 ??= _constructWpt1desc2();
  GeneratedTextColumn _constructWpt1desc2() {
    return GeneratedTextColumn(
      'wpt1desc2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1desc3Meta = const VerificationMeta('wpt1desc3');
  GeneratedTextColumn _wpt1desc3;
  @override
  GeneratedTextColumn get wpt1desc3 => _wpt1desc3 ??= _constructWpt1desc3();
  GeneratedTextColumn _constructWpt1desc3() {
    return GeneratedTextColumn(
      'wpt1desc3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1desc4Meta = const VerificationMeta('wpt1desc4');
  GeneratedTextColumn _wpt1desc4;
  @override
  GeneratedTextColumn get wpt1desc4 => _wpt1desc4 ??= _constructWpt1desc4();
  GeneratedTextColumn _constructWpt1desc4() {
    return GeneratedTextColumn(
      'wpt1desc4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1wgslatMeta = const VerificationMeta('wpt1wgslat');
  GeneratedTextColumn _wpt1wgslat;
  @override
  GeneratedTextColumn get wpt1wgslat => _wpt1wgslat ??= _constructWpt1wgslat();
  GeneratedTextColumn _constructWpt1wgslat() {
    return GeneratedTextColumn(
      'wpt1wgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt1wgslongMeta =
      const VerificationMeta('wpt1wgslong');
  GeneratedTextColumn _wpt1wgslong;
  @override
  GeneratedTextColumn get wpt1wgslong =>
      _wpt1wgslong ??= _constructWpt1wgslong();
  GeneratedTextColumn _constructWpt1wgslong() {
    return GeneratedTextColumn(
      'wpt1wgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navtypeMeta = const VerificationMeta('navtype');
  GeneratedTextColumn _navtype;
  @override
  GeneratedTextColumn get navtype => _navtype ??= _constructNavtype();
  GeneratedTextColumn _constructNavtype() {
    return GeneratedTextColumn(
      'navtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rnpMeta = const VerificationMeta('rnp');
  GeneratedTextColumn _rnp;
  @override
  GeneratedTextColumn get rnp => _rnp ??= _constructRnp();
  GeneratedTextColumn _constructRnp() {
    return GeneratedTextColumn(
      'rnp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2desc1Meta = const VerificationMeta('wpt2desc1');
  GeneratedTextColumn _wpt2desc1;
  @override
  GeneratedTextColumn get wpt2desc1 => _wpt2desc1 ??= _constructWpt2desc1();
  GeneratedTextColumn _constructWpt2desc1() {
    return GeneratedTextColumn(
      'wpt2desc1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2desc2Meta = const VerificationMeta('wpt2desc2');
  GeneratedTextColumn _wpt2desc2;
  @override
  GeneratedTextColumn get wpt2desc2 => _wpt2desc2 ??= _constructWpt2desc2();
  GeneratedTextColumn _constructWpt2desc2() {
    return GeneratedTextColumn(
      'wpt2desc2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2desc3Meta = const VerificationMeta('wpt2desc3');
  GeneratedTextColumn _wpt2desc3;
  @override
  GeneratedTextColumn get wpt2desc3 => _wpt2desc3 ??= _constructWpt2desc3();
  GeneratedTextColumn _constructWpt2desc3() {
    return GeneratedTextColumn(
      'wpt2desc3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2desc4Meta = const VerificationMeta('wpt2desc4');
  GeneratedTextColumn _wpt2desc4;
  @override
  GeneratedTextColumn get wpt2desc4 => _wpt2desc4 ??= _constructWpt2desc4();
  GeneratedTextColumn _constructWpt2desc4() {
    return GeneratedTextColumn(
      'wpt2desc4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2icaoMeta = const VerificationMeta('wpt2icao');
  GeneratedTextColumn _wpt2icao;
  @override
  GeneratedTextColumn get wpt2icao => _wpt2icao ??= _constructWpt2icao();
  GeneratedTextColumn _constructWpt2icao() {
    return GeneratedTextColumn(
      'wpt2icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2wgslatMeta = const VerificationMeta('wpt2wgslat');
  GeneratedTextColumn _wpt2wgslat;
  @override
  GeneratedTextColumn get wpt2wgslat => _wpt2wgslat ??= _constructWpt2wgslat();
  GeneratedTextColumn _constructWpt2wgslat() {
    return GeneratedTextColumn(
      'wpt2wgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt2wgslongMeta =
      const VerificationMeta('wpt2wgslong');
  GeneratedTextColumn _wpt2wgslong;
  @override
  GeneratedTextColumn get wpt2wgslong =>
      _wpt2wgslong ??= _constructWpt2wgslong();
  GeneratedTextColumn _constructWpt2wgslong() {
    return GeneratedTextColumn(
      'wpt2wgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _distanceMeta = const VerificationMeta('distance');
  GeneratedTextColumn _distance;
  @override
  GeneratedTextColumn get distance => _distance ??= _constructDistance();
  GeneratedTextColumn _constructDistance() {
    return GeneratedTextColumn(
      'distance',
      $tableName,
      true,
    );
  }

  final VerificationMeta _inbdcrsMeta = const VerificationMeta('inbdcrs');
  GeneratedTextColumn _inbdcrs;
  @override
  GeneratedTextColumn get inbdcrs => _inbdcrs ??= _constructInbdcrs();
  GeneratedTextColumn _constructInbdcrs() {
    return GeneratedTextColumn(
      'inbdcrs',
      $tableName,
      true,
    );
  }

  final VerificationMeta _minaltMeta = const VerificationMeta('minalt');
  GeneratedTextColumn _minalt;
  @override
  GeneratedTextColumn get minalt => _minalt ??= _constructMinalt();
  GeneratedTextColumn _constructMinalt() {
    return GeneratedTextColumn(
      'minalt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _outbdcrsMeta = const VerificationMeta('outbdcrs');
  GeneratedTextColumn _outbdcrs;
  @override
  GeneratedTextColumn get outbdcrs => _outbdcrs ??= _constructOutbdcrs();
  GeneratedTextColumn _constructOutbdcrs() {
    return GeneratedTextColumn(
      'outbdcrs',
      $tableName,
      true,
    );
  }

  final VerificationMeta _maaMeta = const VerificationMeta('maa');
  GeneratedTextColumn _maa;
  @override
  GeneratedTextColumn get maa => _maa ??= _constructMaa();
  GeneratedTextColumn _constructMaa() {
    return GeneratedTextColumn(
      'maa',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cruiselevelMeta =
      const VerificationMeta('cruiselevel');
  GeneratedTextColumn _cruiselevel;
  @override
  GeneratedTextColumn get cruiselevel =>
      _cruiselevel ??= _constructCruiselevel();
  GeneratedTextColumn _constructCruiselevel() {
    return GeneratedTextColumn(
      'cruiselevel',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rvsmMeta = const VerificationMeta('rvsm');
  GeneratedTextColumn _rvsm;
  @override
  GeneratedTextColumn get rvsm => _rvsm ??= _constructRvsm();
  GeneratedTextColumn _constructRvsm() {
    return GeneratedTextColumn(
      'rvsm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _fixturn1Meta = const VerificationMeta('fixturn1');
  GeneratedTextColumn _fixturn1;
  @override
  GeneratedTextColumn get fixturn1 => _fixturn1 ??= _constructFixturn1();
  GeneratedTextColumn _constructFixturn1() {
    return GeneratedTextColumn(
      'fixturn1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _fixturn2Meta = const VerificationMeta('fixturn2');
  GeneratedTextColumn _fixturn2;
  @override
  GeneratedTextColumn get fixturn2 => _fixturn2 ??= _constructFixturn2();
  GeneratedTextColumn _constructFixturn2() {
    return GeneratedTextColumn(
      'fixturn2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _topleftlatMeta = const VerificationMeta('topleftlat');
  GeneratedTextColumn _topleftlat;
  @override
  GeneratedTextColumn get topleftlat => _topleftlat ??= _constructTopleftlat();
  GeneratedTextColumn _constructTopleftlat() {
    return GeneratedTextColumn(
      'topleftlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _topleftlonMeta = const VerificationMeta('topleftlon');
  GeneratedTextColumn _topleftlon;
  @override
  GeneratedTextColumn get topleftlon => _topleftlon ??= _constructTopleftlon();
  GeneratedTextColumn _constructTopleftlon() {
    return GeneratedTextColumn(
      'topleftlon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bottomrightlatMeta =
      const VerificationMeta('bottomrightlat');
  GeneratedTextColumn _bottomrightlat;
  @override
  GeneratedTextColumn get bottomrightlat =>
      _bottomrightlat ??= _constructBottomrightlat();
  GeneratedTextColumn _constructBottomrightlat() {
    return GeneratedTextColumn(
      'bottomrightlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bottomrightlonMeta =
      const VerificationMeta('bottomrightlon');
  GeneratedTextColumn _bottomrightlon;
  @override
  GeneratedTextColumn get bottomrightlon =>
      _bottomrightlon ??= _constructBottomrightlon();
  GeneratedTextColumn _constructBottomrightlon() {
    return GeneratedTextColumn(
      'bottomrightlon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        icao,
        atsident,
        direction,
        level,
        sequence,
        wpt1_latitude,
        wpt1_longitude,
        wpt1_ident,
        wpt2_latitude,
        wpt2_longitude,
        wpt2_ident,
        upperlimitstring,
        lowerlimitstring,
        wpt1_country,
        wpt2_country,
        type,
        bidirect,
        freqclass,
        status,
        wpt1icao,
        wpt1navtype,
        wpt1desc1,
        wpt1desc2,
        wpt1desc3,
        wpt1desc4,
        wpt1wgslat,
        wpt1wgslong,
        navtype,
        rnp,
        wpt2desc1,
        wpt2desc2,
        wpt2desc3,
        wpt2desc4,
        wpt2icao,
        wpt2wgslat,
        wpt2wgslong,
        distance,
        inbdcrs,
        minalt,
        outbdcrs,
        maa,
        cruiselevel,
        cycledate,
        rvsm,
        fixturn1,
        fixturn2,
        topleftlat,
        topleftlon,
        bottomrightlat,
        bottomrightlon,
        crc32
      ];
  @override
  $DafifAtsrouteTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_atsroute';
  @override
  final String actualTableName = 'dafif_atsroute';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_atsroute> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('atsident')) {
      context.handle(_atsidentMeta,
          atsident.isAcceptableOrUnknown(data['atsident'], _atsidentMeta));
    }
    if (data.containsKey('direction')) {
      context.handle(_directionMeta,
          direction.isAcceptableOrUnknown(data['direction'], _directionMeta));
    }
    if (data.containsKey('level')) {
      context.handle(
          _levelMeta, level.isAcceptableOrUnknown(data['level'], _levelMeta));
    }
    if (data.containsKey('sequence')) {
      context.handle(_sequenceMeta,
          sequence.isAcceptableOrUnknown(data['sequence'], _sequenceMeta));
    }
    if (data.containsKey('wpt1_latitude')) {
      context.handle(
          _wpt1_latitudeMeta,
          wpt1_latitude.isAcceptableOrUnknown(
              data['wpt1_latitude'], _wpt1_latitudeMeta));
    }
    if (data.containsKey('wpt1_longitude')) {
      context.handle(
          _wpt1_longitudeMeta,
          wpt1_longitude.isAcceptableOrUnknown(
              data['wpt1_longitude'], _wpt1_longitudeMeta));
    }
    if (data.containsKey('wpt1_ident')) {
      context.handle(
          _wpt1_identMeta,
          wpt1_ident.isAcceptableOrUnknown(
              data['wpt1_ident'], _wpt1_identMeta));
    }
    if (data.containsKey('wpt2_latitude')) {
      context.handle(
          _wpt2_latitudeMeta,
          wpt2_latitude.isAcceptableOrUnknown(
              data['wpt2_latitude'], _wpt2_latitudeMeta));
    }
    if (data.containsKey('wpt2_longitude')) {
      context.handle(
          _wpt2_longitudeMeta,
          wpt2_longitude.isAcceptableOrUnknown(
              data['wpt2_longitude'], _wpt2_longitudeMeta));
    }
    if (data.containsKey('wpt2_ident')) {
      context.handle(
          _wpt2_identMeta,
          wpt2_ident.isAcceptableOrUnknown(
              data['wpt2_ident'], _wpt2_identMeta));
    }
    if (data.containsKey('upperlimitstring')) {
      context.handle(
          _upperlimitstringMeta,
          upperlimitstring.isAcceptableOrUnknown(
              data['upperlimitstring'], _upperlimitstringMeta));
    }
    if (data.containsKey('lowerlimitstring')) {
      context.handle(
          _lowerlimitstringMeta,
          lowerlimitstring.isAcceptableOrUnknown(
              data['lowerlimitstring'], _lowerlimitstringMeta));
    }
    if (data.containsKey('wpt1_country')) {
      context.handle(
          _wpt1_countryMeta,
          wpt1_country.isAcceptableOrUnknown(
              data['wpt1_country'], _wpt1_countryMeta));
    }
    if (data.containsKey('wpt2_country')) {
      context.handle(
          _wpt2_countryMeta,
          wpt2_country.isAcceptableOrUnknown(
              data['wpt2_country'], _wpt2_countryMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('bidirect')) {
      context.handle(_bidirectMeta,
          bidirect.isAcceptableOrUnknown(data['bidirect'], _bidirectMeta));
    }
    if (data.containsKey('freqclass')) {
      context.handle(_freqclassMeta,
          freqclass.isAcceptableOrUnknown(data['freqclass'], _freqclassMeta));
    }
    if (data.containsKey('status')) {
      context.handle(_statusMeta,
          status.isAcceptableOrUnknown(data['status'], _statusMeta));
    }
    if (data.containsKey('wpt1icao')) {
      context.handle(_wpt1icaoMeta,
          wpt1icao.isAcceptableOrUnknown(data['wpt1icao'], _wpt1icaoMeta));
    }
    if (data.containsKey('wpt1navtype')) {
      context.handle(
          _wpt1navtypeMeta,
          wpt1navtype.isAcceptableOrUnknown(
              data['wpt1navtype'], _wpt1navtypeMeta));
    }
    if (data.containsKey('wpt1desc1')) {
      context.handle(_wpt1desc1Meta,
          wpt1desc1.isAcceptableOrUnknown(data['wpt1desc1'], _wpt1desc1Meta));
    }
    if (data.containsKey('wpt1desc2')) {
      context.handle(_wpt1desc2Meta,
          wpt1desc2.isAcceptableOrUnknown(data['wpt1desc2'], _wpt1desc2Meta));
    }
    if (data.containsKey('wpt1desc3')) {
      context.handle(_wpt1desc3Meta,
          wpt1desc3.isAcceptableOrUnknown(data['wpt1desc3'], _wpt1desc3Meta));
    }
    if (data.containsKey('wpt1desc4')) {
      context.handle(_wpt1desc4Meta,
          wpt1desc4.isAcceptableOrUnknown(data['wpt1desc4'], _wpt1desc4Meta));
    }
    if (data.containsKey('wpt1wgslat')) {
      context.handle(
          _wpt1wgslatMeta,
          wpt1wgslat.isAcceptableOrUnknown(
              data['wpt1wgslat'], _wpt1wgslatMeta));
    }
    if (data.containsKey('wpt1wgslong')) {
      context.handle(
          _wpt1wgslongMeta,
          wpt1wgslong.isAcceptableOrUnknown(
              data['wpt1wgslong'], _wpt1wgslongMeta));
    }
    if (data.containsKey('navtype')) {
      context.handle(_navtypeMeta,
          navtype.isAcceptableOrUnknown(data['navtype'], _navtypeMeta));
    }
    if (data.containsKey('rnp')) {
      context.handle(
          _rnpMeta, rnp.isAcceptableOrUnknown(data['rnp'], _rnpMeta));
    }
    if (data.containsKey('wpt2desc1')) {
      context.handle(_wpt2desc1Meta,
          wpt2desc1.isAcceptableOrUnknown(data['wpt2desc1'], _wpt2desc1Meta));
    }
    if (data.containsKey('wpt2desc2')) {
      context.handle(_wpt2desc2Meta,
          wpt2desc2.isAcceptableOrUnknown(data['wpt2desc2'], _wpt2desc2Meta));
    }
    if (data.containsKey('wpt2desc3')) {
      context.handle(_wpt2desc3Meta,
          wpt2desc3.isAcceptableOrUnknown(data['wpt2desc3'], _wpt2desc3Meta));
    }
    if (data.containsKey('wpt2desc4')) {
      context.handle(_wpt2desc4Meta,
          wpt2desc4.isAcceptableOrUnknown(data['wpt2desc4'], _wpt2desc4Meta));
    }
    if (data.containsKey('wpt2icao')) {
      context.handle(_wpt2icaoMeta,
          wpt2icao.isAcceptableOrUnknown(data['wpt2icao'], _wpt2icaoMeta));
    }
    if (data.containsKey('wpt2wgslat')) {
      context.handle(
          _wpt2wgslatMeta,
          wpt2wgslat.isAcceptableOrUnknown(
              data['wpt2wgslat'], _wpt2wgslatMeta));
    }
    if (data.containsKey('wpt2wgslong')) {
      context.handle(
          _wpt2wgslongMeta,
          wpt2wgslong.isAcceptableOrUnknown(
              data['wpt2wgslong'], _wpt2wgslongMeta));
    }
    if (data.containsKey('distance')) {
      context.handle(_distanceMeta,
          distance.isAcceptableOrUnknown(data['distance'], _distanceMeta));
    }
    if (data.containsKey('inbdcrs')) {
      context.handle(_inbdcrsMeta,
          inbdcrs.isAcceptableOrUnknown(data['inbdcrs'], _inbdcrsMeta));
    }
    if (data.containsKey('minalt')) {
      context.handle(_minaltMeta,
          minalt.isAcceptableOrUnknown(data['minalt'], _minaltMeta));
    }
    if (data.containsKey('outbdcrs')) {
      context.handle(_outbdcrsMeta,
          outbdcrs.isAcceptableOrUnknown(data['outbdcrs'], _outbdcrsMeta));
    }
    if (data.containsKey('maa')) {
      context.handle(
          _maaMeta, maa.isAcceptableOrUnknown(data['maa'], _maaMeta));
    }
    if (data.containsKey('cruiselevel')) {
      context.handle(
          _cruiselevelMeta,
          cruiselevel.isAcceptableOrUnknown(
              data['cruiselevel'], _cruiselevelMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('rvsm')) {
      context.handle(
          _rvsmMeta, rvsm.isAcceptableOrUnknown(data['rvsm'], _rvsmMeta));
    }
    if (data.containsKey('fixturn1')) {
      context.handle(_fixturn1Meta,
          fixturn1.isAcceptableOrUnknown(data['fixturn1'], _fixturn1Meta));
    }
    if (data.containsKey('fixturn2')) {
      context.handle(_fixturn2Meta,
          fixturn2.isAcceptableOrUnknown(data['fixturn2'], _fixturn2Meta));
    }
    if (data.containsKey('topleftlat')) {
      context.handle(
          _topleftlatMeta,
          topleftlat.isAcceptableOrUnknown(
              data['topleftlat'], _topleftlatMeta));
    }
    if (data.containsKey('topleftlon')) {
      context.handle(
          _topleftlonMeta,
          topleftlon.isAcceptableOrUnknown(
              data['topleftlon'], _topleftlonMeta));
    }
    if (data.containsKey('bottomrightlat')) {
      context.handle(
          _bottomrightlatMeta,
          bottomrightlat.isAcceptableOrUnknown(
              data['bottomrightlat'], _bottomrightlatMeta));
    }
    if (data.containsKey('bottomrightlon')) {
      context.handle(
          _bottomrightlonMeta,
          bottomrightlon.isAcceptableOrUnknown(
              data['bottomrightlon'], _bottomrightlonMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_atsroute map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_atsroute.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifAtsrouteTable createAlias(String alias) {
    return $DafifAtsrouteTable(_db, alias);
  }
}

class dafif_bdry extends DataClass implements Insertable<dafif_bdry> {
  final int id;
  final String bdry_ident;
  final String seq_number;
  final String name;
  final String type;
  final String icao;
  final String shap;
  final String derivation;
  final String wgs_lat1;
  final String wgs_dlat1;
  final String wgs_lon1;
  final String wgs_dlon1;
  final String wgs_lat2;
  final String wgs_dlat2;
  final String wgs_lon2;
  final String wgs_dlon2;
  final String wgs_lat0;
  final String wgs_dlat0;
  final String wgs_lon0;
  final String wgs_dlon0;
  final String radius1;
  final String radius2;
  final String bearing1;
  final String bearing2;
  final String nav_ident;
  final String nav_type;
  final String nav_ctry;
  final String nav_key_cd;
  final String cycle_date;
  final int crc32;
  final double lat0;
  final double lon0;
  final double lat1;
  final double lon1;
  final double lat2;
  final double lon2;
  dafif_bdry(
      {@required this.id,
      this.bdry_ident,
      this.seq_number,
      this.name,
      this.type,
      this.icao,
      this.shap,
      this.derivation,
      this.wgs_lat1,
      this.wgs_dlat1,
      this.wgs_lon1,
      this.wgs_dlon1,
      this.wgs_lat2,
      this.wgs_dlat2,
      this.wgs_lon2,
      this.wgs_dlon2,
      this.wgs_lat0,
      this.wgs_dlat0,
      this.wgs_lon0,
      this.wgs_dlon0,
      this.radius1,
      this.radius2,
      this.bearing1,
      this.bearing2,
      this.nav_ident,
      this.nav_type,
      this.nav_ctry,
      this.nav_key_cd,
      this.cycle_date,
      this.crc32,
      this.lat0,
      this.lon0,
      this.lat1,
      this.lon1,
      this.lat2,
      this.lon2});
  factory dafif_bdry.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_bdry(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      bdry_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bdry_ident']),
      seq_number: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}seq_number']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      shap: stringType.mapFromDatabaseResponse(data['${effectivePrefix}shap']),
      derivation: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}derivation']),
      wgs_lat1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_lat1']),
      wgs_dlat1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlat1']),
      wgs_lon1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_lon1']),
      wgs_dlon1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlon1']),
      wgs_lat2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_lat2']),
      wgs_dlat2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlat2']),
      wgs_lon2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_lon2']),
      wgs_dlon2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlon2']),
      wgs_lat0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_lat0']),
      wgs_dlat0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlat0']),
      wgs_lon0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_lon0']),
      wgs_dlon0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlon0']),
      radius1:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}radius1']),
      radius2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}radius2']),
      bearing1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bearing1']),
      bearing2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bearing2']),
      nav_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_ident']),
      nav_type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_type']),
      nav_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_ctry']),
      nav_key_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_key_cd']),
      cycle_date: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycle_date']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      lat0: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat0']),
      lon0: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon0']),
      lat1: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat1']),
      lon1: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon1']),
      lat2: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat2']),
      lon2: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon2']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || bdry_ident != null) {
      map['bdry_ident'] = Variable<String>(bdry_ident);
    }
    if (!nullToAbsent || seq_number != null) {
      map['seq_number'] = Variable<String>(seq_number);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || shap != null) {
      map['shap'] = Variable<String>(shap);
    }
    if (!nullToAbsent || derivation != null) {
      map['derivation'] = Variable<String>(derivation);
    }
    if (!nullToAbsent || wgs_lat1 != null) {
      map['wgs_lat1'] = Variable<String>(wgs_lat1);
    }
    if (!nullToAbsent || wgs_dlat1 != null) {
      map['wgs_dlat1'] = Variable<String>(wgs_dlat1);
    }
    if (!nullToAbsent || wgs_lon1 != null) {
      map['wgs_lon1'] = Variable<String>(wgs_lon1);
    }
    if (!nullToAbsent || wgs_dlon1 != null) {
      map['wgs_dlon1'] = Variable<String>(wgs_dlon1);
    }
    if (!nullToAbsent || wgs_lat2 != null) {
      map['wgs_lat2'] = Variable<String>(wgs_lat2);
    }
    if (!nullToAbsent || wgs_dlat2 != null) {
      map['wgs_dlat2'] = Variable<String>(wgs_dlat2);
    }
    if (!nullToAbsent || wgs_lon2 != null) {
      map['wgs_lon2'] = Variable<String>(wgs_lon2);
    }
    if (!nullToAbsent || wgs_dlon2 != null) {
      map['wgs_dlon2'] = Variable<String>(wgs_dlon2);
    }
    if (!nullToAbsent || wgs_lat0 != null) {
      map['wgs_lat0'] = Variable<String>(wgs_lat0);
    }
    if (!nullToAbsent || wgs_dlat0 != null) {
      map['wgs_dlat0'] = Variable<String>(wgs_dlat0);
    }
    if (!nullToAbsent || wgs_lon0 != null) {
      map['wgs_lon0'] = Variable<String>(wgs_lon0);
    }
    if (!nullToAbsent || wgs_dlon0 != null) {
      map['wgs_dlon0'] = Variable<String>(wgs_dlon0);
    }
    if (!nullToAbsent || radius1 != null) {
      map['radius1'] = Variable<String>(radius1);
    }
    if (!nullToAbsent || radius2 != null) {
      map['radius2'] = Variable<String>(radius2);
    }
    if (!nullToAbsent || bearing1 != null) {
      map['bearing1'] = Variable<String>(bearing1);
    }
    if (!nullToAbsent || bearing2 != null) {
      map['bearing2'] = Variable<String>(bearing2);
    }
    if (!nullToAbsent || nav_ident != null) {
      map['nav_ident'] = Variable<String>(nav_ident);
    }
    if (!nullToAbsent || nav_type != null) {
      map['nav_type'] = Variable<String>(nav_type);
    }
    if (!nullToAbsent || nav_ctry != null) {
      map['nav_ctry'] = Variable<String>(nav_ctry);
    }
    if (!nullToAbsent || nav_key_cd != null) {
      map['nav_key_cd'] = Variable<String>(nav_key_cd);
    }
    if (!nullToAbsent || cycle_date != null) {
      map['cycle_date'] = Variable<String>(cycle_date);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    if (!nullToAbsent || lat0 != null) {
      map['lat0'] = Variable<double>(lat0);
    }
    if (!nullToAbsent || lon0 != null) {
      map['lon0'] = Variable<double>(lon0);
    }
    if (!nullToAbsent || lat1 != null) {
      map['lat1'] = Variable<double>(lat1);
    }
    if (!nullToAbsent || lon1 != null) {
      map['lon1'] = Variable<double>(lon1);
    }
    if (!nullToAbsent || lat2 != null) {
      map['lat2'] = Variable<double>(lat2);
    }
    if (!nullToAbsent || lon2 != null) {
      map['lon2'] = Variable<double>(lon2);
    }
    return map;
  }

  factory dafif_bdry.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_bdry(
      id: serializer.fromJson<int>(json['id']),
      bdry_ident: serializer.fromJson<String>(json['bdry_ident']),
      seq_number: serializer.fromJson<String>(json['seq_number']),
      name: serializer.fromJson<String>(json['name']),
      type: serializer.fromJson<String>(json['type']),
      icao: serializer.fromJson<String>(json['icao']),
      shap: serializer.fromJson<String>(json['shap']),
      derivation: serializer.fromJson<String>(json['derivation']),
      wgs_lat1: serializer.fromJson<String>(json['wgs_lat1']),
      wgs_dlat1: serializer.fromJson<String>(json['wgs_dlat1']),
      wgs_lon1: serializer.fromJson<String>(json['wgs_lon1']),
      wgs_dlon1: serializer.fromJson<String>(json['wgs_dlon1']),
      wgs_lat2: serializer.fromJson<String>(json['wgs_lat2']),
      wgs_dlat2: serializer.fromJson<String>(json['wgs_dlat2']),
      wgs_lon2: serializer.fromJson<String>(json['wgs_lon2']),
      wgs_dlon2: serializer.fromJson<String>(json['wgs_dlon2']),
      wgs_lat0: serializer.fromJson<String>(json['wgs_lat0']),
      wgs_dlat0: serializer.fromJson<String>(json['wgs_dlat0']),
      wgs_lon0: serializer.fromJson<String>(json['wgs_lon0']),
      wgs_dlon0: serializer.fromJson<String>(json['wgs_dlon0']),
      radius1: serializer.fromJson<String>(json['radius1']),
      radius2: serializer.fromJson<String>(json['radius2']),
      bearing1: serializer.fromJson<String>(json['bearing1']),
      bearing2: serializer.fromJson<String>(json['bearing2']),
      nav_ident: serializer.fromJson<String>(json['nav_ident']),
      nav_type: serializer.fromJson<String>(json['nav_type']),
      nav_ctry: serializer.fromJson<String>(json['nav_ctry']),
      nav_key_cd: serializer.fromJson<String>(json['nav_key_cd']),
      cycle_date: serializer.fromJson<String>(json['cycle_date']),
      crc32: serializer.fromJson<int>(json['crc32']),
      lat0: serializer.fromJson<double>(json['lat0']),
      lon0: serializer.fromJson<double>(json['lon0']),
      lat1: serializer.fromJson<double>(json['lat1']),
      lon1: serializer.fromJson<double>(json['lon1']),
      lat2: serializer.fromJson<double>(json['lat2']),
      lon2: serializer.fromJson<double>(json['lon2']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'bdry_ident': serializer.toJson<String>(bdry_ident),
      'seq_number': serializer.toJson<String>(seq_number),
      'name': serializer.toJson<String>(name),
      'type': serializer.toJson<String>(type),
      'icao': serializer.toJson<String>(icao),
      'shap': serializer.toJson<String>(shap),
      'derivation': serializer.toJson<String>(derivation),
      'wgs_lat1': serializer.toJson<String>(wgs_lat1),
      'wgs_dlat1': serializer.toJson<String>(wgs_dlat1),
      'wgs_lon1': serializer.toJson<String>(wgs_lon1),
      'wgs_dlon1': serializer.toJson<String>(wgs_dlon1),
      'wgs_lat2': serializer.toJson<String>(wgs_lat2),
      'wgs_dlat2': serializer.toJson<String>(wgs_dlat2),
      'wgs_lon2': serializer.toJson<String>(wgs_lon2),
      'wgs_dlon2': serializer.toJson<String>(wgs_dlon2),
      'wgs_lat0': serializer.toJson<String>(wgs_lat0),
      'wgs_dlat0': serializer.toJson<String>(wgs_dlat0),
      'wgs_lon0': serializer.toJson<String>(wgs_lon0),
      'wgs_dlon0': serializer.toJson<String>(wgs_dlon0),
      'radius1': serializer.toJson<String>(radius1),
      'radius2': serializer.toJson<String>(radius2),
      'bearing1': serializer.toJson<String>(bearing1),
      'bearing2': serializer.toJson<String>(bearing2),
      'nav_ident': serializer.toJson<String>(nav_ident),
      'nav_type': serializer.toJson<String>(nav_type),
      'nav_ctry': serializer.toJson<String>(nav_ctry),
      'nav_key_cd': serializer.toJson<String>(nav_key_cd),
      'cycle_date': serializer.toJson<String>(cycle_date),
      'crc32': serializer.toJson<int>(crc32),
      'lat0': serializer.toJson<double>(lat0),
      'lon0': serializer.toJson<double>(lon0),
      'lat1': serializer.toJson<double>(lat1),
      'lon1': serializer.toJson<double>(lon1),
      'lat2': serializer.toJson<double>(lat2),
      'lon2': serializer.toJson<double>(lon2),
    };
  }

  dafif_bdry copyWith(
          {int id,
          String bdry_ident,
          String seq_number,
          String name,
          String type,
          String icao,
          String shap,
          String derivation,
          String wgs_lat1,
          String wgs_dlat1,
          String wgs_lon1,
          String wgs_dlon1,
          String wgs_lat2,
          String wgs_dlat2,
          String wgs_lon2,
          String wgs_dlon2,
          String wgs_lat0,
          String wgs_dlat0,
          String wgs_lon0,
          String wgs_dlon0,
          String radius1,
          String radius2,
          String bearing1,
          String bearing2,
          String nav_ident,
          String nav_type,
          String nav_ctry,
          String nav_key_cd,
          String cycle_date,
          int crc32,
          double lat0,
          double lon0,
          double lat1,
          double lon1,
          double lat2,
          double lon2}) =>
      dafif_bdry(
        id: id ?? this.id,
        bdry_ident: bdry_ident ?? this.bdry_ident,
        seq_number: seq_number ?? this.seq_number,
        name: name ?? this.name,
        type: type ?? this.type,
        icao: icao ?? this.icao,
        shap: shap ?? this.shap,
        derivation: derivation ?? this.derivation,
        wgs_lat1: wgs_lat1 ?? this.wgs_lat1,
        wgs_dlat1: wgs_dlat1 ?? this.wgs_dlat1,
        wgs_lon1: wgs_lon1 ?? this.wgs_lon1,
        wgs_dlon1: wgs_dlon1 ?? this.wgs_dlon1,
        wgs_lat2: wgs_lat2 ?? this.wgs_lat2,
        wgs_dlat2: wgs_dlat2 ?? this.wgs_dlat2,
        wgs_lon2: wgs_lon2 ?? this.wgs_lon2,
        wgs_dlon2: wgs_dlon2 ?? this.wgs_dlon2,
        wgs_lat0: wgs_lat0 ?? this.wgs_lat0,
        wgs_dlat0: wgs_dlat0 ?? this.wgs_dlat0,
        wgs_lon0: wgs_lon0 ?? this.wgs_lon0,
        wgs_dlon0: wgs_dlon0 ?? this.wgs_dlon0,
        radius1: radius1 ?? this.radius1,
        radius2: radius2 ?? this.radius2,
        bearing1: bearing1 ?? this.bearing1,
        bearing2: bearing2 ?? this.bearing2,
        nav_ident: nav_ident ?? this.nav_ident,
        nav_type: nav_type ?? this.nav_type,
        nav_ctry: nav_ctry ?? this.nav_ctry,
        nav_key_cd: nav_key_cd ?? this.nav_key_cd,
        cycle_date: cycle_date ?? this.cycle_date,
        crc32: crc32 ?? this.crc32,
        lat0: lat0 ?? this.lat0,
        lon0: lon0 ?? this.lon0,
        lat1: lat1 ?? this.lat1,
        lon1: lon1 ?? this.lon1,
        lat2: lat2 ?? this.lat2,
        lon2: lon2 ?? this.lon2,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_bdry(')
          ..write('id: $id, ')
          ..write('bdry_ident: $bdry_ident, ')
          ..write('seq_number: $seq_number, ')
          ..write('name: $name, ')
          ..write('type: $type, ')
          ..write('icao: $icao, ')
          ..write('shap: $shap, ')
          ..write('derivation: $derivation, ')
          ..write('wgs_lat1: $wgs_lat1, ')
          ..write('wgs_dlat1: $wgs_dlat1, ')
          ..write('wgs_lon1: $wgs_lon1, ')
          ..write('wgs_dlon1: $wgs_dlon1, ')
          ..write('wgs_lat2: $wgs_lat2, ')
          ..write('wgs_dlat2: $wgs_dlat2, ')
          ..write('wgs_lon2: $wgs_lon2, ')
          ..write('wgs_dlon2: $wgs_dlon2, ')
          ..write('wgs_lat0: $wgs_lat0, ')
          ..write('wgs_dlat0: $wgs_dlat0, ')
          ..write('wgs_lon0: $wgs_lon0, ')
          ..write('wgs_dlon0: $wgs_dlon0, ')
          ..write('radius1: $radius1, ')
          ..write('radius2: $radius2, ')
          ..write('bearing1: $bearing1, ')
          ..write('bearing2: $bearing2, ')
          ..write('nav_ident: $nav_ident, ')
          ..write('nav_type: $nav_type, ')
          ..write('nav_ctry: $nav_ctry, ')
          ..write('nav_key_cd: $nav_key_cd, ')
          ..write('cycle_date: $cycle_date, ')
          ..write('crc32: $crc32, ')
          ..write('lat0: $lat0, ')
          ..write('lon0: $lon0, ')
          ..write('lat1: $lat1, ')
          ..write('lon1: $lon1, ')
          ..write('lat2: $lat2, ')
          ..write('lon2: $lon2')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          bdry_ident.hashCode,
          $mrjc(
              seq_number.hashCode,
              $mrjc(
                  name.hashCode,
                  $mrjc(
                      type.hashCode,
                      $mrjc(
                          icao.hashCode,
                          $mrjc(
                              shap.hashCode,
                              $mrjc(
                                  derivation.hashCode,
                                  $mrjc(
                                      wgs_lat1.hashCode,
                                      $mrjc(
                                          wgs_dlat1.hashCode,
                                          $mrjc(
                                              wgs_lon1.hashCode,
                                              $mrjc(
                                                  wgs_dlon1.hashCode,
                                                  $mrjc(
                                                      wgs_lat2.hashCode,
                                                      $mrjc(
                                                          wgs_dlat2.hashCode,
                                                          $mrjc(
                                                              wgs_lon2.hashCode,
                                                              $mrjc(
                                                                  wgs_dlon2
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      wgs_lat0
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          wgs_dlat0
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              wgs_lon0.hashCode,
                                                                              $mrjc(wgs_dlon0.hashCode, $mrjc(radius1.hashCode, $mrjc(radius2.hashCode, $mrjc(bearing1.hashCode, $mrjc(bearing2.hashCode, $mrjc(nav_ident.hashCode, $mrjc(nav_type.hashCode, $mrjc(nav_ctry.hashCode, $mrjc(nav_key_cd.hashCode, $mrjc(cycle_date.hashCode, $mrjc(crc32.hashCode, $mrjc(lat0.hashCode, $mrjc(lon0.hashCode, $mrjc(lat1.hashCode, $mrjc(lon1.hashCode, $mrjc(lat2.hashCode, lon2.hashCode))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_bdry &&
          other.id == this.id &&
          other.bdry_ident == this.bdry_ident &&
          other.seq_number == this.seq_number &&
          other.name == this.name &&
          other.type == this.type &&
          other.icao == this.icao &&
          other.shap == this.shap &&
          other.derivation == this.derivation &&
          other.wgs_lat1 == this.wgs_lat1 &&
          other.wgs_dlat1 == this.wgs_dlat1 &&
          other.wgs_lon1 == this.wgs_lon1 &&
          other.wgs_dlon1 == this.wgs_dlon1 &&
          other.wgs_lat2 == this.wgs_lat2 &&
          other.wgs_dlat2 == this.wgs_dlat2 &&
          other.wgs_lon2 == this.wgs_lon2 &&
          other.wgs_dlon2 == this.wgs_dlon2 &&
          other.wgs_lat0 == this.wgs_lat0 &&
          other.wgs_dlat0 == this.wgs_dlat0 &&
          other.wgs_lon0 == this.wgs_lon0 &&
          other.wgs_dlon0 == this.wgs_dlon0 &&
          other.radius1 == this.radius1 &&
          other.radius2 == this.radius2 &&
          other.bearing1 == this.bearing1 &&
          other.bearing2 == this.bearing2 &&
          other.nav_ident == this.nav_ident &&
          other.nav_type == this.nav_type &&
          other.nav_ctry == this.nav_ctry &&
          other.nav_key_cd == this.nav_key_cd &&
          other.cycle_date == this.cycle_date &&
          other.crc32 == this.crc32 &&
          other.lat0 == this.lat0 &&
          other.lon0 == this.lon0 &&
          other.lat1 == this.lat1 &&
          other.lon1 == this.lon1 &&
          other.lat2 == this.lat2 &&
          other.lon2 == this.lon2);
}

class DafifBdryCompanion extends UpdateCompanion<dafif_bdry> {
  final Value<int> id;
  final Value<String> bdry_ident;
  final Value<String> seq_number;
  final Value<String> name;
  final Value<String> type;
  final Value<String> icao;
  final Value<String> shap;
  final Value<String> derivation;
  final Value<String> wgs_lat1;
  final Value<String> wgs_dlat1;
  final Value<String> wgs_lon1;
  final Value<String> wgs_dlon1;
  final Value<String> wgs_lat2;
  final Value<String> wgs_dlat2;
  final Value<String> wgs_lon2;
  final Value<String> wgs_dlon2;
  final Value<String> wgs_lat0;
  final Value<String> wgs_dlat0;
  final Value<String> wgs_lon0;
  final Value<String> wgs_dlon0;
  final Value<String> radius1;
  final Value<String> radius2;
  final Value<String> bearing1;
  final Value<String> bearing2;
  final Value<String> nav_ident;
  final Value<String> nav_type;
  final Value<String> nav_ctry;
  final Value<String> nav_key_cd;
  final Value<String> cycle_date;
  final Value<int> crc32;
  final Value<double> lat0;
  final Value<double> lon0;
  final Value<double> lat1;
  final Value<double> lon1;
  final Value<double> lat2;
  final Value<double> lon2;
  const DafifBdryCompanion({
    this.id = const Value.absent(),
    this.bdry_ident = const Value.absent(),
    this.seq_number = const Value.absent(),
    this.name = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.shap = const Value.absent(),
    this.derivation = const Value.absent(),
    this.wgs_lat1 = const Value.absent(),
    this.wgs_dlat1 = const Value.absent(),
    this.wgs_lon1 = const Value.absent(),
    this.wgs_dlon1 = const Value.absent(),
    this.wgs_lat2 = const Value.absent(),
    this.wgs_dlat2 = const Value.absent(),
    this.wgs_lon2 = const Value.absent(),
    this.wgs_dlon2 = const Value.absent(),
    this.wgs_lat0 = const Value.absent(),
    this.wgs_dlat0 = const Value.absent(),
    this.wgs_lon0 = const Value.absent(),
    this.wgs_dlon0 = const Value.absent(),
    this.radius1 = const Value.absent(),
    this.radius2 = const Value.absent(),
    this.bearing1 = const Value.absent(),
    this.bearing2 = const Value.absent(),
    this.nav_ident = const Value.absent(),
    this.nav_type = const Value.absent(),
    this.nav_ctry = const Value.absent(),
    this.nav_key_cd = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat0 = const Value.absent(),
    this.lon0 = const Value.absent(),
    this.lat1 = const Value.absent(),
    this.lon1 = const Value.absent(),
    this.lat2 = const Value.absent(),
    this.lon2 = const Value.absent(),
  });
  DafifBdryCompanion.insert({
    this.id = const Value.absent(),
    this.bdry_ident = const Value.absent(),
    this.seq_number = const Value.absent(),
    this.name = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.shap = const Value.absent(),
    this.derivation = const Value.absent(),
    this.wgs_lat1 = const Value.absent(),
    this.wgs_dlat1 = const Value.absent(),
    this.wgs_lon1 = const Value.absent(),
    this.wgs_dlon1 = const Value.absent(),
    this.wgs_lat2 = const Value.absent(),
    this.wgs_dlat2 = const Value.absent(),
    this.wgs_lon2 = const Value.absent(),
    this.wgs_dlon2 = const Value.absent(),
    this.wgs_lat0 = const Value.absent(),
    this.wgs_dlat0 = const Value.absent(),
    this.wgs_lon0 = const Value.absent(),
    this.wgs_dlon0 = const Value.absent(),
    this.radius1 = const Value.absent(),
    this.radius2 = const Value.absent(),
    this.bearing1 = const Value.absent(),
    this.bearing2 = const Value.absent(),
    this.nav_ident = const Value.absent(),
    this.nav_type = const Value.absent(),
    this.nav_ctry = const Value.absent(),
    this.nav_key_cd = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat0 = const Value.absent(),
    this.lon0 = const Value.absent(),
    this.lat1 = const Value.absent(),
    this.lon1 = const Value.absent(),
    this.lat2 = const Value.absent(),
    this.lon2 = const Value.absent(),
  });
  static Insertable<dafif_bdry> custom({
    Expression<int> id,
    Expression<String> bdry_ident,
    Expression<String> seq_number,
    Expression<String> name,
    Expression<String> type,
    Expression<String> icao,
    Expression<String> shap,
    Expression<String> derivation,
    Expression<String> wgs_lat1,
    Expression<String> wgs_dlat1,
    Expression<String> wgs_lon1,
    Expression<String> wgs_dlon1,
    Expression<String> wgs_lat2,
    Expression<String> wgs_dlat2,
    Expression<String> wgs_lon2,
    Expression<String> wgs_dlon2,
    Expression<String> wgs_lat0,
    Expression<String> wgs_dlat0,
    Expression<String> wgs_lon0,
    Expression<String> wgs_dlon0,
    Expression<String> radius1,
    Expression<String> radius2,
    Expression<String> bearing1,
    Expression<String> bearing2,
    Expression<String> nav_ident,
    Expression<String> nav_type,
    Expression<String> nav_ctry,
    Expression<String> nav_key_cd,
    Expression<String> cycle_date,
    Expression<int> crc32,
    Expression<double> lat0,
    Expression<double> lon0,
    Expression<double> lat1,
    Expression<double> lon1,
    Expression<double> lat2,
    Expression<double> lon2,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (bdry_ident != null) 'bdry_ident': bdry_ident,
      if (seq_number != null) 'seq_number': seq_number,
      if (name != null) 'name': name,
      if (type != null) 'type': type,
      if (icao != null) 'icao': icao,
      if (shap != null) 'shap': shap,
      if (derivation != null) 'derivation': derivation,
      if (wgs_lat1 != null) 'wgs_lat1': wgs_lat1,
      if (wgs_dlat1 != null) 'wgs_dlat1': wgs_dlat1,
      if (wgs_lon1 != null) 'wgs_lon1': wgs_lon1,
      if (wgs_dlon1 != null) 'wgs_dlon1': wgs_dlon1,
      if (wgs_lat2 != null) 'wgs_lat2': wgs_lat2,
      if (wgs_dlat2 != null) 'wgs_dlat2': wgs_dlat2,
      if (wgs_lon2 != null) 'wgs_lon2': wgs_lon2,
      if (wgs_dlon2 != null) 'wgs_dlon2': wgs_dlon2,
      if (wgs_lat0 != null) 'wgs_lat0': wgs_lat0,
      if (wgs_dlat0 != null) 'wgs_dlat0': wgs_dlat0,
      if (wgs_lon0 != null) 'wgs_lon0': wgs_lon0,
      if (wgs_dlon0 != null) 'wgs_dlon0': wgs_dlon0,
      if (radius1 != null) 'radius1': radius1,
      if (radius2 != null) 'radius2': radius2,
      if (bearing1 != null) 'bearing1': bearing1,
      if (bearing2 != null) 'bearing2': bearing2,
      if (nav_ident != null) 'nav_ident': nav_ident,
      if (nav_type != null) 'nav_type': nav_type,
      if (nav_ctry != null) 'nav_ctry': nav_ctry,
      if (nav_key_cd != null) 'nav_key_cd': nav_key_cd,
      if (cycle_date != null) 'cycle_date': cycle_date,
      if (crc32 != null) 'crc32': crc32,
      if (lat0 != null) 'lat0': lat0,
      if (lon0 != null) 'lon0': lon0,
      if (lat1 != null) 'lat1': lat1,
      if (lon1 != null) 'lon1': lon1,
      if (lat2 != null) 'lat2': lat2,
      if (lon2 != null) 'lon2': lon2,
    });
  }

  DafifBdryCompanion copyWith(
      {Value<int> id,
      Value<String> bdry_ident,
      Value<String> seq_number,
      Value<String> name,
      Value<String> type,
      Value<String> icao,
      Value<String> shap,
      Value<String> derivation,
      Value<String> wgs_lat1,
      Value<String> wgs_dlat1,
      Value<String> wgs_lon1,
      Value<String> wgs_dlon1,
      Value<String> wgs_lat2,
      Value<String> wgs_dlat2,
      Value<String> wgs_lon2,
      Value<String> wgs_dlon2,
      Value<String> wgs_lat0,
      Value<String> wgs_dlat0,
      Value<String> wgs_lon0,
      Value<String> wgs_dlon0,
      Value<String> radius1,
      Value<String> radius2,
      Value<String> bearing1,
      Value<String> bearing2,
      Value<String> nav_ident,
      Value<String> nav_type,
      Value<String> nav_ctry,
      Value<String> nav_key_cd,
      Value<String> cycle_date,
      Value<int> crc32,
      Value<double> lat0,
      Value<double> lon0,
      Value<double> lat1,
      Value<double> lon1,
      Value<double> lat2,
      Value<double> lon2}) {
    return DafifBdryCompanion(
      id: id ?? this.id,
      bdry_ident: bdry_ident ?? this.bdry_ident,
      seq_number: seq_number ?? this.seq_number,
      name: name ?? this.name,
      type: type ?? this.type,
      icao: icao ?? this.icao,
      shap: shap ?? this.shap,
      derivation: derivation ?? this.derivation,
      wgs_lat1: wgs_lat1 ?? this.wgs_lat1,
      wgs_dlat1: wgs_dlat1 ?? this.wgs_dlat1,
      wgs_lon1: wgs_lon1 ?? this.wgs_lon1,
      wgs_dlon1: wgs_dlon1 ?? this.wgs_dlon1,
      wgs_lat2: wgs_lat2 ?? this.wgs_lat2,
      wgs_dlat2: wgs_dlat2 ?? this.wgs_dlat2,
      wgs_lon2: wgs_lon2 ?? this.wgs_lon2,
      wgs_dlon2: wgs_dlon2 ?? this.wgs_dlon2,
      wgs_lat0: wgs_lat0 ?? this.wgs_lat0,
      wgs_dlat0: wgs_dlat0 ?? this.wgs_dlat0,
      wgs_lon0: wgs_lon0 ?? this.wgs_lon0,
      wgs_dlon0: wgs_dlon0 ?? this.wgs_dlon0,
      radius1: radius1 ?? this.radius1,
      radius2: radius2 ?? this.radius2,
      bearing1: bearing1 ?? this.bearing1,
      bearing2: bearing2 ?? this.bearing2,
      nav_ident: nav_ident ?? this.nav_ident,
      nav_type: nav_type ?? this.nav_type,
      nav_ctry: nav_ctry ?? this.nav_ctry,
      nav_key_cd: nav_key_cd ?? this.nav_key_cd,
      cycle_date: cycle_date ?? this.cycle_date,
      crc32: crc32 ?? this.crc32,
      lat0: lat0 ?? this.lat0,
      lon0: lon0 ?? this.lon0,
      lat1: lat1 ?? this.lat1,
      lon1: lon1 ?? this.lon1,
      lat2: lat2 ?? this.lat2,
      lon2: lon2 ?? this.lon2,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (bdry_ident.present) {
      map['bdry_ident'] = Variable<String>(bdry_ident.value);
    }
    if (seq_number.present) {
      map['seq_number'] = Variable<String>(seq_number.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (shap.present) {
      map['shap'] = Variable<String>(shap.value);
    }
    if (derivation.present) {
      map['derivation'] = Variable<String>(derivation.value);
    }
    if (wgs_lat1.present) {
      map['wgs_lat1'] = Variable<String>(wgs_lat1.value);
    }
    if (wgs_dlat1.present) {
      map['wgs_dlat1'] = Variable<String>(wgs_dlat1.value);
    }
    if (wgs_lon1.present) {
      map['wgs_lon1'] = Variable<String>(wgs_lon1.value);
    }
    if (wgs_dlon1.present) {
      map['wgs_dlon1'] = Variable<String>(wgs_dlon1.value);
    }
    if (wgs_lat2.present) {
      map['wgs_lat2'] = Variable<String>(wgs_lat2.value);
    }
    if (wgs_dlat2.present) {
      map['wgs_dlat2'] = Variable<String>(wgs_dlat2.value);
    }
    if (wgs_lon2.present) {
      map['wgs_lon2'] = Variable<String>(wgs_lon2.value);
    }
    if (wgs_dlon2.present) {
      map['wgs_dlon2'] = Variable<String>(wgs_dlon2.value);
    }
    if (wgs_lat0.present) {
      map['wgs_lat0'] = Variable<String>(wgs_lat0.value);
    }
    if (wgs_dlat0.present) {
      map['wgs_dlat0'] = Variable<String>(wgs_dlat0.value);
    }
    if (wgs_lon0.present) {
      map['wgs_lon0'] = Variable<String>(wgs_lon0.value);
    }
    if (wgs_dlon0.present) {
      map['wgs_dlon0'] = Variable<String>(wgs_dlon0.value);
    }
    if (radius1.present) {
      map['radius1'] = Variable<String>(radius1.value);
    }
    if (radius2.present) {
      map['radius2'] = Variable<String>(radius2.value);
    }
    if (bearing1.present) {
      map['bearing1'] = Variable<String>(bearing1.value);
    }
    if (bearing2.present) {
      map['bearing2'] = Variable<String>(bearing2.value);
    }
    if (nav_ident.present) {
      map['nav_ident'] = Variable<String>(nav_ident.value);
    }
    if (nav_type.present) {
      map['nav_type'] = Variable<String>(nav_type.value);
    }
    if (nav_ctry.present) {
      map['nav_ctry'] = Variable<String>(nav_ctry.value);
    }
    if (nav_key_cd.present) {
      map['nav_key_cd'] = Variable<String>(nav_key_cd.value);
    }
    if (cycle_date.present) {
      map['cycle_date'] = Variable<String>(cycle_date.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    if (lat0.present) {
      map['lat0'] = Variable<double>(lat0.value);
    }
    if (lon0.present) {
      map['lon0'] = Variable<double>(lon0.value);
    }
    if (lat1.present) {
      map['lat1'] = Variable<double>(lat1.value);
    }
    if (lon1.present) {
      map['lon1'] = Variable<double>(lon1.value);
    }
    if (lat2.present) {
      map['lat2'] = Variable<double>(lat2.value);
    }
    if (lon2.present) {
      map['lon2'] = Variable<double>(lon2.value);
    }
    return map;
  }
}

class $DafifBdryTable extends DafifBdry
    with TableInfo<$DafifBdryTable, dafif_bdry> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifBdryTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _bdry_identMeta = const VerificationMeta('bdry_ident');
  GeneratedTextColumn _bdry_ident;
  @override
  GeneratedTextColumn get bdry_ident => _bdry_ident ??= _constructBdryIdent();
  GeneratedTextColumn _constructBdryIdent() {
    return GeneratedTextColumn(
      'bdry_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _seq_numberMeta = const VerificationMeta('seq_number');
  GeneratedTextColumn _seq_number;
  @override
  GeneratedTextColumn get seq_number => _seq_number ??= _constructSeqNumber();
  GeneratedTextColumn _constructSeqNumber() {
    return GeneratedTextColumn(
      'seq_number',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _shapMeta = const VerificationMeta('shap');
  GeneratedTextColumn _shap;
  @override
  GeneratedTextColumn get shap => _shap ??= _constructShap();
  GeneratedTextColumn _constructShap() {
    return GeneratedTextColumn(
      'shap',
      $tableName,
      true,
    );
  }

  final VerificationMeta _derivationMeta = const VerificationMeta('derivation');
  GeneratedTextColumn _derivation;
  @override
  GeneratedTextColumn get derivation => _derivation ??= _constructDerivation();
  GeneratedTextColumn _constructDerivation() {
    return GeneratedTextColumn(
      'derivation',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lat1Meta = const VerificationMeta('wgs_lat1');
  GeneratedTextColumn _wgs_lat1;
  @override
  GeneratedTextColumn get wgs_lat1 => _wgs_lat1 ??= _constructWgsLat1();
  GeneratedTextColumn _constructWgsLat1() {
    return GeneratedTextColumn(
      'wgs_lat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlat1Meta = const VerificationMeta('wgs_dlat1');
  GeneratedTextColumn _wgs_dlat1;
  @override
  GeneratedTextColumn get wgs_dlat1 => _wgs_dlat1 ??= _constructWgsDlat1();
  GeneratedTextColumn _constructWgsDlat1() {
    return GeneratedTextColumn(
      'wgs_dlat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lon1Meta = const VerificationMeta('wgs_lon1');
  GeneratedTextColumn _wgs_lon1;
  @override
  GeneratedTextColumn get wgs_lon1 => _wgs_lon1 ??= _constructWgsLon1();
  GeneratedTextColumn _constructWgsLon1() {
    return GeneratedTextColumn(
      'wgs_lon1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlon1Meta = const VerificationMeta('wgs_dlon1');
  GeneratedTextColumn _wgs_dlon1;
  @override
  GeneratedTextColumn get wgs_dlon1 => _wgs_dlon1 ??= _constructWgsDlon1();
  GeneratedTextColumn _constructWgsDlon1() {
    return GeneratedTextColumn(
      'wgs_dlon1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lat2Meta = const VerificationMeta('wgs_lat2');
  GeneratedTextColumn _wgs_lat2;
  @override
  GeneratedTextColumn get wgs_lat2 => _wgs_lat2 ??= _constructWgsLat2();
  GeneratedTextColumn _constructWgsLat2() {
    return GeneratedTextColumn(
      'wgs_lat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlat2Meta = const VerificationMeta('wgs_dlat2');
  GeneratedTextColumn _wgs_dlat2;
  @override
  GeneratedTextColumn get wgs_dlat2 => _wgs_dlat2 ??= _constructWgsDlat2();
  GeneratedTextColumn _constructWgsDlat2() {
    return GeneratedTextColumn(
      'wgs_dlat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lon2Meta = const VerificationMeta('wgs_lon2');
  GeneratedTextColumn _wgs_lon2;
  @override
  GeneratedTextColumn get wgs_lon2 => _wgs_lon2 ??= _constructWgsLon2();
  GeneratedTextColumn _constructWgsLon2() {
    return GeneratedTextColumn(
      'wgs_lon2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlon2Meta = const VerificationMeta('wgs_dlon2');
  GeneratedTextColumn _wgs_dlon2;
  @override
  GeneratedTextColumn get wgs_dlon2 => _wgs_dlon2 ??= _constructWgsDlon2();
  GeneratedTextColumn _constructWgsDlon2() {
    return GeneratedTextColumn(
      'wgs_dlon2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lat0Meta = const VerificationMeta('wgs_lat0');
  GeneratedTextColumn _wgs_lat0;
  @override
  GeneratedTextColumn get wgs_lat0 => _wgs_lat0 ??= _constructWgsLat0();
  GeneratedTextColumn _constructWgsLat0() {
    return GeneratedTextColumn(
      'wgs_lat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlat0Meta = const VerificationMeta('wgs_dlat0');
  GeneratedTextColumn _wgs_dlat0;
  @override
  GeneratedTextColumn get wgs_dlat0 => _wgs_dlat0 ??= _constructWgsDlat0();
  GeneratedTextColumn _constructWgsDlat0() {
    return GeneratedTextColumn(
      'wgs_dlat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lon0Meta = const VerificationMeta('wgs_lon0');
  GeneratedTextColumn _wgs_lon0;
  @override
  GeneratedTextColumn get wgs_lon0 => _wgs_lon0 ??= _constructWgsLon0();
  GeneratedTextColumn _constructWgsLon0() {
    return GeneratedTextColumn(
      'wgs_lon0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlon0Meta = const VerificationMeta('wgs_dlon0');
  GeneratedTextColumn _wgs_dlon0;
  @override
  GeneratedTextColumn get wgs_dlon0 => _wgs_dlon0 ??= _constructWgsDlon0();
  GeneratedTextColumn _constructWgsDlon0() {
    return GeneratedTextColumn(
      'wgs_dlon0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _radius1Meta = const VerificationMeta('radius1');
  GeneratedTextColumn _radius1;
  @override
  GeneratedTextColumn get radius1 => _radius1 ??= _constructRadius1();
  GeneratedTextColumn _constructRadius1() {
    return GeneratedTextColumn(
      'radius1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _radius2Meta = const VerificationMeta('radius2');
  GeneratedTextColumn _radius2;
  @override
  GeneratedTextColumn get radius2 => _radius2 ??= _constructRadius2();
  GeneratedTextColumn _constructRadius2() {
    return GeneratedTextColumn(
      'radius2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearing1Meta = const VerificationMeta('bearing1');
  GeneratedTextColumn _bearing1;
  @override
  GeneratedTextColumn get bearing1 => _bearing1 ??= _constructBearing1();
  GeneratedTextColumn _constructBearing1() {
    return GeneratedTextColumn(
      'bearing1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearing2Meta = const VerificationMeta('bearing2');
  GeneratedTextColumn _bearing2;
  @override
  GeneratedTextColumn get bearing2 => _bearing2 ??= _constructBearing2();
  GeneratedTextColumn _constructBearing2() {
    return GeneratedTextColumn(
      'bearing2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_identMeta = const VerificationMeta('nav_ident');
  GeneratedTextColumn _nav_ident;
  @override
  GeneratedTextColumn get nav_ident => _nav_ident ??= _constructNavIdent();
  GeneratedTextColumn _constructNavIdent() {
    return GeneratedTextColumn(
      'nav_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_typeMeta = const VerificationMeta('nav_type');
  GeneratedTextColumn _nav_type;
  @override
  GeneratedTextColumn get nav_type => _nav_type ??= _constructNavType();
  GeneratedTextColumn _constructNavType() {
    return GeneratedTextColumn(
      'nav_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_ctryMeta = const VerificationMeta('nav_ctry');
  GeneratedTextColumn _nav_ctry;
  @override
  GeneratedTextColumn get nav_ctry => _nav_ctry ??= _constructNavCtry();
  GeneratedTextColumn _constructNavCtry() {
    return GeneratedTextColumn(
      'nav_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_key_cdMeta = const VerificationMeta('nav_key_cd');
  GeneratedTextColumn _nav_key_cd;
  @override
  GeneratedTextColumn get nav_key_cd => _nav_key_cd ??= _constructNavKeyCd();
  GeneratedTextColumn _constructNavKeyCd() {
    return GeneratedTextColumn(
      'nav_key_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycle_dateMeta = const VerificationMeta('cycle_date');
  GeneratedTextColumn _cycle_date;
  @override
  GeneratedTextColumn get cycle_date => _cycle_date ??= _constructCycleDate();
  GeneratedTextColumn _constructCycleDate() {
    return GeneratedTextColumn(
      'cycle_date',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lat0Meta = const VerificationMeta('lat0');
  GeneratedRealColumn _lat0;
  @override
  GeneratedRealColumn get lat0 => _lat0 ??= _constructLat0();
  GeneratedRealColumn _constructLat0() {
    return GeneratedRealColumn(
      'lat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lon0Meta = const VerificationMeta('lon0');
  GeneratedRealColumn _lon0;
  @override
  GeneratedRealColumn get lon0 => _lon0 ??= _constructLon0();
  GeneratedRealColumn _constructLon0() {
    return GeneratedRealColumn(
      'lon0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lat1Meta = const VerificationMeta('lat1');
  GeneratedRealColumn _lat1;
  @override
  GeneratedRealColumn get lat1 => _lat1 ??= _constructLat1();
  GeneratedRealColumn _constructLat1() {
    return GeneratedRealColumn(
      'lat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lon1Meta = const VerificationMeta('lon1');
  GeneratedRealColumn _lon1;
  @override
  GeneratedRealColumn get lon1 => _lon1 ??= _constructLon1();
  GeneratedRealColumn _constructLon1() {
    return GeneratedRealColumn(
      'lon1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lat2Meta = const VerificationMeta('lat2');
  GeneratedRealColumn _lat2;
  @override
  GeneratedRealColumn get lat2 => _lat2 ??= _constructLat2();
  GeneratedRealColumn _constructLat2() {
    return GeneratedRealColumn(
      'lat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lon2Meta = const VerificationMeta('lon2');
  GeneratedRealColumn _lon2;
  @override
  GeneratedRealColumn get lon2 => _lon2 ??= _constructLon2();
  GeneratedRealColumn _constructLon2() {
    return GeneratedRealColumn(
      'lon2',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        bdry_ident,
        seq_number,
        name,
        type,
        icao,
        shap,
        derivation,
        wgs_lat1,
        wgs_dlat1,
        wgs_lon1,
        wgs_dlon1,
        wgs_lat2,
        wgs_dlat2,
        wgs_lon2,
        wgs_dlon2,
        wgs_lat0,
        wgs_dlat0,
        wgs_lon0,
        wgs_dlon0,
        radius1,
        radius2,
        bearing1,
        bearing2,
        nav_ident,
        nav_type,
        nav_ctry,
        nav_key_cd,
        cycle_date,
        crc32,
        lat0,
        lon0,
        lat1,
        lon1,
        lat2,
        lon2
      ];
  @override
  $DafifBdryTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_bdry';
  @override
  final String actualTableName = 'dafif_bdry';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_bdry> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('bdry_ident')) {
      context.handle(
          _bdry_identMeta,
          bdry_ident.isAcceptableOrUnknown(
              data['bdry_ident'], _bdry_identMeta));
    }
    if (data.containsKey('seq_number')) {
      context.handle(
          _seq_numberMeta,
          seq_number.isAcceptableOrUnknown(
              data['seq_number'], _seq_numberMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('shap')) {
      context.handle(
          _shapMeta, shap.isAcceptableOrUnknown(data['shap'], _shapMeta));
    }
    if (data.containsKey('derivation')) {
      context.handle(
          _derivationMeta,
          derivation.isAcceptableOrUnknown(
              data['derivation'], _derivationMeta));
    }
    if (data.containsKey('wgs_lat1')) {
      context.handle(_wgs_lat1Meta,
          wgs_lat1.isAcceptableOrUnknown(data['wgs_lat1'], _wgs_lat1Meta));
    }
    if (data.containsKey('wgs_dlat1')) {
      context.handle(_wgs_dlat1Meta,
          wgs_dlat1.isAcceptableOrUnknown(data['wgs_dlat1'], _wgs_dlat1Meta));
    }
    if (data.containsKey('wgs_lon1')) {
      context.handle(_wgs_lon1Meta,
          wgs_lon1.isAcceptableOrUnknown(data['wgs_lon1'], _wgs_lon1Meta));
    }
    if (data.containsKey('wgs_dlon1')) {
      context.handle(_wgs_dlon1Meta,
          wgs_dlon1.isAcceptableOrUnknown(data['wgs_dlon1'], _wgs_dlon1Meta));
    }
    if (data.containsKey('wgs_lat2')) {
      context.handle(_wgs_lat2Meta,
          wgs_lat2.isAcceptableOrUnknown(data['wgs_lat2'], _wgs_lat2Meta));
    }
    if (data.containsKey('wgs_dlat2')) {
      context.handle(_wgs_dlat2Meta,
          wgs_dlat2.isAcceptableOrUnknown(data['wgs_dlat2'], _wgs_dlat2Meta));
    }
    if (data.containsKey('wgs_lon2')) {
      context.handle(_wgs_lon2Meta,
          wgs_lon2.isAcceptableOrUnknown(data['wgs_lon2'], _wgs_lon2Meta));
    }
    if (data.containsKey('wgs_dlon2')) {
      context.handle(_wgs_dlon2Meta,
          wgs_dlon2.isAcceptableOrUnknown(data['wgs_dlon2'], _wgs_dlon2Meta));
    }
    if (data.containsKey('wgs_lat0')) {
      context.handle(_wgs_lat0Meta,
          wgs_lat0.isAcceptableOrUnknown(data['wgs_lat0'], _wgs_lat0Meta));
    }
    if (data.containsKey('wgs_dlat0')) {
      context.handle(_wgs_dlat0Meta,
          wgs_dlat0.isAcceptableOrUnknown(data['wgs_dlat0'], _wgs_dlat0Meta));
    }
    if (data.containsKey('wgs_lon0')) {
      context.handle(_wgs_lon0Meta,
          wgs_lon0.isAcceptableOrUnknown(data['wgs_lon0'], _wgs_lon0Meta));
    }
    if (data.containsKey('wgs_dlon0')) {
      context.handle(_wgs_dlon0Meta,
          wgs_dlon0.isAcceptableOrUnknown(data['wgs_dlon0'], _wgs_dlon0Meta));
    }
    if (data.containsKey('radius1')) {
      context.handle(_radius1Meta,
          radius1.isAcceptableOrUnknown(data['radius1'], _radius1Meta));
    }
    if (data.containsKey('radius2')) {
      context.handle(_radius2Meta,
          radius2.isAcceptableOrUnknown(data['radius2'], _radius2Meta));
    }
    if (data.containsKey('bearing1')) {
      context.handle(_bearing1Meta,
          bearing1.isAcceptableOrUnknown(data['bearing1'], _bearing1Meta));
    }
    if (data.containsKey('bearing2')) {
      context.handle(_bearing2Meta,
          bearing2.isAcceptableOrUnknown(data['bearing2'], _bearing2Meta));
    }
    if (data.containsKey('nav_ident')) {
      context.handle(_nav_identMeta,
          nav_ident.isAcceptableOrUnknown(data['nav_ident'], _nav_identMeta));
    }
    if (data.containsKey('nav_type')) {
      context.handle(_nav_typeMeta,
          nav_type.isAcceptableOrUnknown(data['nav_type'], _nav_typeMeta));
    }
    if (data.containsKey('nav_ctry')) {
      context.handle(_nav_ctryMeta,
          nav_ctry.isAcceptableOrUnknown(data['nav_ctry'], _nav_ctryMeta));
    }
    if (data.containsKey('nav_key_cd')) {
      context.handle(
          _nav_key_cdMeta,
          nav_key_cd.isAcceptableOrUnknown(
              data['nav_key_cd'], _nav_key_cdMeta));
    }
    if (data.containsKey('cycle_date')) {
      context.handle(
          _cycle_dateMeta,
          cycle_date.isAcceptableOrUnknown(
              data['cycle_date'], _cycle_dateMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('lat0')) {
      context.handle(
          _lat0Meta, lat0.isAcceptableOrUnknown(data['lat0'], _lat0Meta));
    }
    if (data.containsKey('lon0')) {
      context.handle(
          _lon0Meta, lon0.isAcceptableOrUnknown(data['lon0'], _lon0Meta));
    }
    if (data.containsKey('lat1')) {
      context.handle(
          _lat1Meta, lat1.isAcceptableOrUnknown(data['lat1'], _lat1Meta));
    }
    if (data.containsKey('lon1')) {
      context.handle(
          _lon1Meta, lon1.isAcceptableOrUnknown(data['lon1'], _lon1Meta));
    }
    if (data.containsKey('lat2')) {
      context.handle(
          _lat2Meta, lat2.isAcceptableOrUnknown(data['lat2'], _lat2Meta));
    }
    if (data.containsKey('lon2')) {
      context.handle(
          _lon2Meta, lon2.isAcceptableOrUnknown(data['lon2'], _lon2Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_bdry map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_bdry.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifBdryTable createAlias(String alias) {
    return $DafifBdryTable(_db, alias);
  }
}

class dafif_bdry_par extends DataClass implements Insertable<dafif_bdry_par> {
  final int id;
  final String bdry_ident;
  final String type;
  final String name;
  final String icao;
  final String conauth;
  final String lochdatum;
  final String wgsdatum;
  final String commname;
  final String commfreq1;
  final String commfreq2;
  final String clazz;
  final String classexc;
  final String classexcrmk;
  final String levelinfo;
  final String upperalt;
  final String loweralt;
  final String rnp;
  final String cycle_date;
  final String uprvsm;
  final String lorvsm;
  final int crc32;
  dafif_bdry_par(
      {@required this.id,
      this.bdry_ident,
      this.type,
      this.name,
      this.icao,
      this.conauth,
      this.lochdatum,
      this.wgsdatum,
      this.commname,
      this.commfreq1,
      this.commfreq2,
      this.clazz,
      this.classexc,
      this.classexcrmk,
      this.levelinfo,
      this.upperalt,
      this.loweralt,
      this.rnp,
      this.cycle_date,
      this.uprvsm,
      this.lorvsm,
      this.crc32});
  factory dafif_bdry_par.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_bdry_par(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      bdry_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bdry_ident']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      conauth:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}conauth']),
      lochdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lochdatum']),
      wgsdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdatum']),
      commname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}commname']),
      commfreq1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}commfreq1']),
      commfreq2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}commfreq2']),
      clazz:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}clazz']),
      classexc: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}classexc']),
      classexcrmk: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}classexcrmk']),
      levelinfo: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}levelinfo']),
      upperalt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}upperalt']),
      loweralt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}loweralt']),
      rnp: stringType.mapFromDatabaseResponse(data['${effectivePrefix}rnp']),
      cycle_date: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycle_date']),
      uprvsm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}uprvsm']),
      lorvsm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}lorvsm']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || bdry_ident != null) {
      map['bdry_ident'] = Variable<String>(bdry_ident);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || conauth != null) {
      map['conauth'] = Variable<String>(conauth);
    }
    if (!nullToAbsent || lochdatum != null) {
      map['lochdatum'] = Variable<String>(lochdatum);
    }
    if (!nullToAbsent || wgsdatum != null) {
      map['wgsdatum'] = Variable<String>(wgsdatum);
    }
    if (!nullToAbsent || commname != null) {
      map['commname'] = Variable<String>(commname);
    }
    if (!nullToAbsent || commfreq1 != null) {
      map['commfreq1'] = Variable<String>(commfreq1);
    }
    if (!nullToAbsent || commfreq2 != null) {
      map['commfreq2'] = Variable<String>(commfreq2);
    }
    if (!nullToAbsent || clazz != null) {
      map['clazz'] = Variable<String>(clazz);
    }
    if (!nullToAbsent || classexc != null) {
      map['classexc'] = Variable<String>(classexc);
    }
    if (!nullToAbsent || classexcrmk != null) {
      map['classexcrmk'] = Variable<String>(classexcrmk);
    }
    if (!nullToAbsent || levelinfo != null) {
      map['levelinfo'] = Variable<String>(levelinfo);
    }
    if (!nullToAbsent || upperalt != null) {
      map['upperalt'] = Variable<String>(upperalt);
    }
    if (!nullToAbsent || loweralt != null) {
      map['loweralt'] = Variable<String>(loweralt);
    }
    if (!nullToAbsent || rnp != null) {
      map['rnp'] = Variable<String>(rnp);
    }
    if (!nullToAbsent || cycle_date != null) {
      map['cycle_date'] = Variable<String>(cycle_date);
    }
    if (!nullToAbsent || uprvsm != null) {
      map['uprvsm'] = Variable<String>(uprvsm);
    }
    if (!nullToAbsent || lorvsm != null) {
      map['lorvsm'] = Variable<String>(lorvsm);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_bdry_par.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_bdry_par(
      id: serializer.fromJson<int>(json['id']),
      bdry_ident: serializer.fromJson<String>(json['bdry_ident']),
      type: serializer.fromJson<String>(json['type']),
      name: serializer.fromJson<String>(json['name']),
      icao: serializer.fromJson<String>(json['icao']),
      conauth: serializer.fromJson<String>(json['conauth']),
      lochdatum: serializer.fromJson<String>(json['lochdatum']),
      wgsdatum: serializer.fromJson<String>(json['wgsdatum']),
      commname: serializer.fromJson<String>(json['commname']),
      commfreq1: serializer.fromJson<String>(json['commfreq1']),
      commfreq2: serializer.fromJson<String>(json['commfreq2']),
      clazz: serializer.fromJson<String>(json['clazz']),
      classexc: serializer.fromJson<String>(json['classexc']),
      classexcrmk: serializer.fromJson<String>(json['classexcrmk']),
      levelinfo: serializer.fromJson<String>(json['levelinfo']),
      upperalt: serializer.fromJson<String>(json['upperalt']),
      loweralt: serializer.fromJson<String>(json['loweralt']),
      rnp: serializer.fromJson<String>(json['rnp']),
      cycle_date: serializer.fromJson<String>(json['cycle_date']),
      uprvsm: serializer.fromJson<String>(json['uprvsm']),
      lorvsm: serializer.fromJson<String>(json['lorvsm']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'bdry_ident': serializer.toJson<String>(bdry_ident),
      'type': serializer.toJson<String>(type),
      'name': serializer.toJson<String>(name),
      'icao': serializer.toJson<String>(icao),
      'conauth': serializer.toJson<String>(conauth),
      'lochdatum': serializer.toJson<String>(lochdatum),
      'wgsdatum': serializer.toJson<String>(wgsdatum),
      'commname': serializer.toJson<String>(commname),
      'commfreq1': serializer.toJson<String>(commfreq1),
      'commfreq2': serializer.toJson<String>(commfreq2),
      'clazz': serializer.toJson<String>(clazz),
      'classexc': serializer.toJson<String>(classexc),
      'classexcrmk': serializer.toJson<String>(classexcrmk),
      'levelinfo': serializer.toJson<String>(levelinfo),
      'upperalt': serializer.toJson<String>(upperalt),
      'loweralt': serializer.toJson<String>(loweralt),
      'rnp': serializer.toJson<String>(rnp),
      'cycle_date': serializer.toJson<String>(cycle_date),
      'uprvsm': serializer.toJson<String>(uprvsm),
      'lorvsm': serializer.toJson<String>(lorvsm),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_bdry_par copyWith(
          {int id,
          String bdry_ident,
          String type,
          String name,
          String icao,
          String conauth,
          String lochdatum,
          String wgsdatum,
          String commname,
          String commfreq1,
          String commfreq2,
          String clazz,
          String classexc,
          String classexcrmk,
          String levelinfo,
          String upperalt,
          String loweralt,
          String rnp,
          String cycle_date,
          String uprvsm,
          String lorvsm,
          int crc32}) =>
      dafif_bdry_par(
        id: id ?? this.id,
        bdry_ident: bdry_ident ?? this.bdry_ident,
        type: type ?? this.type,
        name: name ?? this.name,
        icao: icao ?? this.icao,
        conauth: conauth ?? this.conauth,
        lochdatum: lochdatum ?? this.lochdatum,
        wgsdatum: wgsdatum ?? this.wgsdatum,
        commname: commname ?? this.commname,
        commfreq1: commfreq1 ?? this.commfreq1,
        commfreq2: commfreq2 ?? this.commfreq2,
        clazz: clazz ?? this.clazz,
        classexc: classexc ?? this.classexc,
        classexcrmk: classexcrmk ?? this.classexcrmk,
        levelinfo: levelinfo ?? this.levelinfo,
        upperalt: upperalt ?? this.upperalt,
        loweralt: loweralt ?? this.loweralt,
        rnp: rnp ?? this.rnp,
        cycle_date: cycle_date ?? this.cycle_date,
        uprvsm: uprvsm ?? this.uprvsm,
        lorvsm: lorvsm ?? this.lorvsm,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_bdry_par(')
          ..write('id: $id, ')
          ..write('bdry_ident: $bdry_ident, ')
          ..write('type: $type, ')
          ..write('name: $name, ')
          ..write('icao: $icao, ')
          ..write('conauth: $conauth, ')
          ..write('lochdatum: $lochdatum, ')
          ..write('wgsdatum: $wgsdatum, ')
          ..write('commname: $commname, ')
          ..write('commfreq1: $commfreq1, ')
          ..write('commfreq2: $commfreq2, ')
          ..write('clazz: $clazz, ')
          ..write('classexc: $classexc, ')
          ..write('classexcrmk: $classexcrmk, ')
          ..write('levelinfo: $levelinfo, ')
          ..write('upperalt: $upperalt, ')
          ..write('loweralt: $loweralt, ')
          ..write('rnp: $rnp, ')
          ..write('cycle_date: $cycle_date, ')
          ..write('uprvsm: $uprvsm, ')
          ..write('lorvsm: $lorvsm, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          bdry_ident.hashCode,
          $mrjc(
              type.hashCode,
              $mrjc(
                  name.hashCode,
                  $mrjc(
                      icao.hashCode,
                      $mrjc(
                          conauth.hashCode,
                          $mrjc(
                              lochdatum.hashCode,
                              $mrjc(
                                  wgsdatum.hashCode,
                                  $mrjc(
                                      commname.hashCode,
                                      $mrjc(
                                          commfreq1.hashCode,
                                          $mrjc(
                                              commfreq2.hashCode,
                                              $mrjc(
                                                  clazz.hashCode,
                                                  $mrjc(
                                                      classexc.hashCode,
                                                      $mrjc(
                                                          classexcrmk.hashCode,
                                                          $mrjc(
                                                              levelinfo
                                                                  .hashCode,
                                                              $mrjc(
                                                                  upperalt
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      loweralt
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          rnp
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              cycle_date.hashCode,
                                                                              $mrjc(uprvsm.hashCode, $mrjc(lorvsm.hashCode, crc32.hashCode))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_bdry_par &&
          other.id == this.id &&
          other.bdry_ident == this.bdry_ident &&
          other.type == this.type &&
          other.name == this.name &&
          other.icao == this.icao &&
          other.conauth == this.conauth &&
          other.lochdatum == this.lochdatum &&
          other.wgsdatum == this.wgsdatum &&
          other.commname == this.commname &&
          other.commfreq1 == this.commfreq1 &&
          other.commfreq2 == this.commfreq2 &&
          other.clazz == this.clazz &&
          other.classexc == this.classexc &&
          other.classexcrmk == this.classexcrmk &&
          other.levelinfo == this.levelinfo &&
          other.upperalt == this.upperalt &&
          other.loweralt == this.loweralt &&
          other.rnp == this.rnp &&
          other.cycle_date == this.cycle_date &&
          other.uprvsm == this.uprvsm &&
          other.lorvsm == this.lorvsm &&
          other.crc32 == this.crc32);
}

class DafifBdryParCompanion extends UpdateCompanion<dafif_bdry_par> {
  final Value<int> id;
  final Value<String> bdry_ident;
  final Value<String> type;
  final Value<String> name;
  final Value<String> icao;
  final Value<String> conauth;
  final Value<String> lochdatum;
  final Value<String> wgsdatum;
  final Value<String> commname;
  final Value<String> commfreq1;
  final Value<String> commfreq2;
  final Value<String> clazz;
  final Value<String> classexc;
  final Value<String> classexcrmk;
  final Value<String> levelinfo;
  final Value<String> upperalt;
  final Value<String> loweralt;
  final Value<String> rnp;
  final Value<String> cycle_date;
  final Value<String> uprvsm;
  final Value<String> lorvsm;
  final Value<int> crc32;
  const DafifBdryParCompanion({
    this.id = const Value.absent(),
    this.bdry_ident = const Value.absent(),
    this.type = const Value.absent(),
    this.name = const Value.absent(),
    this.icao = const Value.absent(),
    this.conauth = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.commname = const Value.absent(),
    this.commfreq1 = const Value.absent(),
    this.commfreq2 = const Value.absent(),
    this.clazz = const Value.absent(),
    this.classexc = const Value.absent(),
    this.classexcrmk = const Value.absent(),
    this.levelinfo = const Value.absent(),
    this.upperalt = const Value.absent(),
    this.loweralt = const Value.absent(),
    this.rnp = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.uprvsm = const Value.absent(),
    this.lorvsm = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifBdryParCompanion.insert({
    this.id = const Value.absent(),
    this.bdry_ident = const Value.absent(),
    this.type = const Value.absent(),
    this.name = const Value.absent(),
    this.icao = const Value.absent(),
    this.conauth = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.commname = const Value.absent(),
    this.commfreq1 = const Value.absent(),
    this.commfreq2 = const Value.absent(),
    this.clazz = const Value.absent(),
    this.classexc = const Value.absent(),
    this.classexcrmk = const Value.absent(),
    this.levelinfo = const Value.absent(),
    this.upperalt = const Value.absent(),
    this.loweralt = const Value.absent(),
    this.rnp = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.uprvsm = const Value.absent(),
    this.lorvsm = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_bdry_par> custom({
    Expression<int> id,
    Expression<String> bdry_ident,
    Expression<String> type,
    Expression<String> name,
    Expression<String> icao,
    Expression<String> conauth,
    Expression<String> lochdatum,
    Expression<String> wgsdatum,
    Expression<String> commname,
    Expression<String> commfreq1,
    Expression<String> commfreq2,
    Expression<String> clazz,
    Expression<String> classexc,
    Expression<String> classexcrmk,
    Expression<String> levelinfo,
    Expression<String> upperalt,
    Expression<String> loweralt,
    Expression<String> rnp,
    Expression<String> cycle_date,
    Expression<String> uprvsm,
    Expression<String> lorvsm,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (bdry_ident != null) 'bdry_ident': bdry_ident,
      if (type != null) 'type': type,
      if (name != null) 'name': name,
      if (icao != null) 'icao': icao,
      if (conauth != null) 'conauth': conauth,
      if (lochdatum != null) 'lochdatum': lochdatum,
      if (wgsdatum != null) 'wgsdatum': wgsdatum,
      if (commname != null) 'commname': commname,
      if (commfreq1 != null) 'commfreq1': commfreq1,
      if (commfreq2 != null) 'commfreq2': commfreq2,
      if (clazz != null) 'clazz': clazz,
      if (classexc != null) 'classexc': classexc,
      if (classexcrmk != null) 'classexcrmk': classexcrmk,
      if (levelinfo != null) 'levelinfo': levelinfo,
      if (upperalt != null) 'upperalt': upperalt,
      if (loweralt != null) 'loweralt': loweralt,
      if (rnp != null) 'rnp': rnp,
      if (cycle_date != null) 'cycle_date': cycle_date,
      if (uprvsm != null) 'uprvsm': uprvsm,
      if (lorvsm != null) 'lorvsm': lorvsm,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifBdryParCompanion copyWith(
      {Value<int> id,
      Value<String> bdry_ident,
      Value<String> type,
      Value<String> name,
      Value<String> icao,
      Value<String> conauth,
      Value<String> lochdatum,
      Value<String> wgsdatum,
      Value<String> commname,
      Value<String> commfreq1,
      Value<String> commfreq2,
      Value<String> clazz,
      Value<String> classexc,
      Value<String> classexcrmk,
      Value<String> levelinfo,
      Value<String> upperalt,
      Value<String> loweralt,
      Value<String> rnp,
      Value<String> cycle_date,
      Value<String> uprvsm,
      Value<String> lorvsm,
      Value<int> crc32}) {
    return DafifBdryParCompanion(
      id: id ?? this.id,
      bdry_ident: bdry_ident ?? this.bdry_ident,
      type: type ?? this.type,
      name: name ?? this.name,
      icao: icao ?? this.icao,
      conauth: conauth ?? this.conauth,
      lochdatum: lochdatum ?? this.lochdatum,
      wgsdatum: wgsdatum ?? this.wgsdatum,
      commname: commname ?? this.commname,
      commfreq1: commfreq1 ?? this.commfreq1,
      commfreq2: commfreq2 ?? this.commfreq2,
      clazz: clazz ?? this.clazz,
      classexc: classexc ?? this.classexc,
      classexcrmk: classexcrmk ?? this.classexcrmk,
      levelinfo: levelinfo ?? this.levelinfo,
      upperalt: upperalt ?? this.upperalt,
      loweralt: loweralt ?? this.loweralt,
      rnp: rnp ?? this.rnp,
      cycle_date: cycle_date ?? this.cycle_date,
      uprvsm: uprvsm ?? this.uprvsm,
      lorvsm: lorvsm ?? this.lorvsm,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (bdry_ident.present) {
      map['bdry_ident'] = Variable<String>(bdry_ident.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (conauth.present) {
      map['conauth'] = Variable<String>(conauth.value);
    }
    if (lochdatum.present) {
      map['lochdatum'] = Variable<String>(lochdatum.value);
    }
    if (wgsdatum.present) {
      map['wgsdatum'] = Variable<String>(wgsdatum.value);
    }
    if (commname.present) {
      map['commname'] = Variable<String>(commname.value);
    }
    if (commfreq1.present) {
      map['commfreq1'] = Variable<String>(commfreq1.value);
    }
    if (commfreq2.present) {
      map['commfreq2'] = Variable<String>(commfreq2.value);
    }
    if (clazz.present) {
      map['clazz'] = Variable<String>(clazz.value);
    }
    if (classexc.present) {
      map['classexc'] = Variable<String>(classexc.value);
    }
    if (classexcrmk.present) {
      map['classexcrmk'] = Variable<String>(classexcrmk.value);
    }
    if (levelinfo.present) {
      map['levelinfo'] = Variable<String>(levelinfo.value);
    }
    if (upperalt.present) {
      map['upperalt'] = Variable<String>(upperalt.value);
    }
    if (loweralt.present) {
      map['loweralt'] = Variable<String>(loweralt.value);
    }
    if (rnp.present) {
      map['rnp'] = Variable<String>(rnp.value);
    }
    if (cycle_date.present) {
      map['cycle_date'] = Variable<String>(cycle_date.value);
    }
    if (uprvsm.present) {
      map['uprvsm'] = Variable<String>(uprvsm.value);
    }
    if (lorvsm.present) {
      map['lorvsm'] = Variable<String>(lorvsm.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifBdryParTable extends DafifBdryPar
    with TableInfo<$DafifBdryParTable, dafif_bdry_par> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifBdryParTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _bdry_identMeta = const VerificationMeta('bdry_ident');
  GeneratedTextColumn _bdry_ident;
  @override
  GeneratedTextColumn get bdry_ident => _bdry_ident ??= _constructBdryIdent();
  GeneratedTextColumn _constructBdryIdent() {
    return GeneratedTextColumn(
      'bdry_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _conauthMeta = const VerificationMeta('conauth');
  GeneratedTextColumn _conauth;
  @override
  GeneratedTextColumn get conauth => _conauth ??= _constructConauth();
  GeneratedTextColumn _constructConauth() {
    return GeneratedTextColumn(
      'conauth',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lochdatumMeta = const VerificationMeta('lochdatum');
  GeneratedTextColumn _lochdatum;
  @override
  GeneratedTextColumn get lochdatum => _lochdatum ??= _constructLochdatum();
  GeneratedTextColumn _constructLochdatum() {
    return GeneratedTextColumn(
      'lochdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdatumMeta = const VerificationMeta('wgsdatum');
  GeneratedTextColumn _wgsdatum;
  @override
  GeneratedTextColumn get wgsdatum => _wgsdatum ??= _constructWgsdatum();
  GeneratedTextColumn _constructWgsdatum() {
    return GeneratedTextColumn(
      'wgsdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _commnameMeta = const VerificationMeta('commname');
  GeneratedTextColumn _commname;
  @override
  GeneratedTextColumn get commname => _commname ??= _constructCommname();
  GeneratedTextColumn _constructCommname() {
    return GeneratedTextColumn(
      'commname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _commfreq1Meta = const VerificationMeta('commfreq1');
  GeneratedTextColumn _commfreq1;
  @override
  GeneratedTextColumn get commfreq1 => _commfreq1 ??= _constructCommfreq1();
  GeneratedTextColumn _constructCommfreq1() {
    return GeneratedTextColumn(
      'commfreq1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _commfreq2Meta = const VerificationMeta('commfreq2');
  GeneratedTextColumn _commfreq2;
  @override
  GeneratedTextColumn get commfreq2 => _commfreq2 ??= _constructCommfreq2();
  GeneratedTextColumn _constructCommfreq2() {
    return GeneratedTextColumn(
      'commfreq2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _clazzMeta = const VerificationMeta('clazz');
  GeneratedTextColumn _clazz;
  @override
  GeneratedTextColumn get clazz => _clazz ??= _constructClazz();
  GeneratedTextColumn _constructClazz() {
    return GeneratedTextColumn(
      'clazz',
      $tableName,
      true,
    );
  }

  final VerificationMeta _classexcMeta = const VerificationMeta('classexc');
  GeneratedTextColumn _classexc;
  @override
  GeneratedTextColumn get classexc => _classexc ??= _constructClassexc();
  GeneratedTextColumn _constructClassexc() {
    return GeneratedTextColumn(
      'classexc',
      $tableName,
      true,
    );
  }

  final VerificationMeta _classexcrmkMeta =
      const VerificationMeta('classexcrmk');
  GeneratedTextColumn _classexcrmk;
  @override
  GeneratedTextColumn get classexcrmk =>
      _classexcrmk ??= _constructClassexcrmk();
  GeneratedTextColumn _constructClassexcrmk() {
    return GeneratedTextColumn(
      'classexcrmk',
      $tableName,
      true,
    );
  }

  final VerificationMeta _levelinfoMeta = const VerificationMeta('levelinfo');
  GeneratedTextColumn _levelinfo;
  @override
  GeneratedTextColumn get levelinfo => _levelinfo ??= _constructLevelinfo();
  GeneratedTextColumn _constructLevelinfo() {
    return GeneratedTextColumn(
      'levelinfo',
      $tableName,
      true,
    );
  }

  final VerificationMeta _upperaltMeta = const VerificationMeta('upperalt');
  GeneratedTextColumn _upperalt;
  @override
  GeneratedTextColumn get upperalt => _upperalt ??= _constructUpperalt();
  GeneratedTextColumn _constructUpperalt() {
    return GeneratedTextColumn(
      'upperalt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _loweraltMeta = const VerificationMeta('loweralt');
  GeneratedTextColumn _loweralt;
  @override
  GeneratedTextColumn get loweralt => _loweralt ??= _constructLoweralt();
  GeneratedTextColumn _constructLoweralt() {
    return GeneratedTextColumn(
      'loweralt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rnpMeta = const VerificationMeta('rnp');
  GeneratedTextColumn _rnp;
  @override
  GeneratedTextColumn get rnp => _rnp ??= _constructRnp();
  GeneratedTextColumn _constructRnp() {
    return GeneratedTextColumn(
      'rnp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycle_dateMeta = const VerificationMeta('cycle_date');
  GeneratedTextColumn _cycle_date;
  @override
  GeneratedTextColumn get cycle_date => _cycle_date ??= _constructCycleDate();
  GeneratedTextColumn _constructCycleDate() {
    return GeneratedTextColumn(
      'cycle_date',
      $tableName,
      true,
    );
  }

  final VerificationMeta _uprvsmMeta = const VerificationMeta('uprvsm');
  GeneratedTextColumn _uprvsm;
  @override
  GeneratedTextColumn get uprvsm => _uprvsm ??= _constructUprvsm();
  GeneratedTextColumn _constructUprvsm() {
    return GeneratedTextColumn(
      'uprvsm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lorvsmMeta = const VerificationMeta('lorvsm');
  GeneratedTextColumn _lorvsm;
  @override
  GeneratedTextColumn get lorvsm => _lorvsm ??= _constructLorvsm();
  GeneratedTextColumn _constructLorvsm() {
    return GeneratedTextColumn(
      'lorvsm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        bdry_ident,
        type,
        name,
        icao,
        conauth,
        lochdatum,
        wgsdatum,
        commname,
        commfreq1,
        commfreq2,
        clazz,
        classexc,
        classexcrmk,
        levelinfo,
        upperalt,
        loweralt,
        rnp,
        cycle_date,
        uprvsm,
        lorvsm,
        crc32
      ];
  @override
  $DafifBdryParTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_bdry_par';
  @override
  final String actualTableName = 'dafif_bdry_par';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_bdry_par> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('bdry_ident')) {
      context.handle(
          _bdry_identMeta,
          bdry_ident.isAcceptableOrUnknown(
              data['bdry_ident'], _bdry_identMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('conauth')) {
      context.handle(_conauthMeta,
          conauth.isAcceptableOrUnknown(data['conauth'], _conauthMeta));
    }
    if (data.containsKey('lochdatum')) {
      context.handle(_lochdatumMeta,
          lochdatum.isAcceptableOrUnknown(data['lochdatum'], _lochdatumMeta));
    }
    if (data.containsKey('wgsdatum')) {
      context.handle(_wgsdatumMeta,
          wgsdatum.isAcceptableOrUnknown(data['wgsdatum'], _wgsdatumMeta));
    }
    if (data.containsKey('commname')) {
      context.handle(_commnameMeta,
          commname.isAcceptableOrUnknown(data['commname'], _commnameMeta));
    }
    if (data.containsKey('commfreq1')) {
      context.handle(_commfreq1Meta,
          commfreq1.isAcceptableOrUnknown(data['commfreq1'], _commfreq1Meta));
    }
    if (data.containsKey('commfreq2')) {
      context.handle(_commfreq2Meta,
          commfreq2.isAcceptableOrUnknown(data['commfreq2'], _commfreq2Meta));
    }
    if (data.containsKey('clazz')) {
      context.handle(
          _clazzMeta, clazz.isAcceptableOrUnknown(data['clazz'], _clazzMeta));
    }
    if (data.containsKey('classexc')) {
      context.handle(_classexcMeta,
          classexc.isAcceptableOrUnknown(data['classexc'], _classexcMeta));
    }
    if (data.containsKey('classexcrmk')) {
      context.handle(
          _classexcrmkMeta,
          classexcrmk.isAcceptableOrUnknown(
              data['classexcrmk'], _classexcrmkMeta));
    }
    if (data.containsKey('levelinfo')) {
      context.handle(_levelinfoMeta,
          levelinfo.isAcceptableOrUnknown(data['levelinfo'], _levelinfoMeta));
    }
    if (data.containsKey('upperalt')) {
      context.handle(_upperaltMeta,
          upperalt.isAcceptableOrUnknown(data['upperalt'], _upperaltMeta));
    }
    if (data.containsKey('loweralt')) {
      context.handle(_loweraltMeta,
          loweralt.isAcceptableOrUnknown(data['loweralt'], _loweraltMeta));
    }
    if (data.containsKey('rnp')) {
      context.handle(
          _rnpMeta, rnp.isAcceptableOrUnknown(data['rnp'], _rnpMeta));
    }
    if (data.containsKey('cycle_date')) {
      context.handle(
          _cycle_dateMeta,
          cycle_date.isAcceptableOrUnknown(
              data['cycle_date'], _cycle_dateMeta));
    }
    if (data.containsKey('uprvsm')) {
      context.handle(_uprvsmMeta,
          uprvsm.isAcceptableOrUnknown(data['uprvsm'], _uprvsmMeta));
    }
    if (data.containsKey('lorvsm')) {
      context.handle(_lorvsmMeta,
          lorvsm.isAcceptableOrUnknown(data['lorvsm'], _lorvsmMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_bdry_par map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_bdry_par.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifBdryParTable createAlias(String alias) {
    return $DafifBdryParTable(_db, alias);
  }
}

class dafif_communication extends DataClass
    implements Insertable<dafif_communication> {
  final int id;
  final String arptident;
  final String commtype;
  final String commname;
  final String frequency1;
  final String frequency2;
  final String frequency3;
  final String frequency4;
  final String frequency5;
  final String freqtype1;
  final String freqtype2;
  final String freqtype3;
  final String freqtype4;
  final String freqtype5;
  final String sym;
  final String sec;
  final String soprh;
  final String cycledate;
  final String multi;
  final String frequencymulti;
  final String comfrequency1;
  final String comfrequency2;
  final String comfrequency3;
  final String comfrequency4;
  final String comfrequency5;
  final int crc32;
  dafif_communication(
      {@required this.id,
      this.arptident,
      this.commtype,
      this.commname,
      this.frequency1,
      this.frequency2,
      this.frequency3,
      this.frequency4,
      this.frequency5,
      this.freqtype1,
      this.freqtype2,
      this.freqtype3,
      this.freqtype4,
      this.freqtype5,
      this.sym,
      this.sec,
      this.soprh,
      this.cycledate,
      this.multi,
      this.frequencymulti,
      this.comfrequency1,
      this.comfrequency2,
      this.comfrequency3,
      this.comfrequency4,
      this.comfrequency5,
      this.crc32});
  factory dafif_communication.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_communication(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arptident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arptident']),
      commtype: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}commtype']),
      commname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}commname']),
      frequency1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency1']),
      frequency2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency2']),
      frequency3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency3']),
      frequency4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency4']),
      frequency5: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency5']),
      freqtype1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqtype1']),
      freqtype2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqtype2']),
      freqtype3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqtype3']),
      freqtype4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqtype4']),
      freqtype5: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqtype5']),
      sym: stringType.mapFromDatabaseResponse(data['${effectivePrefix}sym']),
      sec: stringType.mapFromDatabaseResponse(data['${effectivePrefix}sec']),
      soprh:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}soprh']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      multi:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}multi']),
      frequencymulti: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}frequencymulti']),
      comfrequency1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comfrequency1']),
      comfrequency2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comfrequency2']),
      comfrequency3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comfrequency3']),
      comfrequency4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comfrequency4']),
      comfrequency5: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comfrequency5']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arptident != null) {
      map['arptident'] = Variable<String>(arptident);
    }
    if (!nullToAbsent || commtype != null) {
      map['commtype'] = Variable<String>(commtype);
    }
    if (!nullToAbsent || commname != null) {
      map['commname'] = Variable<String>(commname);
    }
    if (!nullToAbsent || frequency1 != null) {
      map['frequency1'] = Variable<String>(frequency1);
    }
    if (!nullToAbsent || frequency2 != null) {
      map['frequency2'] = Variable<String>(frequency2);
    }
    if (!nullToAbsent || frequency3 != null) {
      map['frequency3'] = Variable<String>(frequency3);
    }
    if (!nullToAbsent || frequency4 != null) {
      map['frequency4'] = Variable<String>(frequency4);
    }
    if (!nullToAbsent || frequency5 != null) {
      map['frequency5'] = Variable<String>(frequency5);
    }
    if (!nullToAbsent || freqtype1 != null) {
      map['freqtype1'] = Variable<String>(freqtype1);
    }
    if (!nullToAbsent || freqtype2 != null) {
      map['freqtype2'] = Variable<String>(freqtype2);
    }
    if (!nullToAbsent || freqtype3 != null) {
      map['freqtype3'] = Variable<String>(freqtype3);
    }
    if (!nullToAbsent || freqtype4 != null) {
      map['freqtype4'] = Variable<String>(freqtype4);
    }
    if (!nullToAbsent || freqtype5 != null) {
      map['freqtype5'] = Variable<String>(freqtype5);
    }
    if (!nullToAbsent || sym != null) {
      map['sym'] = Variable<String>(sym);
    }
    if (!nullToAbsent || sec != null) {
      map['sec'] = Variable<String>(sec);
    }
    if (!nullToAbsent || soprh != null) {
      map['soprh'] = Variable<String>(soprh);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || multi != null) {
      map['multi'] = Variable<String>(multi);
    }
    if (!nullToAbsent || frequencymulti != null) {
      map['frequencymulti'] = Variable<String>(frequencymulti);
    }
    if (!nullToAbsent || comfrequency1 != null) {
      map['comfrequency1'] = Variable<String>(comfrequency1);
    }
    if (!nullToAbsent || comfrequency2 != null) {
      map['comfrequency2'] = Variable<String>(comfrequency2);
    }
    if (!nullToAbsent || comfrequency3 != null) {
      map['comfrequency3'] = Variable<String>(comfrequency3);
    }
    if (!nullToAbsent || comfrequency4 != null) {
      map['comfrequency4'] = Variable<String>(comfrequency4);
    }
    if (!nullToAbsent || comfrequency5 != null) {
      map['comfrequency5'] = Variable<String>(comfrequency5);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_communication.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_communication(
      id: serializer.fromJson<int>(json['id']),
      arptident: serializer.fromJson<String>(json['arptident']),
      commtype: serializer.fromJson<String>(json['commtype']),
      commname: serializer.fromJson<String>(json['commname']),
      frequency1: serializer.fromJson<String>(json['frequency1']),
      frequency2: serializer.fromJson<String>(json['frequency2']),
      frequency3: serializer.fromJson<String>(json['frequency3']),
      frequency4: serializer.fromJson<String>(json['frequency4']),
      frequency5: serializer.fromJson<String>(json['frequency5']),
      freqtype1: serializer.fromJson<String>(json['freqtype1']),
      freqtype2: serializer.fromJson<String>(json['freqtype2']),
      freqtype3: serializer.fromJson<String>(json['freqtype3']),
      freqtype4: serializer.fromJson<String>(json['freqtype4']),
      freqtype5: serializer.fromJson<String>(json['freqtype5']),
      sym: serializer.fromJson<String>(json['sym']),
      sec: serializer.fromJson<String>(json['sec']),
      soprh: serializer.fromJson<String>(json['soprh']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      multi: serializer.fromJson<String>(json['multi']),
      frequencymulti: serializer.fromJson<String>(json['frequencymulti']),
      comfrequency1: serializer.fromJson<String>(json['comfrequency1']),
      comfrequency2: serializer.fromJson<String>(json['comfrequency2']),
      comfrequency3: serializer.fromJson<String>(json['comfrequency3']),
      comfrequency4: serializer.fromJson<String>(json['comfrequency4']),
      comfrequency5: serializer.fromJson<String>(json['comfrequency5']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arptident': serializer.toJson<String>(arptident),
      'commtype': serializer.toJson<String>(commtype),
      'commname': serializer.toJson<String>(commname),
      'frequency1': serializer.toJson<String>(frequency1),
      'frequency2': serializer.toJson<String>(frequency2),
      'frequency3': serializer.toJson<String>(frequency3),
      'frequency4': serializer.toJson<String>(frequency4),
      'frequency5': serializer.toJson<String>(frequency5),
      'freqtype1': serializer.toJson<String>(freqtype1),
      'freqtype2': serializer.toJson<String>(freqtype2),
      'freqtype3': serializer.toJson<String>(freqtype3),
      'freqtype4': serializer.toJson<String>(freqtype4),
      'freqtype5': serializer.toJson<String>(freqtype5),
      'sym': serializer.toJson<String>(sym),
      'sec': serializer.toJson<String>(sec),
      'soprh': serializer.toJson<String>(soprh),
      'cycledate': serializer.toJson<String>(cycledate),
      'multi': serializer.toJson<String>(multi),
      'frequencymulti': serializer.toJson<String>(frequencymulti),
      'comfrequency1': serializer.toJson<String>(comfrequency1),
      'comfrequency2': serializer.toJson<String>(comfrequency2),
      'comfrequency3': serializer.toJson<String>(comfrequency3),
      'comfrequency4': serializer.toJson<String>(comfrequency4),
      'comfrequency5': serializer.toJson<String>(comfrequency5),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_communication copyWith(
          {int id,
          String arptident,
          String commtype,
          String commname,
          String frequency1,
          String frequency2,
          String frequency3,
          String frequency4,
          String frequency5,
          String freqtype1,
          String freqtype2,
          String freqtype3,
          String freqtype4,
          String freqtype5,
          String sym,
          String sec,
          String soprh,
          String cycledate,
          String multi,
          String frequencymulti,
          String comfrequency1,
          String comfrequency2,
          String comfrequency3,
          String comfrequency4,
          String comfrequency5,
          int crc32}) =>
      dafif_communication(
        id: id ?? this.id,
        arptident: arptident ?? this.arptident,
        commtype: commtype ?? this.commtype,
        commname: commname ?? this.commname,
        frequency1: frequency1 ?? this.frequency1,
        frequency2: frequency2 ?? this.frequency2,
        frequency3: frequency3 ?? this.frequency3,
        frequency4: frequency4 ?? this.frequency4,
        frequency5: frequency5 ?? this.frequency5,
        freqtype1: freqtype1 ?? this.freqtype1,
        freqtype2: freqtype2 ?? this.freqtype2,
        freqtype3: freqtype3 ?? this.freqtype3,
        freqtype4: freqtype4 ?? this.freqtype4,
        freqtype5: freqtype5 ?? this.freqtype5,
        sym: sym ?? this.sym,
        sec: sec ?? this.sec,
        soprh: soprh ?? this.soprh,
        cycledate: cycledate ?? this.cycledate,
        multi: multi ?? this.multi,
        frequencymulti: frequencymulti ?? this.frequencymulti,
        comfrequency1: comfrequency1 ?? this.comfrequency1,
        comfrequency2: comfrequency2 ?? this.comfrequency2,
        comfrequency3: comfrequency3 ?? this.comfrequency3,
        comfrequency4: comfrequency4 ?? this.comfrequency4,
        comfrequency5: comfrequency5 ?? this.comfrequency5,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_communication(')
          ..write('id: $id, ')
          ..write('arptident: $arptident, ')
          ..write('commtype: $commtype, ')
          ..write('commname: $commname, ')
          ..write('frequency1: $frequency1, ')
          ..write('frequency2: $frequency2, ')
          ..write('frequency3: $frequency3, ')
          ..write('frequency4: $frequency4, ')
          ..write('frequency5: $frequency5, ')
          ..write('freqtype1: $freqtype1, ')
          ..write('freqtype2: $freqtype2, ')
          ..write('freqtype3: $freqtype3, ')
          ..write('freqtype4: $freqtype4, ')
          ..write('freqtype5: $freqtype5, ')
          ..write('sym: $sym, ')
          ..write('sec: $sec, ')
          ..write('soprh: $soprh, ')
          ..write('cycledate: $cycledate, ')
          ..write('multi: $multi, ')
          ..write('frequencymulti: $frequencymulti, ')
          ..write('comfrequency1: $comfrequency1, ')
          ..write('comfrequency2: $comfrequency2, ')
          ..write('comfrequency3: $comfrequency3, ')
          ..write('comfrequency4: $comfrequency4, ')
          ..write('comfrequency5: $comfrequency5, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arptident.hashCode,
          $mrjc(
              commtype.hashCode,
              $mrjc(
                  commname.hashCode,
                  $mrjc(
                      frequency1.hashCode,
                      $mrjc(
                          frequency2.hashCode,
                          $mrjc(
                              frequency3.hashCode,
                              $mrjc(
                                  frequency4.hashCode,
                                  $mrjc(
                                      frequency5.hashCode,
                                      $mrjc(
                                          freqtype1.hashCode,
                                          $mrjc(
                                              freqtype2.hashCode,
                                              $mrjc(
                                                  freqtype3.hashCode,
                                                  $mrjc(
                                                      freqtype4.hashCode,
                                                      $mrjc(
                                                          freqtype5.hashCode,
                                                          $mrjc(
                                                              sym.hashCode,
                                                              $mrjc(
                                                                  sec.hashCode,
                                                                  $mrjc(
                                                                      soprh
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          cycledate
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              multi.hashCode,
                                                                              $mrjc(frequencymulti.hashCode, $mrjc(comfrequency1.hashCode, $mrjc(comfrequency2.hashCode, $mrjc(comfrequency3.hashCode, $mrjc(comfrequency4.hashCode, $mrjc(comfrequency5.hashCode, crc32.hashCode))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_communication &&
          other.id == this.id &&
          other.arptident == this.arptident &&
          other.commtype == this.commtype &&
          other.commname == this.commname &&
          other.frequency1 == this.frequency1 &&
          other.frequency2 == this.frequency2 &&
          other.frequency3 == this.frequency3 &&
          other.frequency4 == this.frequency4 &&
          other.frequency5 == this.frequency5 &&
          other.freqtype1 == this.freqtype1 &&
          other.freqtype2 == this.freqtype2 &&
          other.freqtype3 == this.freqtype3 &&
          other.freqtype4 == this.freqtype4 &&
          other.freqtype5 == this.freqtype5 &&
          other.sym == this.sym &&
          other.sec == this.sec &&
          other.soprh == this.soprh &&
          other.cycledate == this.cycledate &&
          other.multi == this.multi &&
          other.frequencymulti == this.frequencymulti &&
          other.comfrequency1 == this.comfrequency1 &&
          other.comfrequency2 == this.comfrequency2 &&
          other.comfrequency3 == this.comfrequency3 &&
          other.comfrequency4 == this.comfrequency4 &&
          other.comfrequency5 == this.comfrequency5 &&
          other.crc32 == this.crc32);
}

class DafifCommunicationCompanion extends UpdateCompanion<dafif_communication> {
  final Value<int> id;
  final Value<String> arptident;
  final Value<String> commtype;
  final Value<String> commname;
  final Value<String> frequency1;
  final Value<String> frequency2;
  final Value<String> frequency3;
  final Value<String> frequency4;
  final Value<String> frequency5;
  final Value<String> freqtype1;
  final Value<String> freqtype2;
  final Value<String> freqtype3;
  final Value<String> freqtype4;
  final Value<String> freqtype5;
  final Value<String> sym;
  final Value<String> sec;
  final Value<String> soprh;
  final Value<String> cycledate;
  final Value<String> multi;
  final Value<String> frequencymulti;
  final Value<String> comfrequency1;
  final Value<String> comfrequency2;
  final Value<String> comfrequency3;
  final Value<String> comfrequency4;
  final Value<String> comfrequency5;
  final Value<int> crc32;
  const DafifCommunicationCompanion({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.commtype = const Value.absent(),
    this.commname = const Value.absent(),
    this.frequency1 = const Value.absent(),
    this.frequency2 = const Value.absent(),
    this.frequency3 = const Value.absent(),
    this.frequency4 = const Value.absent(),
    this.frequency5 = const Value.absent(),
    this.freqtype1 = const Value.absent(),
    this.freqtype2 = const Value.absent(),
    this.freqtype3 = const Value.absent(),
    this.freqtype4 = const Value.absent(),
    this.freqtype5 = const Value.absent(),
    this.sym = const Value.absent(),
    this.sec = const Value.absent(),
    this.soprh = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.multi = const Value.absent(),
    this.frequencymulti = const Value.absent(),
    this.comfrequency1 = const Value.absent(),
    this.comfrequency2 = const Value.absent(),
    this.comfrequency3 = const Value.absent(),
    this.comfrequency4 = const Value.absent(),
    this.comfrequency5 = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifCommunicationCompanion.insert({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.commtype = const Value.absent(),
    this.commname = const Value.absent(),
    this.frequency1 = const Value.absent(),
    this.frequency2 = const Value.absent(),
    this.frequency3 = const Value.absent(),
    this.frequency4 = const Value.absent(),
    this.frequency5 = const Value.absent(),
    this.freqtype1 = const Value.absent(),
    this.freqtype2 = const Value.absent(),
    this.freqtype3 = const Value.absent(),
    this.freqtype4 = const Value.absent(),
    this.freqtype5 = const Value.absent(),
    this.sym = const Value.absent(),
    this.sec = const Value.absent(),
    this.soprh = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.multi = const Value.absent(),
    this.frequencymulti = const Value.absent(),
    this.comfrequency1 = const Value.absent(),
    this.comfrequency2 = const Value.absent(),
    this.comfrequency3 = const Value.absent(),
    this.comfrequency4 = const Value.absent(),
    this.comfrequency5 = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_communication> custom({
    Expression<int> id,
    Expression<String> arptident,
    Expression<String> commtype,
    Expression<String> commname,
    Expression<String> frequency1,
    Expression<String> frequency2,
    Expression<String> frequency3,
    Expression<String> frequency4,
    Expression<String> frequency5,
    Expression<String> freqtype1,
    Expression<String> freqtype2,
    Expression<String> freqtype3,
    Expression<String> freqtype4,
    Expression<String> freqtype5,
    Expression<String> sym,
    Expression<String> sec,
    Expression<String> soprh,
    Expression<String> cycledate,
    Expression<String> multi,
    Expression<String> frequencymulti,
    Expression<String> comfrequency1,
    Expression<String> comfrequency2,
    Expression<String> comfrequency3,
    Expression<String> comfrequency4,
    Expression<String> comfrequency5,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arptident != null) 'arptident': arptident,
      if (commtype != null) 'commtype': commtype,
      if (commname != null) 'commname': commname,
      if (frequency1 != null) 'frequency1': frequency1,
      if (frequency2 != null) 'frequency2': frequency2,
      if (frequency3 != null) 'frequency3': frequency3,
      if (frequency4 != null) 'frequency4': frequency4,
      if (frequency5 != null) 'frequency5': frequency5,
      if (freqtype1 != null) 'freqtype1': freqtype1,
      if (freqtype2 != null) 'freqtype2': freqtype2,
      if (freqtype3 != null) 'freqtype3': freqtype3,
      if (freqtype4 != null) 'freqtype4': freqtype4,
      if (freqtype5 != null) 'freqtype5': freqtype5,
      if (sym != null) 'sym': sym,
      if (sec != null) 'sec': sec,
      if (soprh != null) 'soprh': soprh,
      if (cycledate != null) 'cycledate': cycledate,
      if (multi != null) 'multi': multi,
      if (frequencymulti != null) 'frequencymulti': frequencymulti,
      if (comfrequency1 != null) 'comfrequency1': comfrequency1,
      if (comfrequency2 != null) 'comfrequency2': comfrequency2,
      if (comfrequency3 != null) 'comfrequency3': comfrequency3,
      if (comfrequency4 != null) 'comfrequency4': comfrequency4,
      if (comfrequency5 != null) 'comfrequency5': comfrequency5,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifCommunicationCompanion copyWith(
      {Value<int> id,
      Value<String> arptident,
      Value<String> commtype,
      Value<String> commname,
      Value<String> frequency1,
      Value<String> frequency2,
      Value<String> frequency3,
      Value<String> frequency4,
      Value<String> frequency5,
      Value<String> freqtype1,
      Value<String> freqtype2,
      Value<String> freqtype3,
      Value<String> freqtype4,
      Value<String> freqtype5,
      Value<String> sym,
      Value<String> sec,
      Value<String> soprh,
      Value<String> cycledate,
      Value<String> multi,
      Value<String> frequencymulti,
      Value<String> comfrequency1,
      Value<String> comfrequency2,
      Value<String> comfrequency3,
      Value<String> comfrequency4,
      Value<String> comfrequency5,
      Value<int> crc32}) {
    return DafifCommunicationCompanion(
      id: id ?? this.id,
      arptident: arptident ?? this.arptident,
      commtype: commtype ?? this.commtype,
      commname: commname ?? this.commname,
      frequency1: frequency1 ?? this.frequency1,
      frequency2: frequency2 ?? this.frequency2,
      frequency3: frequency3 ?? this.frequency3,
      frequency4: frequency4 ?? this.frequency4,
      frequency5: frequency5 ?? this.frequency5,
      freqtype1: freqtype1 ?? this.freqtype1,
      freqtype2: freqtype2 ?? this.freqtype2,
      freqtype3: freqtype3 ?? this.freqtype3,
      freqtype4: freqtype4 ?? this.freqtype4,
      freqtype5: freqtype5 ?? this.freqtype5,
      sym: sym ?? this.sym,
      sec: sec ?? this.sec,
      soprh: soprh ?? this.soprh,
      cycledate: cycledate ?? this.cycledate,
      multi: multi ?? this.multi,
      frequencymulti: frequencymulti ?? this.frequencymulti,
      comfrequency1: comfrequency1 ?? this.comfrequency1,
      comfrequency2: comfrequency2 ?? this.comfrequency2,
      comfrequency3: comfrequency3 ?? this.comfrequency3,
      comfrequency4: comfrequency4 ?? this.comfrequency4,
      comfrequency5: comfrequency5 ?? this.comfrequency5,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arptident.present) {
      map['arptident'] = Variable<String>(arptident.value);
    }
    if (commtype.present) {
      map['commtype'] = Variable<String>(commtype.value);
    }
    if (commname.present) {
      map['commname'] = Variable<String>(commname.value);
    }
    if (frequency1.present) {
      map['frequency1'] = Variable<String>(frequency1.value);
    }
    if (frequency2.present) {
      map['frequency2'] = Variable<String>(frequency2.value);
    }
    if (frequency3.present) {
      map['frequency3'] = Variable<String>(frequency3.value);
    }
    if (frequency4.present) {
      map['frequency4'] = Variable<String>(frequency4.value);
    }
    if (frequency5.present) {
      map['frequency5'] = Variable<String>(frequency5.value);
    }
    if (freqtype1.present) {
      map['freqtype1'] = Variable<String>(freqtype1.value);
    }
    if (freqtype2.present) {
      map['freqtype2'] = Variable<String>(freqtype2.value);
    }
    if (freqtype3.present) {
      map['freqtype3'] = Variable<String>(freqtype3.value);
    }
    if (freqtype4.present) {
      map['freqtype4'] = Variable<String>(freqtype4.value);
    }
    if (freqtype5.present) {
      map['freqtype5'] = Variable<String>(freqtype5.value);
    }
    if (sym.present) {
      map['sym'] = Variable<String>(sym.value);
    }
    if (sec.present) {
      map['sec'] = Variable<String>(sec.value);
    }
    if (soprh.present) {
      map['soprh'] = Variable<String>(soprh.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (multi.present) {
      map['multi'] = Variable<String>(multi.value);
    }
    if (frequencymulti.present) {
      map['frequencymulti'] = Variable<String>(frequencymulti.value);
    }
    if (comfrequency1.present) {
      map['comfrequency1'] = Variable<String>(comfrequency1.value);
    }
    if (comfrequency2.present) {
      map['comfrequency2'] = Variable<String>(comfrequency2.value);
    }
    if (comfrequency3.present) {
      map['comfrequency3'] = Variable<String>(comfrequency3.value);
    }
    if (comfrequency4.present) {
      map['comfrequency4'] = Variable<String>(comfrequency4.value);
    }
    if (comfrequency5.present) {
      map['comfrequency5'] = Variable<String>(comfrequency5.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifCommunicationTable extends DafifCommunication
    with TableInfo<$DafifCommunicationTable, dafif_communication> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifCommunicationTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arptidentMeta = const VerificationMeta('arptident');
  GeneratedTextColumn _arptident;
  @override
  GeneratedTextColumn get arptident => _arptident ??= _constructArptident();
  GeneratedTextColumn _constructArptident() {
    return GeneratedTextColumn(
      'arptident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _commtypeMeta = const VerificationMeta('commtype');
  GeneratedTextColumn _commtype;
  @override
  GeneratedTextColumn get commtype => _commtype ??= _constructCommtype();
  GeneratedTextColumn _constructCommtype() {
    return GeneratedTextColumn(
      'commtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _commnameMeta = const VerificationMeta('commname');
  GeneratedTextColumn _commname;
  @override
  GeneratedTextColumn get commname => _commname ??= _constructCommname();
  GeneratedTextColumn _constructCommname() {
    return GeneratedTextColumn(
      'commname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _frequency1Meta = const VerificationMeta('frequency1');
  GeneratedTextColumn _frequency1;
  @override
  GeneratedTextColumn get frequency1 => _frequency1 ??= _constructFrequency1();
  GeneratedTextColumn _constructFrequency1() {
    return GeneratedTextColumn(
      'frequency1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _frequency2Meta = const VerificationMeta('frequency2');
  GeneratedTextColumn _frequency2;
  @override
  GeneratedTextColumn get frequency2 => _frequency2 ??= _constructFrequency2();
  GeneratedTextColumn _constructFrequency2() {
    return GeneratedTextColumn(
      'frequency2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _frequency3Meta = const VerificationMeta('frequency3');
  GeneratedTextColumn _frequency3;
  @override
  GeneratedTextColumn get frequency3 => _frequency3 ??= _constructFrequency3();
  GeneratedTextColumn _constructFrequency3() {
    return GeneratedTextColumn(
      'frequency3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _frequency4Meta = const VerificationMeta('frequency4');
  GeneratedTextColumn _frequency4;
  @override
  GeneratedTextColumn get frequency4 => _frequency4 ??= _constructFrequency4();
  GeneratedTextColumn _constructFrequency4() {
    return GeneratedTextColumn(
      'frequency4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _frequency5Meta = const VerificationMeta('frequency5');
  GeneratedTextColumn _frequency5;
  @override
  GeneratedTextColumn get frequency5 => _frequency5 ??= _constructFrequency5();
  GeneratedTextColumn _constructFrequency5() {
    return GeneratedTextColumn(
      'frequency5',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqtype1Meta = const VerificationMeta('freqtype1');
  GeneratedTextColumn _freqtype1;
  @override
  GeneratedTextColumn get freqtype1 => _freqtype1 ??= _constructFreqtype1();
  GeneratedTextColumn _constructFreqtype1() {
    return GeneratedTextColumn(
      'freqtype1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqtype2Meta = const VerificationMeta('freqtype2');
  GeneratedTextColumn _freqtype2;
  @override
  GeneratedTextColumn get freqtype2 => _freqtype2 ??= _constructFreqtype2();
  GeneratedTextColumn _constructFreqtype2() {
    return GeneratedTextColumn(
      'freqtype2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqtype3Meta = const VerificationMeta('freqtype3');
  GeneratedTextColumn _freqtype3;
  @override
  GeneratedTextColumn get freqtype3 => _freqtype3 ??= _constructFreqtype3();
  GeneratedTextColumn _constructFreqtype3() {
    return GeneratedTextColumn(
      'freqtype3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqtype4Meta = const VerificationMeta('freqtype4');
  GeneratedTextColumn _freqtype4;
  @override
  GeneratedTextColumn get freqtype4 => _freqtype4 ??= _constructFreqtype4();
  GeneratedTextColumn _constructFreqtype4() {
    return GeneratedTextColumn(
      'freqtype4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqtype5Meta = const VerificationMeta('freqtype5');
  GeneratedTextColumn _freqtype5;
  @override
  GeneratedTextColumn get freqtype5 => _freqtype5 ??= _constructFreqtype5();
  GeneratedTextColumn _constructFreqtype5() {
    return GeneratedTextColumn(
      'freqtype5',
      $tableName,
      true,
    );
  }

  final VerificationMeta _symMeta = const VerificationMeta('sym');
  GeneratedTextColumn _sym;
  @override
  GeneratedTextColumn get sym => _sym ??= _constructSym();
  GeneratedTextColumn _constructSym() {
    return GeneratedTextColumn(
      'sym',
      $tableName,
      true,
    );
  }

  final VerificationMeta _secMeta = const VerificationMeta('sec');
  GeneratedTextColumn _sec;
  @override
  GeneratedTextColumn get sec => _sec ??= _constructSec();
  GeneratedTextColumn _constructSec() {
    return GeneratedTextColumn(
      'sec',
      $tableName,
      true,
    );
  }

  final VerificationMeta _soprhMeta = const VerificationMeta('soprh');
  GeneratedTextColumn _soprh;
  @override
  GeneratedTextColumn get soprh => _soprh ??= _constructSoprh();
  GeneratedTextColumn _constructSoprh() {
    return GeneratedTextColumn(
      'soprh',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _multiMeta = const VerificationMeta('multi');
  GeneratedTextColumn _multi;
  @override
  GeneratedTextColumn get multi => _multi ??= _constructMulti();
  GeneratedTextColumn _constructMulti() {
    return GeneratedTextColumn(
      'multi',
      $tableName,
      true,
    );
  }

  final VerificationMeta _frequencymultiMeta =
      const VerificationMeta('frequencymulti');
  GeneratedTextColumn _frequencymulti;
  @override
  GeneratedTextColumn get frequencymulti =>
      _frequencymulti ??= _constructFrequencymulti();
  GeneratedTextColumn _constructFrequencymulti() {
    return GeneratedTextColumn(
      'frequencymulti',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comfrequency1Meta =
      const VerificationMeta('comfrequency1');
  GeneratedTextColumn _comfrequency1;
  @override
  GeneratedTextColumn get comfrequency1 =>
      _comfrequency1 ??= _constructComfrequency1();
  GeneratedTextColumn _constructComfrequency1() {
    return GeneratedTextColumn(
      'comfrequency1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comfrequency2Meta =
      const VerificationMeta('comfrequency2');
  GeneratedTextColumn _comfrequency2;
  @override
  GeneratedTextColumn get comfrequency2 =>
      _comfrequency2 ??= _constructComfrequency2();
  GeneratedTextColumn _constructComfrequency2() {
    return GeneratedTextColumn(
      'comfrequency2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comfrequency3Meta =
      const VerificationMeta('comfrequency3');
  GeneratedTextColumn _comfrequency3;
  @override
  GeneratedTextColumn get comfrequency3 =>
      _comfrequency3 ??= _constructComfrequency3();
  GeneratedTextColumn _constructComfrequency3() {
    return GeneratedTextColumn(
      'comfrequency3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comfrequency4Meta =
      const VerificationMeta('comfrequency4');
  GeneratedTextColumn _comfrequency4;
  @override
  GeneratedTextColumn get comfrequency4 =>
      _comfrequency4 ??= _constructComfrequency4();
  GeneratedTextColumn _constructComfrequency4() {
    return GeneratedTextColumn(
      'comfrequency4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comfrequency5Meta =
      const VerificationMeta('comfrequency5');
  GeneratedTextColumn _comfrequency5;
  @override
  GeneratedTextColumn get comfrequency5 =>
      _comfrequency5 ??= _constructComfrequency5();
  GeneratedTextColumn _constructComfrequency5() {
    return GeneratedTextColumn(
      'comfrequency5',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arptident,
        commtype,
        commname,
        frequency1,
        frequency2,
        frequency3,
        frequency4,
        frequency5,
        freqtype1,
        freqtype2,
        freqtype3,
        freqtype4,
        freqtype5,
        sym,
        sec,
        soprh,
        cycledate,
        multi,
        frequencymulti,
        comfrequency1,
        comfrequency2,
        comfrequency3,
        comfrequency4,
        comfrequency5,
        crc32
      ];
  @override
  $DafifCommunicationTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_communication';
  @override
  final String actualTableName = 'dafif_communication';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_communication> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arptident')) {
      context.handle(_arptidentMeta,
          arptident.isAcceptableOrUnknown(data['arptident'], _arptidentMeta));
    }
    if (data.containsKey('commtype')) {
      context.handle(_commtypeMeta,
          commtype.isAcceptableOrUnknown(data['commtype'], _commtypeMeta));
    }
    if (data.containsKey('commname')) {
      context.handle(_commnameMeta,
          commname.isAcceptableOrUnknown(data['commname'], _commnameMeta));
    }
    if (data.containsKey('frequency1')) {
      context.handle(
          _frequency1Meta,
          frequency1.isAcceptableOrUnknown(
              data['frequency1'], _frequency1Meta));
    }
    if (data.containsKey('frequency2')) {
      context.handle(
          _frequency2Meta,
          frequency2.isAcceptableOrUnknown(
              data['frequency2'], _frequency2Meta));
    }
    if (data.containsKey('frequency3')) {
      context.handle(
          _frequency3Meta,
          frequency3.isAcceptableOrUnknown(
              data['frequency3'], _frequency3Meta));
    }
    if (data.containsKey('frequency4')) {
      context.handle(
          _frequency4Meta,
          frequency4.isAcceptableOrUnknown(
              data['frequency4'], _frequency4Meta));
    }
    if (data.containsKey('frequency5')) {
      context.handle(
          _frequency5Meta,
          frequency5.isAcceptableOrUnknown(
              data['frequency5'], _frequency5Meta));
    }
    if (data.containsKey('freqtype1')) {
      context.handle(_freqtype1Meta,
          freqtype1.isAcceptableOrUnknown(data['freqtype1'], _freqtype1Meta));
    }
    if (data.containsKey('freqtype2')) {
      context.handle(_freqtype2Meta,
          freqtype2.isAcceptableOrUnknown(data['freqtype2'], _freqtype2Meta));
    }
    if (data.containsKey('freqtype3')) {
      context.handle(_freqtype3Meta,
          freqtype3.isAcceptableOrUnknown(data['freqtype3'], _freqtype3Meta));
    }
    if (data.containsKey('freqtype4')) {
      context.handle(_freqtype4Meta,
          freqtype4.isAcceptableOrUnknown(data['freqtype4'], _freqtype4Meta));
    }
    if (data.containsKey('freqtype5')) {
      context.handle(_freqtype5Meta,
          freqtype5.isAcceptableOrUnknown(data['freqtype5'], _freqtype5Meta));
    }
    if (data.containsKey('sym')) {
      context.handle(
          _symMeta, sym.isAcceptableOrUnknown(data['sym'], _symMeta));
    }
    if (data.containsKey('sec')) {
      context.handle(
          _secMeta, sec.isAcceptableOrUnknown(data['sec'], _secMeta));
    }
    if (data.containsKey('soprh')) {
      context.handle(
          _soprhMeta, soprh.isAcceptableOrUnknown(data['soprh'], _soprhMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('multi')) {
      context.handle(
          _multiMeta, multi.isAcceptableOrUnknown(data['multi'], _multiMeta));
    }
    if (data.containsKey('frequencymulti')) {
      context.handle(
          _frequencymultiMeta,
          frequencymulti.isAcceptableOrUnknown(
              data['frequencymulti'], _frequencymultiMeta));
    }
    if (data.containsKey('comfrequency1')) {
      context.handle(
          _comfrequency1Meta,
          comfrequency1.isAcceptableOrUnknown(
              data['comfrequency1'], _comfrequency1Meta));
    }
    if (data.containsKey('comfrequency2')) {
      context.handle(
          _comfrequency2Meta,
          comfrequency2.isAcceptableOrUnknown(
              data['comfrequency2'], _comfrequency2Meta));
    }
    if (data.containsKey('comfrequency3')) {
      context.handle(
          _comfrequency3Meta,
          comfrequency3.isAcceptableOrUnknown(
              data['comfrequency3'], _comfrequency3Meta));
    }
    if (data.containsKey('comfrequency4')) {
      context.handle(
          _comfrequency4Meta,
          comfrequency4.isAcceptableOrUnknown(
              data['comfrequency4'], _comfrequency4Meta));
    }
    if (data.containsKey('comfrequency5')) {
      context.handle(
          _comfrequency5Meta,
          comfrequency5.isAcceptableOrUnknown(
              data['comfrequency5'], _comfrequency5Meta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_communication map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_communication.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifCommunicationTable createAlias(String alias) {
    return $DafifCommunicationTable(_db, alias);
  }
}

class dafif_fir_uir extends DataClass implements Insertable<dafif_fir_uir> {
  final int id;
  final String bdry_ident;
  final String type;
  final String name;
  final String icao;
  final String con_auth;
  final String loc_hdatum;
  final String wgs_datum;
  final String comm_name;
  final String comm_freq1;
  final String comm_freq2;
  final String clazz;
  final String class_exc;
  final String class_exc_rmk;
  final String level_info;
  final String upper_alt;
  final String lower_alt;
  final String rnp;
  final String cycle_date;
  final String up_rvsm;
  final String lo_rvsm;
  final int crc32;
  dafif_fir_uir(
      {@required this.id,
      this.bdry_ident,
      this.type,
      this.name,
      this.icao,
      this.con_auth,
      this.loc_hdatum,
      this.wgs_datum,
      this.comm_name,
      this.comm_freq1,
      this.comm_freq2,
      this.clazz,
      this.class_exc,
      this.class_exc_rmk,
      this.level_info,
      this.upper_alt,
      this.lower_alt,
      this.rnp,
      this.cycle_date,
      this.up_rvsm,
      this.lo_rvsm,
      this.crc32});
  factory dafif_fir_uir.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_fir_uir(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      bdry_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bdry_ident']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      con_auth: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}con_auth']),
      loc_hdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}loc_hdatum']),
      wgs_datum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_datum']),
      comm_name: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comm_name']),
      comm_freq1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comm_freq1']),
      comm_freq2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comm_freq2']),
      clazz:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}clazz']),
      class_exc: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}class_exc']),
      class_exc_rmk: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}class_exc_rmk']),
      level_info: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}level_info']),
      upper_alt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}upper_alt']),
      lower_alt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lower_alt']),
      rnp: stringType.mapFromDatabaseResponse(data['${effectivePrefix}rnp']),
      cycle_date: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycle_date']),
      up_rvsm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}up_rvsm']),
      lo_rvsm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}lo_rvsm']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || bdry_ident != null) {
      map['bdry_ident'] = Variable<String>(bdry_ident);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || con_auth != null) {
      map['con_auth'] = Variable<String>(con_auth);
    }
    if (!nullToAbsent || loc_hdatum != null) {
      map['loc_hdatum'] = Variable<String>(loc_hdatum);
    }
    if (!nullToAbsent || wgs_datum != null) {
      map['wgs_datum'] = Variable<String>(wgs_datum);
    }
    if (!nullToAbsent || comm_name != null) {
      map['comm_name'] = Variable<String>(comm_name);
    }
    if (!nullToAbsent || comm_freq1 != null) {
      map['comm_freq1'] = Variable<String>(comm_freq1);
    }
    if (!nullToAbsent || comm_freq2 != null) {
      map['comm_freq2'] = Variable<String>(comm_freq2);
    }
    if (!nullToAbsent || clazz != null) {
      map['clazz'] = Variable<String>(clazz);
    }
    if (!nullToAbsent || class_exc != null) {
      map['class_exc'] = Variable<String>(class_exc);
    }
    if (!nullToAbsent || class_exc_rmk != null) {
      map['class_exc_rmk'] = Variable<String>(class_exc_rmk);
    }
    if (!nullToAbsent || level_info != null) {
      map['level_info'] = Variable<String>(level_info);
    }
    if (!nullToAbsent || upper_alt != null) {
      map['upper_alt'] = Variable<String>(upper_alt);
    }
    if (!nullToAbsent || lower_alt != null) {
      map['lower_alt'] = Variable<String>(lower_alt);
    }
    if (!nullToAbsent || rnp != null) {
      map['rnp'] = Variable<String>(rnp);
    }
    if (!nullToAbsent || cycle_date != null) {
      map['cycle_date'] = Variable<String>(cycle_date);
    }
    if (!nullToAbsent || up_rvsm != null) {
      map['up_rvsm'] = Variable<String>(up_rvsm);
    }
    if (!nullToAbsent || lo_rvsm != null) {
      map['lo_rvsm'] = Variable<String>(lo_rvsm);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_fir_uir.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_fir_uir(
      id: serializer.fromJson<int>(json['id']),
      bdry_ident: serializer.fromJson<String>(json['bdry_ident']),
      type: serializer.fromJson<String>(json['type']),
      name: serializer.fromJson<String>(json['name']),
      icao: serializer.fromJson<String>(json['icao']),
      con_auth: serializer.fromJson<String>(json['con_auth']),
      loc_hdatum: serializer.fromJson<String>(json['loc_hdatum']),
      wgs_datum: serializer.fromJson<String>(json['wgs_datum']),
      comm_name: serializer.fromJson<String>(json['comm_name']),
      comm_freq1: serializer.fromJson<String>(json['comm_freq1']),
      comm_freq2: serializer.fromJson<String>(json['comm_freq2']),
      clazz: serializer.fromJson<String>(json['clazz']),
      class_exc: serializer.fromJson<String>(json['class_exc']),
      class_exc_rmk: serializer.fromJson<String>(json['class_exc_rmk']),
      level_info: serializer.fromJson<String>(json['level_info']),
      upper_alt: serializer.fromJson<String>(json['upper_alt']),
      lower_alt: serializer.fromJson<String>(json['lower_alt']),
      rnp: serializer.fromJson<String>(json['rnp']),
      cycle_date: serializer.fromJson<String>(json['cycle_date']),
      up_rvsm: serializer.fromJson<String>(json['up_rvsm']),
      lo_rvsm: serializer.fromJson<String>(json['lo_rvsm']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'bdry_ident': serializer.toJson<String>(bdry_ident),
      'type': serializer.toJson<String>(type),
      'name': serializer.toJson<String>(name),
      'icao': serializer.toJson<String>(icao),
      'con_auth': serializer.toJson<String>(con_auth),
      'loc_hdatum': serializer.toJson<String>(loc_hdatum),
      'wgs_datum': serializer.toJson<String>(wgs_datum),
      'comm_name': serializer.toJson<String>(comm_name),
      'comm_freq1': serializer.toJson<String>(comm_freq1),
      'comm_freq2': serializer.toJson<String>(comm_freq2),
      'clazz': serializer.toJson<String>(clazz),
      'class_exc': serializer.toJson<String>(class_exc),
      'class_exc_rmk': serializer.toJson<String>(class_exc_rmk),
      'level_info': serializer.toJson<String>(level_info),
      'upper_alt': serializer.toJson<String>(upper_alt),
      'lower_alt': serializer.toJson<String>(lower_alt),
      'rnp': serializer.toJson<String>(rnp),
      'cycle_date': serializer.toJson<String>(cycle_date),
      'up_rvsm': serializer.toJson<String>(up_rvsm),
      'lo_rvsm': serializer.toJson<String>(lo_rvsm),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_fir_uir copyWith(
          {int id,
          String bdry_ident,
          String type,
          String name,
          String icao,
          String con_auth,
          String loc_hdatum,
          String wgs_datum,
          String comm_name,
          String comm_freq1,
          String comm_freq2,
          String clazz,
          String class_exc,
          String class_exc_rmk,
          String level_info,
          String upper_alt,
          String lower_alt,
          String rnp,
          String cycle_date,
          String up_rvsm,
          String lo_rvsm,
          int crc32}) =>
      dafif_fir_uir(
        id: id ?? this.id,
        bdry_ident: bdry_ident ?? this.bdry_ident,
        type: type ?? this.type,
        name: name ?? this.name,
        icao: icao ?? this.icao,
        con_auth: con_auth ?? this.con_auth,
        loc_hdatum: loc_hdatum ?? this.loc_hdatum,
        wgs_datum: wgs_datum ?? this.wgs_datum,
        comm_name: comm_name ?? this.comm_name,
        comm_freq1: comm_freq1 ?? this.comm_freq1,
        comm_freq2: comm_freq2 ?? this.comm_freq2,
        clazz: clazz ?? this.clazz,
        class_exc: class_exc ?? this.class_exc,
        class_exc_rmk: class_exc_rmk ?? this.class_exc_rmk,
        level_info: level_info ?? this.level_info,
        upper_alt: upper_alt ?? this.upper_alt,
        lower_alt: lower_alt ?? this.lower_alt,
        rnp: rnp ?? this.rnp,
        cycle_date: cycle_date ?? this.cycle_date,
        up_rvsm: up_rvsm ?? this.up_rvsm,
        lo_rvsm: lo_rvsm ?? this.lo_rvsm,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_fir_uir(')
          ..write('id: $id, ')
          ..write('bdry_ident: $bdry_ident, ')
          ..write('type: $type, ')
          ..write('name: $name, ')
          ..write('icao: $icao, ')
          ..write('con_auth: $con_auth, ')
          ..write('loc_hdatum: $loc_hdatum, ')
          ..write('wgs_datum: $wgs_datum, ')
          ..write('comm_name: $comm_name, ')
          ..write('comm_freq1: $comm_freq1, ')
          ..write('comm_freq2: $comm_freq2, ')
          ..write('clazz: $clazz, ')
          ..write('class_exc: $class_exc, ')
          ..write('class_exc_rmk: $class_exc_rmk, ')
          ..write('level_info: $level_info, ')
          ..write('upper_alt: $upper_alt, ')
          ..write('lower_alt: $lower_alt, ')
          ..write('rnp: $rnp, ')
          ..write('cycle_date: $cycle_date, ')
          ..write('up_rvsm: $up_rvsm, ')
          ..write('lo_rvsm: $lo_rvsm, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          bdry_ident.hashCode,
          $mrjc(
              type.hashCode,
              $mrjc(
                  name.hashCode,
                  $mrjc(
                      icao.hashCode,
                      $mrjc(
                          con_auth.hashCode,
                          $mrjc(
                              loc_hdatum.hashCode,
                              $mrjc(
                                  wgs_datum.hashCode,
                                  $mrjc(
                                      comm_name.hashCode,
                                      $mrjc(
                                          comm_freq1.hashCode,
                                          $mrjc(
                                              comm_freq2.hashCode,
                                              $mrjc(
                                                  clazz.hashCode,
                                                  $mrjc(
                                                      class_exc.hashCode,
                                                      $mrjc(
                                                          class_exc_rmk
                                                              .hashCode,
                                                          $mrjc(
                                                              level_info
                                                                  .hashCode,
                                                              $mrjc(
                                                                  upper_alt
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      lower_alt
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          rnp
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              cycle_date.hashCode,
                                                                              $mrjc(up_rvsm.hashCode, $mrjc(lo_rvsm.hashCode, crc32.hashCode))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_fir_uir &&
          other.id == this.id &&
          other.bdry_ident == this.bdry_ident &&
          other.type == this.type &&
          other.name == this.name &&
          other.icao == this.icao &&
          other.con_auth == this.con_auth &&
          other.loc_hdatum == this.loc_hdatum &&
          other.wgs_datum == this.wgs_datum &&
          other.comm_name == this.comm_name &&
          other.comm_freq1 == this.comm_freq1 &&
          other.comm_freq2 == this.comm_freq2 &&
          other.clazz == this.clazz &&
          other.class_exc == this.class_exc &&
          other.class_exc_rmk == this.class_exc_rmk &&
          other.level_info == this.level_info &&
          other.upper_alt == this.upper_alt &&
          other.lower_alt == this.lower_alt &&
          other.rnp == this.rnp &&
          other.cycle_date == this.cycle_date &&
          other.up_rvsm == this.up_rvsm &&
          other.lo_rvsm == this.lo_rvsm &&
          other.crc32 == this.crc32);
}

class DafifFirUirCompanion extends UpdateCompanion<dafif_fir_uir> {
  final Value<int> id;
  final Value<String> bdry_ident;
  final Value<String> type;
  final Value<String> name;
  final Value<String> icao;
  final Value<String> con_auth;
  final Value<String> loc_hdatum;
  final Value<String> wgs_datum;
  final Value<String> comm_name;
  final Value<String> comm_freq1;
  final Value<String> comm_freq2;
  final Value<String> clazz;
  final Value<String> class_exc;
  final Value<String> class_exc_rmk;
  final Value<String> level_info;
  final Value<String> upper_alt;
  final Value<String> lower_alt;
  final Value<String> rnp;
  final Value<String> cycle_date;
  final Value<String> up_rvsm;
  final Value<String> lo_rvsm;
  final Value<int> crc32;
  const DafifFirUirCompanion({
    this.id = const Value.absent(),
    this.bdry_ident = const Value.absent(),
    this.type = const Value.absent(),
    this.name = const Value.absent(),
    this.icao = const Value.absent(),
    this.con_auth = const Value.absent(),
    this.loc_hdatum = const Value.absent(),
    this.wgs_datum = const Value.absent(),
    this.comm_name = const Value.absent(),
    this.comm_freq1 = const Value.absent(),
    this.comm_freq2 = const Value.absent(),
    this.clazz = const Value.absent(),
    this.class_exc = const Value.absent(),
    this.class_exc_rmk = const Value.absent(),
    this.level_info = const Value.absent(),
    this.upper_alt = const Value.absent(),
    this.lower_alt = const Value.absent(),
    this.rnp = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.up_rvsm = const Value.absent(),
    this.lo_rvsm = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifFirUirCompanion.insert({
    this.id = const Value.absent(),
    this.bdry_ident = const Value.absent(),
    this.type = const Value.absent(),
    this.name = const Value.absent(),
    this.icao = const Value.absent(),
    this.con_auth = const Value.absent(),
    this.loc_hdatum = const Value.absent(),
    this.wgs_datum = const Value.absent(),
    this.comm_name = const Value.absent(),
    this.comm_freq1 = const Value.absent(),
    this.comm_freq2 = const Value.absent(),
    this.clazz = const Value.absent(),
    this.class_exc = const Value.absent(),
    this.class_exc_rmk = const Value.absent(),
    this.level_info = const Value.absent(),
    this.upper_alt = const Value.absent(),
    this.lower_alt = const Value.absent(),
    this.rnp = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.up_rvsm = const Value.absent(),
    this.lo_rvsm = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_fir_uir> custom({
    Expression<int> id,
    Expression<String> bdry_ident,
    Expression<String> type,
    Expression<String> name,
    Expression<String> icao,
    Expression<String> con_auth,
    Expression<String> loc_hdatum,
    Expression<String> wgs_datum,
    Expression<String> comm_name,
    Expression<String> comm_freq1,
    Expression<String> comm_freq2,
    Expression<String> clazz,
    Expression<String> class_exc,
    Expression<String> class_exc_rmk,
    Expression<String> level_info,
    Expression<String> upper_alt,
    Expression<String> lower_alt,
    Expression<String> rnp,
    Expression<String> cycle_date,
    Expression<String> up_rvsm,
    Expression<String> lo_rvsm,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (bdry_ident != null) 'bdry_ident': bdry_ident,
      if (type != null) 'type': type,
      if (name != null) 'name': name,
      if (icao != null) 'icao': icao,
      if (con_auth != null) 'con_auth': con_auth,
      if (loc_hdatum != null) 'loc_hdatum': loc_hdatum,
      if (wgs_datum != null) 'wgs_datum': wgs_datum,
      if (comm_name != null) 'comm_name': comm_name,
      if (comm_freq1 != null) 'comm_freq1': comm_freq1,
      if (comm_freq2 != null) 'comm_freq2': comm_freq2,
      if (clazz != null) 'clazz': clazz,
      if (class_exc != null) 'class_exc': class_exc,
      if (class_exc_rmk != null) 'class_exc_rmk': class_exc_rmk,
      if (level_info != null) 'level_info': level_info,
      if (upper_alt != null) 'upper_alt': upper_alt,
      if (lower_alt != null) 'lower_alt': lower_alt,
      if (rnp != null) 'rnp': rnp,
      if (cycle_date != null) 'cycle_date': cycle_date,
      if (up_rvsm != null) 'up_rvsm': up_rvsm,
      if (lo_rvsm != null) 'lo_rvsm': lo_rvsm,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifFirUirCompanion copyWith(
      {Value<int> id,
      Value<String> bdry_ident,
      Value<String> type,
      Value<String> name,
      Value<String> icao,
      Value<String> con_auth,
      Value<String> loc_hdatum,
      Value<String> wgs_datum,
      Value<String> comm_name,
      Value<String> comm_freq1,
      Value<String> comm_freq2,
      Value<String> clazz,
      Value<String> class_exc,
      Value<String> class_exc_rmk,
      Value<String> level_info,
      Value<String> upper_alt,
      Value<String> lower_alt,
      Value<String> rnp,
      Value<String> cycle_date,
      Value<String> up_rvsm,
      Value<String> lo_rvsm,
      Value<int> crc32}) {
    return DafifFirUirCompanion(
      id: id ?? this.id,
      bdry_ident: bdry_ident ?? this.bdry_ident,
      type: type ?? this.type,
      name: name ?? this.name,
      icao: icao ?? this.icao,
      con_auth: con_auth ?? this.con_auth,
      loc_hdatum: loc_hdatum ?? this.loc_hdatum,
      wgs_datum: wgs_datum ?? this.wgs_datum,
      comm_name: comm_name ?? this.comm_name,
      comm_freq1: comm_freq1 ?? this.comm_freq1,
      comm_freq2: comm_freq2 ?? this.comm_freq2,
      clazz: clazz ?? this.clazz,
      class_exc: class_exc ?? this.class_exc,
      class_exc_rmk: class_exc_rmk ?? this.class_exc_rmk,
      level_info: level_info ?? this.level_info,
      upper_alt: upper_alt ?? this.upper_alt,
      lower_alt: lower_alt ?? this.lower_alt,
      rnp: rnp ?? this.rnp,
      cycle_date: cycle_date ?? this.cycle_date,
      up_rvsm: up_rvsm ?? this.up_rvsm,
      lo_rvsm: lo_rvsm ?? this.lo_rvsm,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (bdry_ident.present) {
      map['bdry_ident'] = Variable<String>(bdry_ident.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (con_auth.present) {
      map['con_auth'] = Variable<String>(con_auth.value);
    }
    if (loc_hdatum.present) {
      map['loc_hdatum'] = Variable<String>(loc_hdatum.value);
    }
    if (wgs_datum.present) {
      map['wgs_datum'] = Variable<String>(wgs_datum.value);
    }
    if (comm_name.present) {
      map['comm_name'] = Variable<String>(comm_name.value);
    }
    if (comm_freq1.present) {
      map['comm_freq1'] = Variable<String>(comm_freq1.value);
    }
    if (comm_freq2.present) {
      map['comm_freq2'] = Variable<String>(comm_freq2.value);
    }
    if (clazz.present) {
      map['clazz'] = Variable<String>(clazz.value);
    }
    if (class_exc.present) {
      map['class_exc'] = Variable<String>(class_exc.value);
    }
    if (class_exc_rmk.present) {
      map['class_exc_rmk'] = Variable<String>(class_exc_rmk.value);
    }
    if (level_info.present) {
      map['level_info'] = Variable<String>(level_info.value);
    }
    if (upper_alt.present) {
      map['upper_alt'] = Variable<String>(upper_alt.value);
    }
    if (lower_alt.present) {
      map['lower_alt'] = Variable<String>(lower_alt.value);
    }
    if (rnp.present) {
      map['rnp'] = Variable<String>(rnp.value);
    }
    if (cycle_date.present) {
      map['cycle_date'] = Variable<String>(cycle_date.value);
    }
    if (up_rvsm.present) {
      map['up_rvsm'] = Variable<String>(up_rvsm.value);
    }
    if (lo_rvsm.present) {
      map['lo_rvsm'] = Variable<String>(lo_rvsm.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifFirUirTable extends DafifFirUir
    with TableInfo<$DafifFirUirTable, dafif_fir_uir> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifFirUirTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _bdry_identMeta = const VerificationMeta('bdry_ident');
  GeneratedTextColumn _bdry_ident;
  @override
  GeneratedTextColumn get bdry_ident => _bdry_ident ??= _constructBdryIdent();
  GeneratedTextColumn _constructBdryIdent() {
    return GeneratedTextColumn(
      'bdry_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _con_authMeta = const VerificationMeta('con_auth');
  GeneratedTextColumn _con_auth;
  @override
  GeneratedTextColumn get con_auth => _con_auth ??= _constructConAuth();
  GeneratedTextColumn _constructConAuth() {
    return GeneratedTextColumn(
      'con_auth',
      $tableName,
      true,
    );
  }

  final VerificationMeta _loc_hdatumMeta = const VerificationMeta('loc_hdatum');
  GeneratedTextColumn _loc_hdatum;
  @override
  GeneratedTextColumn get loc_hdatum => _loc_hdatum ??= _constructLocHdatum();
  GeneratedTextColumn _constructLocHdatum() {
    return GeneratedTextColumn(
      'loc_hdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_datumMeta = const VerificationMeta('wgs_datum');
  GeneratedTextColumn _wgs_datum;
  @override
  GeneratedTextColumn get wgs_datum => _wgs_datum ??= _constructWgsDatum();
  GeneratedTextColumn _constructWgsDatum() {
    return GeneratedTextColumn(
      'wgs_datum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comm_nameMeta = const VerificationMeta('comm_name');
  GeneratedTextColumn _comm_name;
  @override
  GeneratedTextColumn get comm_name => _comm_name ??= _constructCommName();
  GeneratedTextColumn _constructCommName() {
    return GeneratedTextColumn(
      'comm_name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comm_freq1Meta = const VerificationMeta('comm_freq1');
  GeneratedTextColumn _comm_freq1;
  @override
  GeneratedTextColumn get comm_freq1 => _comm_freq1 ??= _constructCommFreq1();
  GeneratedTextColumn _constructCommFreq1() {
    return GeneratedTextColumn(
      'comm_freq1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comm_freq2Meta = const VerificationMeta('comm_freq2');
  GeneratedTextColumn _comm_freq2;
  @override
  GeneratedTextColumn get comm_freq2 => _comm_freq2 ??= _constructCommFreq2();
  GeneratedTextColumn _constructCommFreq2() {
    return GeneratedTextColumn(
      'comm_freq2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _clazzMeta = const VerificationMeta('clazz');
  GeneratedTextColumn _clazz;
  @override
  GeneratedTextColumn get clazz => _clazz ??= _constructClazz();
  GeneratedTextColumn _constructClazz() {
    return GeneratedTextColumn(
      'clazz',
      $tableName,
      true,
    );
  }

  final VerificationMeta _class_excMeta = const VerificationMeta('class_exc');
  GeneratedTextColumn _class_exc;
  @override
  GeneratedTextColumn get class_exc => _class_exc ??= _constructClassExc();
  GeneratedTextColumn _constructClassExc() {
    return GeneratedTextColumn(
      'class_exc',
      $tableName,
      true,
    );
  }

  final VerificationMeta _class_exc_rmkMeta =
      const VerificationMeta('class_exc_rmk');
  GeneratedTextColumn _class_exc_rmk;
  @override
  GeneratedTextColumn get class_exc_rmk =>
      _class_exc_rmk ??= _constructClassExcRmk();
  GeneratedTextColumn _constructClassExcRmk() {
    return GeneratedTextColumn(
      'class_exc_rmk',
      $tableName,
      true,
    );
  }

  final VerificationMeta _level_infoMeta = const VerificationMeta('level_info');
  GeneratedTextColumn _level_info;
  @override
  GeneratedTextColumn get level_info => _level_info ??= _constructLevelInfo();
  GeneratedTextColumn _constructLevelInfo() {
    return GeneratedTextColumn(
      'level_info',
      $tableName,
      true,
    );
  }

  final VerificationMeta _upper_altMeta = const VerificationMeta('upper_alt');
  GeneratedTextColumn _upper_alt;
  @override
  GeneratedTextColumn get upper_alt => _upper_alt ??= _constructUpperAlt();
  GeneratedTextColumn _constructUpperAlt() {
    return GeneratedTextColumn(
      'upper_alt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lower_altMeta = const VerificationMeta('lower_alt');
  GeneratedTextColumn _lower_alt;
  @override
  GeneratedTextColumn get lower_alt => _lower_alt ??= _constructLowerAlt();
  GeneratedTextColumn _constructLowerAlt() {
    return GeneratedTextColumn(
      'lower_alt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rnpMeta = const VerificationMeta('rnp');
  GeneratedTextColumn _rnp;
  @override
  GeneratedTextColumn get rnp => _rnp ??= _constructRnp();
  GeneratedTextColumn _constructRnp() {
    return GeneratedTextColumn(
      'rnp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycle_dateMeta = const VerificationMeta('cycle_date');
  GeneratedTextColumn _cycle_date;
  @override
  GeneratedTextColumn get cycle_date => _cycle_date ??= _constructCycleDate();
  GeneratedTextColumn _constructCycleDate() {
    return GeneratedTextColumn(
      'cycle_date',
      $tableName,
      true,
    );
  }

  final VerificationMeta _up_rvsmMeta = const VerificationMeta('up_rvsm');
  GeneratedTextColumn _up_rvsm;
  @override
  GeneratedTextColumn get up_rvsm => _up_rvsm ??= _constructUpRvsm();
  GeneratedTextColumn _constructUpRvsm() {
    return GeneratedTextColumn(
      'up_rvsm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lo_rvsmMeta = const VerificationMeta('lo_rvsm');
  GeneratedTextColumn _lo_rvsm;
  @override
  GeneratedTextColumn get lo_rvsm => _lo_rvsm ??= _constructLoRvsm();
  GeneratedTextColumn _constructLoRvsm() {
    return GeneratedTextColumn(
      'lo_rvsm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        bdry_ident,
        type,
        name,
        icao,
        con_auth,
        loc_hdatum,
        wgs_datum,
        comm_name,
        comm_freq1,
        comm_freq2,
        clazz,
        class_exc,
        class_exc_rmk,
        level_info,
        upper_alt,
        lower_alt,
        rnp,
        cycle_date,
        up_rvsm,
        lo_rvsm,
        crc32
      ];
  @override
  $DafifFirUirTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_fir_uir';
  @override
  final String actualTableName = 'dafif_fir_uir';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_fir_uir> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('bdry_ident')) {
      context.handle(
          _bdry_identMeta,
          bdry_ident.isAcceptableOrUnknown(
              data['bdry_ident'], _bdry_identMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('con_auth')) {
      context.handle(_con_authMeta,
          con_auth.isAcceptableOrUnknown(data['con_auth'], _con_authMeta));
    }
    if (data.containsKey('loc_hdatum')) {
      context.handle(
          _loc_hdatumMeta,
          loc_hdatum.isAcceptableOrUnknown(
              data['loc_hdatum'], _loc_hdatumMeta));
    }
    if (data.containsKey('wgs_datum')) {
      context.handle(_wgs_datumMeta,
          wgs_datum.isAcceptableOrUnknown(data['wgs_datum'], _wgs_datumMeta));
    }
    if (data.containsKey('comm_name')) {
      context.handle(_comm_nameMeta,
          comm_name.isAcceptableOrUnknown(data['comm_name'], _comm_nameMeta));
    }
    if (data.containsKey('comm_freq1')) {
      context.handle(
          _comm_freq1Meta,
          comm_freq1.isAcceptableOrUnknown(
              data['comm_freq1'], _comm_freq1Meta));
    }
    if (data.containsKey('comm_freq2')) {
      context.handle(
          _comm_freq2Meta,
          comm_freq2.isAcceptableOrUnknown(
              data['comm_freq2'], _comm_freq2Meta));
    }
    if (data.containsKey('clazz')) {
      context.handle(
          _clazzMeta, clazz.isAcceptableOrUnknown(data['clazz'], _clazzMeta));
    }
    if (data.containsKey('class_exc')) {
      context.handle(_class_excMeta,
          class_exc.isAcceptableOrUnknown(data['class_exc'], _class_excMeta));
    }
    if (data.containsKey('class_exc_rmk')) {
      context.handle(
          _class_exc_rmkMeta,
          class_exc_rmk.isAcceptableOrUnknown(
              data['class_exc_rmk'], _class_exc_rmkMeta));
    }
    if (data.containsKey('level_info')) {
      context.handle(
          _level_infoMeta,
          level_info.isAcceptableOrUnknown(
              data['level_info'], _level_infoMeta));
    }
    if (data.containsKey('upper_alt')) {
      context.handle(_upper_altMeta,
          upper_alt.isAcceptableOrUnknown(data['upper_alt'], _upper_altMeta));
    }
    if (data.containsKey('lower_alt')) {
      context.handle(_lower_altMeta,
          lower_alt.isAcceptableOrUnknown(data['lower_alt'], _lower_altMeta));
    }
    if (data.containsKey('rnp')) {
      context.handle(
          _rnpMeta, rnp.isAcceptableOrUnknown(data['rnp'], _rnpMeta));
    }
    if (data.containsKey('cycle_date')) {
      context.handle(
          _cycle_dateMeta,
          cycle_date.isAcceptableOrUnknown(
              data['cycle_date'], _cycle_dateMeta));
    }
    if (data.containsKey('up_rvsm')) {
      context.handle(_up_rvsmMeta,
          up_rvsm.isAcceptableOrUnknown(data['up_rvsm'], _up_rvsmMeta));
    }
    if (data.containsKey('lo_rvsm')) {
      context.handle(_lo_rvsmMeta,
          lo_rvsm.isAcceptableOrUnknown(data['lo_rvsm'], _lo_rvsmMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_fir_uir map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_fir_uir.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifFirUirTable createAlias(String alias) {
    return $DafifFirUirTable(_db, alias);
  }
}

class dafif_holding extends DataClass implements Insertable<dafif_holding> {
  final int id;
  final String alt_one;
  final String alt_two;
  final String cycle_date;
  final String dup;
  final String icao;
  final String inb_crs;
  final String length;
  final String nav_ctry;
  final String nav_ident;
  final String nav_key_cd;
  final String nav_type;
  final String speed;
  final String time;
  final String track_cd;
  final String wpt_ctry;
  final String wpt_id;
  dafif_holding(
      {@required this.id,
      this.alt_one,
      this.alt_two,
      this.cycle_date,
      this.dup,
      this.icao,
      this.inb_crs,
      this.length,
      this.nav_ctry,
      this.nav_ident,
      this.nav_key_cd,
      this.nav_type,
      this.speed,
      this.time,
      this.track_cd,
      this.wpt_ctry,
      this.wpt_id});
  factory dafif_holding.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_holding(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      alt_one:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}alt_one']),
      alt_two:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}alt_two']),
      cycle_date: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycle_date']),
      dup: stringType.mapFromDatabaseResponse(data['${effectivePrefix}dup']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      inb_crs:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}inb_crs']),
      length:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}length']),
      nav_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_ctry']),
      nav_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_ident']),
      nav_key_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_key_cd']),
      nav_type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_type']),
      speed:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}speed']),
      time: stringType.mapFromDatabaseResponse(data['${effectivePrefix}time']),
      track_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}track_cd']),
      wpt_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_ctry']),
      wpt_id:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wpt_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || alt_one != null) {
      map['alt_one'] = Variable<String>(alt_one);
    }
    if (!nullToAbsent || alt_two != null) {
      map['alt_two'] = Variable<String>(alt_two);
    }
    if (!nullToAbsent || cycle_date != null) {
      map['cycle_date'] = Variable<String>(cycle_date);
    }
    if (!nullToAbsent || dup != null) {
      map['dup'] = Variable<String>(dup);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || inb_crs != null) {
      map['inb_crs'] = Variable<String>(inb_crs);
    }
    if (!nullToAbsent || length != null) {
      map['length'] = Variable<String>(length);
    }
    if (!nullToAbsent || nav_ctry != null) {
      map['nav_ctry'] = Variable<String>(nav_ctry);
    }
    if (!nullToAbsent || nav_ident != null) {
      map['nav_ident'] = Variable<String>(nav_ident);
    }
    if (!nullToAbsent || nav_key_cd != null) {
      map['nav_key_cd'] = Variable<String>(nav_key_cd);
    }
    if (!nullToAbsent || nav_type != null) {
      map['nav_type'] = Variable<String>(nav_type);
    }
    if (!nullToAbsent || speed != null) {
      map['speed'] = Variable<String>(speed);
    }
    if (!nullToAbsent || time != null) {
      map['time'] = Variable<String>(time);
    }
    if (!nullToAbsent || track_cd != null) {
      map['track_cd'] = Variable<String>(track_cd);
    }
    if (!nullToAbsent || wpt_ctry != null) {
      map['wpt_ctry'] = Variable<String>(wpt_ctry);
    }
    if (!nullToAbsent || wpt_id != null) {
      map['wpt_id'] = Variable<String>(wpt_id);
    }
    return map;
  }

  factory dafif_holding.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_holding(
      id: serializer.fromJson<int>(json['id']),
      alt_one: serializer.fromJson<String>(json['alt_one']),
      alt_two: serializer.fromJson<String>(json['alt_two']),
      cycle_date: serializer.fromJson<String>(json['cycle_date']),
      dup: serializer.fromJson<String>(json['dup']),
      icao: serializer.fromJson<String>(json['icao']),
      inb_crs: serializer.fromJson<String>(json['inb_crs']),
      length: serializer.fromJson<String>(json['length']),
      nav_ctry: serializer.fromJson<String>(json['nav_ctry']),
      nav_ident: serializer.fromJson<String>(json['nav_ident']),
      nav_key_cd: serializer.fromJson<String>(json['nav_key_cd']),
      nav_type: serializer.fromJson<String>(json['nav_type']),
      speed: serializer.fromJson<String>(json['speed']),
      time: serializer.fromJson<String>(json['time']),
      track_cd: serializer.fromJson<String>(json['track_cd']),
      wpt_ctry: serializer.fromJson<String>(json['wpt_ctry']),
      wpt_id: serializer.fromJson<String>(json['wpt_id']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'alt_one': serializer.toJson<String>(alt_one),
      'alt_two': serializer.toJson<String>(alt_two),
      'cycle_date': serializer.toJson<String>(cycle_date),
      'dup': serializer.toJson<String>(dup),
      'icao': serializer.toJson<String>(icao),
      'inb_crs': serializer.toJson<String>(inb_crs),
      'length': serializer.toJson<String>(length),
      'nav_ctry': serializer.toJson<String>(nav_ctry),
      'nav_ident': serializer.toJson<String>(nav_ident),
      'nav_key_cd': serializer.toJson<String>(nav_key_cd),
      'nav_type': serializer.toJson<String>(nav_type),
      'speed': serializer.toJson<String>(speed),
      'time': serializer.toJson<String>(time),
      'track_cd': serializer.toJson<String>(track_cd),
      'wpt_ctry': serializer.toJson<String>(wpt_ctry),
      'wpt_id': serializer.toJson<String>(wpt_id),
    };
  }

  dafif_holding copyWith(
          {int id,
          String alt_one,
          String alt_two,
          String cycle_date,
          String dup,
          String icao,
          String inb_crs,
          String length,
          String nav_ctry,
          String nav_ident,
          String nav_key_cd,
          String nav_type,
          String speed,
          String time,
          String track_cd,
          String wpt_ctry,
          String wpt_id}) =>
      dafif_holding(
        id: id ?? this.id,
        alt_one: alt_one ?? this.alt_one,
        alt_two: alt_two ?? this.alt_two,
        cycle_date: cycle_date ?? this.cycle_date,
        dup: dup ?? this.dup,
        icao: icao ?? this.icao,
        inb_crs: inb_crs ?? this.inb_crs,
        length: length ?? this.length,
        nav_ctry: nav_ctry ?? this.nav_ctry,
        nav_ident: nav_ident ?? this.nav_ident,
        nav_key_cd: nav_key_cd ?? this.nav_key_cd,
        nav_type: nav_type ?? this.nav_type,
        speed: speed ?? this.speed,
        time: time ?? this.time,
        track_cd: track_cd ?? this.track_cd,
        wpt_ctry: wpt_ctry ?? this.wpt_ctry,
        wpt_id: wpt_id ?? this.wpt_id,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_holding(')
          ..write('id: $id, ')
          ..write('alt_one: $alt_one, ')
          ..write('alt_two: $alt_two, ')
          ..write('cycle_date: $cycle_date, ')
          ..write('dup: $dup, ')
          ..write('icao: $icao, ')
          ..write('inb_crs: $inb_crs, ')
          ..write('length: $length, ')
          ..write('nav_ctry: $nav_ctry, ')
          ..write('nav_ident: $nav_ident, ')
          ..write('nav_key_cd: $nav_key_cd, ')
          ..write('nav_type: $nav_type, ')
          ..write('speed: $speed, ')
          ..write('time: $time, ')
          ..write('track_cd: $track_cd, ')
          ..write('wpt_ctry: $wpt_ctry, ')
          ..write('wpt_id: $wpt_id')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          alt_one.hashCode,
          $mrjc(
              alt_two.hashCode,
              $mrjc(
                  cycle_date.hashCode,
                  $mrjc(
                      dup.hashCode,
                      $mrjc(
                          icao.hashCode,
                          $mrjc(
                              inb_crs.hashCode,
                              $mrjc(
                                  length.hashCode,
                                  $mrjc(
                                      nav_ctry.hashCode,
                                      $mrjc(
                                          nav_ident.hashCode,
                                          $mrjc(
                                              nav_key_cd.hashCode,
                                              $mrjc(
                                                  nav_type.hashCode,
                                                  $mrjc(
                                                      speed.hashCode,
                                                      $mrjc(
                                                          time.hashCode,
                                                          $mrjc(
                                                              track_cd.hashCode,
                                                              $mrjc(
                                                                  wpt_ctry
                                                                      .hashCode,
                                                                  wpt_id
                                                                      .hashCode)))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_holding &&
          other.id == this.id &&
          other.alt_one == this.alt_one &&
          other.alt_two == this.alt_two &&
          other.cycle_date == this.cycle_date &&
          other.dup == this.dup &&
          other.icao == this.icao &&
          other.inb_crs == this.inb_crs &&
          other.length == this.length &&
          other.nav_ctry == this.nav_ctry &&
          other.nav_ident == this.nav_ident &&
          other.nav_key_cd == this.nav_key_cd &&
          other.nav_type == this.nav_type &&
          other.speed == this.speed &&
          other.time == this.time &&
          other.track_cd == this.track_cd &&
          other.wpt_ctry == this.wpt_ctry &&
          other.wpt_id == this.wpt_id);
}

class DafifHoldingCompanion extends UpdateCompanion<dafif_holding> {
  final Value<int> id;
  final Value<String> alt_one;
  final Value<String> alt_two;
  final Value<String> cycle_date;
  final Value<String> dup;
  final Value<String> icao;
  final Value<String> inb_crs;
  final Value<String> length;
  final Value<String> nav_ctry;
  final Value<String> nav_ident;
  final Value<String> nav_key_cd;
  final Value<String> nav_type;
  final Value<String> speed;
  final Value<String> time;
  final Value<String> track_cd;
  final Value<String> wpt_ctry;
  final Value<String> wpt_id;
  const DafifHoldingCompanion({
    this.id = const Value.absent(),
    this.alt_one = const Value.absent(),
    this.alt_two = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.dup = const Value.absent(),
    this.icao = const Value.absent(),
    this.inb_crs = const Value.absent(),
    this.length = const Value.absent(),
    this.nav_ctry = const Value.absent(),
    this.nav_ident = const Value.absent(),
    this.nav_key_cd = const Value.absent(),
    this.nav_type = const Value.absent(),
    this.speed = const Value.absent(),
    this.time = const Value.absent(),
    this.track_cd = const Value.absent(),
    this.wpt_ctry = const Value.absent(),
    this.wpt_id = const Value.absent(),
  });
  DafifHoldingCompanion.insert({
    this.id = const Value.absent(),
    this.alt_one = const Value.absent(),
    this.alt_two = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.dup = const Value.absent(),
    this.icao = const Value.absent(),
    this.inb_crs = const Value.absent(),
    this.length = const Value.absent(),
    this.nav_ctry = const Value.absent(),
    this.nav_ident = const Value.absent(),
    this.nav_key_cd = const Value.absent(),
    this.nav_type = const Value.absent(),
    this.speed = const Value.absent(),
    this.time = const Value.absent(),
    this.track_cd = const Value.absent(),
    this.wpt_ctry = const Value.absent(),
    this.wpt_id = const Value.absent(),
  });
  static Insertable<dafif_holding> custom({
    Expression<int> id,
    Expression<String> alt_one,
    Expression<String> alt_two,
    Expression<String> cycle_date,
    Expression<String> dup,
    Expression<String> icao,
    Expression<String> inb_crs,
    Expression<String> length,
    Expression<String> nav_ctry,
    Expression<String> nav_ident,
    Expression<String> nav_key_cd,
    Expression<String> nav_type,
    Expression<String> speed,
    Expression<String> time,
    Expression<String> track_cd,
    Expression<String> wpt_ctry,
    Expression<String> wpt_id,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (alt_one != null) 'alt_one': alt_one,
      if (alt_two != null) 'alt_two': alt_two,
      if (cycle_date != null) 'cycle_date': cycle_date,
      if (dup != null) 'dup': dup,
      if (icao != null) 'icao': icao,
      if (inb_crs != null) 'inb_crs': inb_crs,
      if (length != null) 'length': length,
      if (nav_ctry != null) 'nav_ctry': nav_ctry,
      if (nav_ident != null) 'nav_ident': nav_ident,
      if (nav_key_cd != null) 'nav_key_cd': nav_key_cd,
      if (nav_type != null) 'nav_type': nav_type,
      if (speed != null) 'speed': speed,
      if (time != null) 'time': time,
      if (track_cd != null) 'track_cd': track_cd,
      if (wpt_ctry != null) 'wpt_ctry': wpt_ctry,
      if (wpt_id != null) 'wpt_id': wpt_id,
    });
  }

  DafifHoldingCompanion copyWith(
      {Value<int> id,
      Value<String> alt_one,
      Value<String> alt_two,
      Value<String> cycle_date,
      Value<String> dup,
      Value<String> icao,
      Value<String> inb_crs,
      Value<String> length,
      Value<String> nav_ctry,
      Value<String> nav_ident,
      Value<String> nav_key_cd,
      Value<String> nav_type,
      Value<String> speed,
      Value<String> time,
      Value<String> track_cd,
      Value<String> wpt_ctry,
      Value<String> wpt_id}) {
    return DafifHoldingCompanion(
      id: id ?? this.id,
      alt_one: alt_one ?? this.alt_one,
      alt_two: alt_two ?? this.alt_two,
      cycle_date: cycle_date ?? this.cycle_date,
      dup: dup ?? this.dup,
      icao: icao ?? this.icao,
      inb_crs: inb_crs ?? this.inb_crs,
      length: length ?? this.length,
      nav_ctry: nav_ctry ?? this.nav_ctry,
      nav_ident: nav_ident ?? this.nav_ident,
      nav_key_cd: nav_key_cd ?? this.nav_key_cd,
      nav_type: nav_type ?? this.nav_type,
      speed: speed ?? this.speed,
      time: time ?? this.time,
      track_cd: track_cd ?? this.track_cd,
      wpt_ctry: wpt_ctry ?? this.wpt_ctry,
      wpt_id: wpt_id ?? this.wpt_id,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (alt_one.present) {
      map['alt_one'] = Variable<String>(alt_one.value);
    }
    if (alt_two.present) {
      map['alt_two'] = Variable<String>(alt_two.value);
    }
    if (cycle_date.present) {
      map['cycle_date'] = Variable<String>(cycle_date.value);
    }
    if (dup.present) {
      map['dup'] = Variable<String>(dup.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (inb_crs.present) {
      map['inb_crs'] = Variable<String>(inb_crs.value);
    }
    if (length.present) {
      map['length'] = Variable<String>(length.value);
    }
    if (nav_ctry.present) {
      map['nav_ctry'] = Variable<String>(nav_ctry.value);
    }
    if (nav_ident.present) {
      map['nav_ident'] = Variable<String>(nav_ident.value);
    }
    if (nav_key_cd.present) {
      map['nav_key_cd'] = Variable<String>(nav_key_cd.value);
    }
    if (nav_type.present) {
      map['nav_type'] = Variable<String>(nav_type.value);
    }
    if (speed.present) {
      map['speed'] = Variable<String>(speed.value);
    }
    if (time.present) {
      map['time'] = Variable<String>(time.value);
    }
    if (track_cd.present) {
      map['track_cd'] = Variable<String>(track_cd.value);
    }
    if (wpt_ctry.present) {
      map['wpt_ctry'] = Variable<String>(wpt_ctry.value);
    }
    if (wpt_id.present) {
      map['wpt_id'] = Variable<String>(wpt_id.value);
    }
    return map;
  }
}

class $DafifHoldingTable extends DafifHolding
    with TableInfo<$DafifHoldingTable, dafif_holding> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifHoldingTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _alt_oneMeta = const VerificationMeta('alt_one');
  GeneratedTextColumn _alt_one;
  @override
  GeneratedTextColumn get alt_one => _alt_one ??= _constructAltOne();
  GeneratedTextColumn _constructAltOne() {
    return GeneratedTextColumn(
      'alt_one',
      $tableName,
      true,
    );
  }

  final VerificationMeta _alt_twoMeta = const VerificationMeta('alt_two');
  GeneratedTextColumn _alt_two;
  @override
  GeneratedTextColumn get alt_two => _alt_two ??= _constructAltTwo();
  GeneratedTextColumn _constructAltTwo() {
    return GeneratedTextColumn(
      'alt_two',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycle_dateMeta = const VerificationMeta('cycle_date');
  GeneratedTextColumn _cycle_date;
  @override
  GeneratedTextColumn get cycle_date => _cycle_date ??= _constructCycleDate();
  GeneratedTextColumn _constructCycleDate() {
    return GeneratedTextColumn(
      'cycle_date',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dupMeta = const VerificationMeta('dup');
  GeneratedTextColumn _dup;
  @override
  GeneratedTextColumn get dup => _dup ??= _constructDup();
  GeneratedTextColumn _constructDup() {
    return GeneratedTextColumn(
      'dup',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _inb_crsMeta = const VerificationMeta('inb_crs');
  GeneratedTextColumn _inb_crs;
  @override
  GeneratedTextColumn get inb_crs => _inb_crs ??= _constructInbCrs();
  GeneratedTextColumn _constructInbCrs() {
    return GeneratedTextColumn(
      'inb_crs',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lengthMeta = const VerificationMeta('length');
  GeneratedTextColumn _length;
  @override
  GeneratedTextColumn get length => _length ??= _constructLength();
  GeneratedTextColumn _constructLength() {
    return GeneratedTextColumn(
      'length',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_ctryMeta = const VerificationMeta('nav_ctry');
  GeneratedTextColumn _nav_ctry;
  @override
  GeneratedTextColumn get nav_ctry => _nav_ctry ??= _constructNavCtry();
  GeneratedTextColumn _constructNavCtry() {
    return GeneratedTextColumn(
      'nav_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_identMeta = const VerificationMeta('nav_ident');
  GeneratedTextColumn _nav_ident;
  @override
  GeneratedTextColumn get nav_ident => _nav_ident ??= _constructNavIdent();
  GeneratedTextColumn _constructNavIdent() {
    return GeneratedTextColumn(
      'nav_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_key_cdMeta = const VerificationMeta('nav_key_cd');
  GeneratedTextColumn _nav_key_cd;
  @override
  GeneratedTextColumn get nav_key_cd => _nav_key_cd ??= _constructNavKeyCd();
  GeneratedTextColumn _constructNavKeyCd() {
    return GeneratedTextColumn(
      'nav_key_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_typeMeta = const VerificationMeta('nav_type');
  GeneratedTextColumn _nav_type;
  @override
  GeneratedTextColumn get nav_type => _nav_type ??= _constructNavType();
  GeneratedTextColumn _constructNavType() {
    return GeneratedTextColumn(
      'nav_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speedMeta = const VerificationMeta('speed');
  GeneratedTextColumn _speed;
  @override
  GeneratedTextColumn get speed => _speed ??= _constructSpeed();
  GeneratedTextColumn _constructSpeed() {
    return GeneratedTextColumn(
      'speed',
      $tableName,
      true,
    );
  }

  final VerificationMeta _timeMeta = const VerificationMeta('time');
  GeneratedTextColumn _time;
  @override
  GeneratedTextColumn get time => _time ??= _constructTime();
  GeneratedTextColumn _constructTime() {
    return GeneratedTextColumn(
      'time',
      $tableName,
      true,
    );
  }

  final VerificationMeta _track_cdMeta = const VerificationMeta('track_cd');
  GeneratedTextColumn _track_cd;
  @override
  GeneratedTextColumn get track_cd => _track_cd ??= _constructTrackCd();
  GeneratedTextColumn _constructTrackCd() {
    return GeneratedTextColumn(
      'track_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_ctryMeta = const VerificationMeta('wpt_ctry');
  GeneratedTextColumn _wpt_ctry;
  @override
  GeneratedTextColumn get wpt_ctry => _wpt_ctry ??= _constructWptCtry();
  GeneratedTextColumn _constructWptCtry() {
    return GeneratedTextColumn(
      'wpt_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_idMeta = const VerificationMeta('wpt_id');
  GeneratedTextColumn _wpt_id;
  @override
  GeneratedTextColumn get wpt_id => _wpt_id ??= _constructWptId();
  GeneratedTextColumn _constructWptId() {
    return GeneratedTextColumn(
      'wpt_id',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        alt_one,
        alt_two,
        cycle_date,
        dup,
        icao,
        inb_crs,
        length,
        nav_ctry,
        nav_ident,
        nav_key_cd,
        nav_type,
        speed,
        time,
        track_cd,
        wpt_ctry,
        wpt_id
      ];
  @override
  $DafifHoldingTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_holding';
  @override
  final String actualTableName = 'dafif_holding';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_holding> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('alt_one')) {
      context.handle(_alt_oneMeta,
          alt_one.isAcceptableOrUnknown(data['alt_one'], _alt_oneMeta));
    }
    if (data.containsKey('alt_two')) {
      context.handle(_alt_twoMeta,
          alt_two.isAcceptableOrUnknown(data['alt_two'], _alt_twoMeta));
    }
    if (data.containsKey('cycle_date')) {
      context.handle(
          _cycle_dateMeta,
          cycle_date.isAcceptableOrUnknown(
              data['cycle_date'], _cycle_dateMeta));
    }
    if (data.containsKey('dup')) {
      context.handle(
          _dupMeta, dup.isAcceptableOrUnknown(data['dup'], _dupMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('inb_crs')) {
      context.handle(_inb_crsMeta,
          inb_crs.isAcceptableOrUnknown(data['inb_crs'], _inb_crsMeta));
    }
    if (data.containsKey('length')) {
      context.handle(_lengthMeta,
          length.isAcceptableOrUnknown(data['length'], _lengthMeta));
    }
    if (data.containsKey('nav_ctry')) {
      context.handle(_nav_ctryMeta,
          nav_ctry.isAcceptableOrUnknown(data['nav_ctry'], _nav_ctryMeta));
    }
    if (data.containsKey('nav_ident')) {
      context.handle(_nav_identMeta,
          nav_ident.isAcceptableOrUnknown(data['nav_ident'], _nav_identMeta));
    }
    if (data.containsKey('nav_key_cd')) {
      context.handle(
          _nav_key_cdMeta,
          nav_key_cd.isAcceptableOrUnknown(
              data['nav_key_cd'], _nav_key_cdMeta));
    }
    if (data.containsKey('nav_type')) {
      context.handle(_nav_typeMeta,
          nav_type.isAcceptableOrUnknown(data['nav_type'], _nav_typeMeta));
    }
    if (data.containsKey('speed')) {
      context.handle(
          _speedMeta, speed.isAcceptableOrUnknown(data['speed'], _speedMeta));
    }
    if (data.containsKey('time')) {
      context.handle(
          _timeMeta, time.isAcceptableOrUnknown(data['time'], _timeMeta));
    }
    if (data.containsKey('track_cd')) {
      context.handle(_track_cdMeta,
          track_cd.isAcceptableOrUnknown(data['track_cd'], _track_cdMeta));
    }
    if (data.containsKey('wpt_ctry')) {
      context.handle(_wpt_ctryMeta,
          wpt_ctry.isAcceptableOrUnknown(data['wpt_ctry'], _wpt_ctryMeta));
    }
    if (data.containsKey('wpt_id')) {
      context.handle(_wpt_idMeta,
          wpt_id.isAcceptableOrUnknown(data['wpt_id'], _wpt_idMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_holding map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_holding.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifHoldingTable createAlias(String alias) {
    return $DafifHoldingTable(_db, alias);
  }
}

class dafif_icao_region extends DataClass
    implements Insertable<dafif_icao_region> {
  final int id;
  final String bdryident;
  final String seqnbr;
  final String name;
  final String type;
  final String icao;
  final String shap;
  final String derivation;
  final String wgslat1;
  final String wgsdlat1;
  final String wgslong1;
  final String wgsdlong1;
  final String wgslat2;
  final String wgsdlat2;
  final String wgslong2;
  final String wgsdlong2;
  final String wgslat0;
  final String wgsdlat0;
  final String wgslong0;
  final String wgsdlong0;
  final String radius1;
  final String radius2;
  final String bearing1;
  final String bearing2;
  final String navident;
  final String navtype;
  final String navctry;
  final String navkeycd;
  final String cycledate;
  dafif_icao_region(
      {@required this.id,
      this.bdryident,
      this.seqnbr,
      this.name,
      this.type,
      this.icao,
      this.shap,
      this.derivation,
      this.wgslat1,
      this.wgsdlat1,
      this.wgslong1,
      this.wgsdlong1,
      this.wgslat2,
      this.wgsdlat2,
      this.wgslong2,
      this.wgsdlong2,
      this.wgslat0,
      this.wgsdlat0,
      this.wgslong0,
      this.wgsdlong0,
      this.radius1,
      this.radius2,
      this.bearing1,
      this.bearing2,
      this.navident,
      this.navtype,
      this.navctry,
      this.navkeycd,
      this.cycledate});
  factory dafif_icao_region.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_icao_region(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      bdryident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bdryident']),
      seqnbr:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}seqnbr']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      shap: stringType.mapFromDatabaseResponse(data['${effectivePrefix}shap']),
      derivation: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}derivation']),
      wgslat1:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat1']),
      wgsdlat1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat1']),
      wgslong1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgslong1']),
      wgsdlong1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong1']),
      wgslat2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat2']),
      wgsdlat2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat2']),
      wgslong2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgslong2']),
      wgsdlong2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong2']),
      wgslat0:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat0']),
      wgsdlat0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat0']),
      wgslong0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgslong0']),
      wgsdlong0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong0']),
      radius1:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}radius1']),
      radius2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}radius2']),
      bearing1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bearing1']),
      bearing2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bearing2']),
      navident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navident']),
      navtype:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navtype']),
      navctry:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navctry']),
      navkeycd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navkeycd']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || bdryident != null) {
      map['bdryident'] = Variable<String>(bdryident);
    }
    if (!nullToAbsent || seqnbr != null) {
      map['seqnbr'] = Variable<String>(seqnbr);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || shap != null) {
      map['shap'] = Variable<String>(shap);
    }
    if (!nullToAbsent || derivation != null) {
      map['derivation'] = Variable<String>(derivation);
    }
    if (!nullToAbsent || wgslat1 != null) {
      map['wgslat1'] = Variable<String>(wgslat1);
    }
    if (!nullToAbsent || wgsdlat1 != null) {
      map['wgsdlat1'] = Variable<String>(wgsdlat1);
    }
    if (!nullToAbsent || wgslong1 != null) {
      map['wgslong1'] = Variable<String>(wgslong1);
    }
    if (!nullToAbsent || wgsdlong1 != null) {
      map['wgsdlong1'] = Variable<String>(wgsdlong1);
    }
    if (!nullToAbsent || wgslat2 != null) {
      map['wgslat2'] = Variable<String>(wgslat2);
    }
    if (!nullToAbsent || wgsdlat2 != null) {
      map['wgsdlat2'] = Variable<String>(wgsdlat2);
    }
    if (!nullToAbsent || wgslong2 != null) {
      map['wgslong2'] = Variable<String>(wgslong2);
    }
    if (!nullToAbsent || wgsdlong2 != null) {
      map['wgsdlong2'] = Variable<String>(wgsdlong2);
    }
    if (!nullToAbsent || wgslat0 != null) {
      map['wgslat0'] = Variable<String>(wgslat0);
    }
    if (!nullToAbsent || wgsdlat0 != null) {
      map['wgsdlat0'] = Variable<String>(wgsdlat0);
    }
    if (!nullToAbsent || wgslong0 != null) {
      map['wgslong0'] = Variable<String>(wgslong0);
    }
    if (!nullToAbsent || wgsdlong0 != null) {
      map['wgsdlong0'] = Variable<String>(wgsdlong0);
    }
    if (!nullToAbsent || radius1 != null) {
      map['radius1'] = Variable<String>(radius1);
    }
    if (!nullToAbsent || radius2 != null) {
      map['radius2'] = Variable<String>(radius2);
    }
    if (!nullToAbsent || bearing1 != null) {
      map['bearing1'] = Variable<String>(bearing1);
    }
    if (!nullToAbsent || bearing2 != null) {
      map['bearing2'] = Variable<String>(bearing2);
    }
    if (!nullToAbsent || navident != null) {
      map['navident'] = Variable<String>(navident);
    }
    if (!nullToAbsent || navtype != null) {
      map['navtype'] = Variable<String>(navtype);
    }
    if (!nullToAbsent || navctry != null) {
      map['navctry'] = Variable<String>(navctry);
    }
    if (!nullToAbsent || navkeycd != null) {
      map['navkeycd'] = Variable<String>(navkeycd);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    return map;
  }

  factory dafif_icao_region.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_icao_region(
      id: serializer.fromJson<int>(json['id']),
      bdryident: serializer.fromJson<String>(json['bdryident']),
      seqnbr: serializer.fromJson<String>(json['seqnbr']),
      name: serializer.fromJson<String>(json['name']),
      type: serializer.fromJson<String>(json['type']),
      icao: serializer.fromJson<String>(json['icao']),
      shap: serializer.fromJson<String>(json['shap']),
      derivation: serializer.fromJson<String>(json['derivation']),
      wgslat1: serializer.fromJson<String>(json['wgslat1']),
      wgsdlat1: serializer.fromJson<String>(json['wgsdlat1']),
      wgslong1: serializer.fromJson<String>(json['wgslong1']),
      wgsdlong1: serializer.fromJson<String>(json['wgsdlong1']),
      wgslat2: serializer.fromJson<String>(json['wgslat2']),
      wgsdlat2: serializer.fromJson<String>(json['wgsdlat2']),
      wgslong2: serializer.fromJson<String>(json['wgslong2']),
      wgsdlong2: serializer.fromJson<String>(json['wgsdlong2']),
      wgslat0: serializer.fromJson<String>(json['wgslat0']),
      wgsdlat0: serializer.fromJson<String>(json['wgsdlat0']),
      wgslong0: serializer.fromJson<String>(json['wgslong0']),
      wgsdlong0: serializer.fromJson<String>(json['wgsdlong0']),
      radius1: serializer.fromJson<String>(json['radius1']),
      radius2: serializer.fromJson<String>(json['radius2']),
      bearing1: serializer.fromJson<String>(json['bearing1']),
      bearing2: serializer.fromJson<String>(json['bearing2']),
      navident: serializer.fromJson<String>(json['navident']),
      navtype: serializer.fromJson<String>(json['navtype']),
      navctry: serializer.fromJson<String>(json['navctry']),
      navkeycd: serializer.fromJson<String>(json['navkeycd']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'bdryident': serializer.toJson<String>(bdryident),
      'seqnbr': serializer.toJson<String>(seqnbr),
      'name': serializer.toJson<String>(name),
      'type': serializer.toJson<String>(type),
      'icao': serializer.toJson<String>(icao),
      'shap': serializer.toJson<String>(shap),
      'derivation': serializer.toJson<String>(derivation),
      'wgslat1': serializer.toJson<String>(wgslat1),
      'wgsdlat1': serializer.toJson<String>(wgsdlat1),
      'wgslong1': serializer.toJson<String>(wgslong1),
      'wgsdlong1': serializer.toJson<String>(wgsdlong1),
      'wgslat2': serializer.toJson<String>(wgslat2),
      'wgsdlat2': serializer.toJson<String>(wgsdlat2),
      'wgslong2': serializer.toJson<String>(wgslong2),
      'wgsdlong2': serializer.toJson<String>(wgsdlong2),
      'wgslat0': serializer.toJson<String>(wgslat0),
      'wgsdlat0': serializer.toJson<String>(wgsdlat0),
      'wgslong0': serializer.toJson<String>(wgslong0),
      'wgsdlong0': serializer.toJson<String>(wgsdlong0),
      'radius1': serializer.toJson<String>(radius1),
      'radius2': serializer.toJson<String>(radius2),
      'bearing1': serializer.toJson<String>(bearing1),
      'bearing2': serializer.toJson<String>(bearing2),
      'navident': serializer.toJson<String>(navident),
      'navtype': serializer.toJson<String>(navtype),
      'navctry': serializer.toJson<String>(navctry),
      'navkeycd': serializer.toJson<String>(navkeycd),
      'cycledate': serializer.toJson<String>(cycledate),
    };
  }

  dafif_icao_region copyWith(
          {int id,
          String bdryident,
          String seqnbr,
          String name,
          String type,
          String icao,
          String shap,
          String derivation,
          String wgslat1,
          String wgsdlat1,
          String wgslong1,
          String wgsdlong1,
          String wgslat2,
          String wgsdlat2,
          String wgslong2,
          String wgsdlong2,
          String wgslat0,
          String wgsdlat0,
          String wgslong0,
          String wgsdlong0,
          String radius1,
          String radius2,
          String bearing1,
          String bearing2,
          String navident,
          String navtype,
          String navctry,
          String navkeycd,
          String cycledate}) =>
      dafif_icao_region(
        id: id ?? this.id,
        bdryident: bdryident ?? this.bdryident,
        seqnbr: seqnbr ?? this.seqnbr,
        name: name ?? this.name,
        type: type ?? this.type,
        icao: icao ?? this.icao,
        shap: shap ?? this.shap,
        derivation: derivation ?? this.derivation,
        wgslat1: wgslat1 ?? this.wgslat1,
        wgsdlat1: wgsdlat1 ?? this.wgsdlat1,
        wgslong1: wgslong1 ?? this.wgslong1,
        wgsdlong1: wgsdlong1 ?? this.wgsdlong1,
        wgslat2: wgslat2 ?? this.wgslat2,
        wgsdlat2: wgsdlat2 ?? this.wgsdlat2,
        wgslong2: wgslong2 ?? this.wgslong2,
        wgsdlong2: wgsdlong2 ?? this.wgsdlong2,
        wgslat0: wgslat0 ?? this.wgslat0,
        wgsdlat0: wgsdlat0 ?? this.wgsdlat0,
        wgslong0: wgslong0 ?? this.wgslong0,
        wgsdlong0: wgsdlong0 ?? this.wgsdlong0,
        radius1: radius1 ?? this.radius1,
        radius2: radius2 ?? this.radius2,
        bearing1: bearing1 ?? this.bearing1,
        bearing2: bearing2 ?? this.bearing2,
        navident: navident ?? this.navident,
        navtype: navtype ?? this.navtype,
        navctry: navctry ?? this.navctry,
        navkeycd: navkeycd ?? this.navkeycd,
        cycledate: cycledate ?? this.cycledate,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_icao_region(')
          ..write('id: $id, ')
          ..write('bdryident: $bdryident, ')
          ..write('seqnbr: $seqnbr, ')
          ..write('name: $name, ')
          ..write('type: $type, ')
          ..write('icao: $icao, ')
          ..write('shap: $shap, ')
          ..write('derivation: $derivation, ')
          ..write('wgslat1: $wgslat1, ')
          ..write('wgsdlat1: $wgsdlat1, ')
          ..write('wgslong1: $wgslong1, ')
          ..write('wgsdlong1: $wgsdlong1, ')
          ..write('wgslat2: $wgslat2, ')
          ..write('wgsdlat2: $wgsdlat2, ')
          ..write('wgslong2: $wgslong2, ')
          ..write('wgsdlong2: $wgsdlong2, ')
          ..write('wgslat0: $wgslat0, ')
          ..write('wgsdlat0: $wgsdlat0, ')
          ..write('wgslong0: $wgslong0, ')
          ..write('wgsdlong0: $wgsdlong0, ')
          ..write('radius1: $radius1, ')
          ..write('radius2: $radius2, ')
          ..write('bearing1: $bearing1, ')
          ..write('bearing2: $bearing2, ')
          ..write('navident: $navident, ')
          ..write('navtype: $navtype, ')
          ..write('navctry: $navctry, ')
          ..write('navkeycd: $navkeycd, ')
          ..write('cycledate: $cycledate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          bdryident.hashCode,
          $mrjc(
              seqnbr.hashCode,
              $mrjc(
                  name.hashCode,
                  $mrjc(
                      type.hashCode,
                      $mrjc(
                          icao.hashCode,
                          $mrjc(
                              shap.hashCode,
                              $mrjc(
                                  derivation.hashCode,
                                  $mrjc(
                                      wgslat1.hashCode,
                                      $mrjc(
                                          wgsdlat1.hashCode,
                                          $mrjc(
                                              wgslong1.hashCode,
                                              $mrjc(
                                                  wgsdlong1.hashCode,
                                                  $mrjc(
                                                      wgslat2.hashCode,
                                                      $mrjc(
                                                          wgsdlat2.hashCode,
                                                          $mrjc(
                                                              wgslong2.hashCode,
                                                              $mrjc(
                                                                  wgsdlong2
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      wgslat0
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          wgsdlat0
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              wgslong0.hashCode,
                                                                              $mrjc(wgsdlong0.hashCode, $mrjc(radius1.hashCode, $mrjc(radius2.hashCode, $mrjc(bearing1.hashCode, $mrjc(bearing2.hashCode, $mrjc(navident.hashCode, $mrjc(navtype.hashCode, $mrjc(navctry.hashCode, $mrjc(navkeycd.hashCode, cycledate.hashCode)))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_icao_region &&
          other.id == this.id &&
          other.bdryident == this.bdryident &&
          other.seqnbr == this.seqnbr &&
          other.name == this.name &&
          other.type == this.type &&
          other.icao == this.icao &&
          other.shap == this.shap &&
          other.derivation == this.derivation &&
          other.wgslat1 == this.wgslat1 &&
          other.wgsdlat1 == this.wgsdlat1 &&
          other.wgslong1 == this.wgslong1 &&
          other.wgsdlong1 == this.wgsdlong1 &&
          other.wgslat2 == this.wgslat2 &&
          other.wgsdlat2 == this.wgsdlat2 &&
          other.wgslong2 == this.wgslong2 &&
          other.wgsdlong2 == this.wgsdlong2 &&
          other.wgslat0 == this.wgslat0 &&
          other.wgsdlat0 == this.wgsdlat0 &&
          other.wgslong0 == this.wgslong0 &&
          other.wgsdlong0 == this.wgsdlong0 &&
          other.radius1 == this.radius1 &&
          other.radius2 == this.radius2 &&
          other.bearing1 == this.bearing1 &&
          other.bearing2 == this.bearing2 &&
          other.navident == this.navident &&
          other.navtype == this.navtype &&
          other.navctry == this.navctry &&
          other.navkeycd == this.navkeycd &&
          other.cycledate == this.cycledate);
}

class DafifIcaoRegionCompanion extends UpdateCompanion<dafif_icao_region> {
  final Value<int> id;
  final Value<String> bdryident;
  final Value<String> seqnbr;
  final Value<String> name;
  final Value<String> type;
  final Value<String> icao;
  final Value<String> shap;
  final Value<String> derivation;
  final Value<String> wgslat1;
  final Value<String> wgsdlat1;
  final Value<String> wgslong1;
  final Value<String> wgsdlong1;
  final Value<String> wgslat2;
  final Value<String> wgsdlat2;
  final Value<String> wgslong2;
  final Value<String> wgsdlong2;
  final Value<String> wgslat0;
  final Value<String> wgsdlat0;
  final Value<String> wgslong0;
  final Value<String> wgsdlong0;
  final Value<String> radius1;
  final Value<String> radius2;
  final Value<String> bearing1;
  final Value<String> bearing2;
  final Value<String> navident;
  final Value<String> navtype;
  final Value<String> navctry;
  final Value<String> navkeycd;
  final Value<String> cycledate;
  const DafifIcaoRegionCompanion({
    this.id = const Value.absent(),
    this.bdryident = const Value.absent(),
    this.seqnbr = const Value.absent(),
    this.name = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.shap = const Value.absent(),
    this.derivation = const Value.absent(),
    this.wgslat1 = const Value.absent(),
    this.wgsdlat1 = const Value.absent(),
    this.wgslong1 = const Value.absent(),
    this.wgsdlong1 = const Value.absent(),
    this.wgslat2 = const Value.absent(),
    this.wgsdlat2 = const Value.absent(),
    this.wgslong2 = const Value.absent(),
    this.wgsdlong2 = const Value.absent(),
    this.wgslat0 = const Value.absent(),
    this.wgsdlat0 = const Value.absent(),
    this.wgslong0 = const Value.absent(),
    this.wgsdlong0 = const Value.absent(),
    this.radius1 = const Value.absent(),
    this.radius2 = const Value.absent(),
    this.bearing1 = const Value.absent(),
    this.bearing2 = const Value.absent(),
    this.navident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.cycledate = const Value.absent(),
  });
  DafifIcaoRegionCompanion.insert({
    this.id = const Value.absent(),
    this.bdryident = const Value.absent(),
    this.seqnbr = const Value.absent(),
    this.name = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.shap = const Value.absent(),
    this.derivation = const Value.absent(),
    this.wgslat1 = const Value.absent(),
    this.wgsdlat1 = const Value.absent(),
    this.wgslong1 = const Value.absent(),
    this.wgsdlong1 = const Value.absent(),
    this.wgslat2 = const Value.absent(),
    this.wgsdlat2 = const Value.absent(),
    this.wgslong2 = const Value.absent(),
    this.wgsdlong2 = const Value.absent(),
    this.wgslat0 = const Value.absent(),
    this.wgsdlat0 = const Value.absent(),
    this.wgslong0 = const Value.absent(),
    this.wgsdlong0 = const Value.absent(),
    this.radius1 = const Value.absent(),
    this.radius2 = const Value.absent(),
    this.bearing1 = const Value.absent(),
    this.bearing2 = const Value.absent(),
    this.navident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.cycledate = const Value.absent(),
  });
  static Insertable<dafif_icao_region> custom({
    Expression<int> id,
    Expression<String> bdryident,
    Expression<String> seqnbr,
    Expression<String> name,
    Expression<String> type,
    Expression<String> icao,
    Expression<String> shap,
    Expression<String> derivation,
    Expression<String> wgslat1,
    Expression<String> wgsdlat1,
    Expression<String> wgslong1,
    Expression<String> wgsdlong1,
    Expression<String> wgslat2,
    Expression<String> wgsdlat2,
    Expression<String> wgslong2,
    Expression<String> wgsdlong2,
    Expression<String> wgslat0,
    Expression<String> wgsdlat0,
    Expression<String> wgslong0,
    Expression<String> wgsdlong0,
    Expression<String> radius1,
    Expression<String> radius2,
    Expression<String> bearing1,
    Expression<String> bearing2,
    Expression<String> navident,
    Expression<String> navtype,
    Expression<String> navctry,
    Expression<String> navkeycd,
    Expression<String> cycledate,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (bdryident != null) 'bdryident': bdryident,
      if (seqnbr != null) 'seqnbr': seqnbr,
      if (name != null) 'name': name,
      if (type != null) 'type': type,
      if (icao != null) 'icao': icao,
      if (shap != null) 'shap': shap,
      if (derivation != null) 'derivation': derivation,
      if (wgslat1 != null) 'wgslat1': wgslat1,
      if (wgsdlat1 != null) 'wgsdlat1': wgsdlat1,
      if (wgslong1 != null) 'wgslong1': wgslong1,
      if (wgsdlong1 != null) 'wgsdlong1': wgsdlong1,
      if (wgslat2 != null) 'wgslat2': wgslat2,
      if (wgsdlat2 != null) 'wgsdlat2': wgsdlat2,
      if (wgslong2 != null) 'wgslong2': wgslong2,
      if (wgsdlong2 != null) 'wgsdlong2': wgsdlong2,
      if (wgslat0 != null) 'wgslat0': wgslat0,
      if (wgsdlat0 != null) 'wgsdlat0': wgsdlat0,
      if (wgslong0 != null) 'wgslong0': wgslong0,
      if (wgsdlong0 != null) 'wgsdlong0': wgsdlong0,
      if (radius1 != null) 'radius1': radius1,
      if (radius2 != null) 'radius2': radius2,
      if (bearing1 != null) 'bearing1': bearing1,
      if (bearing2 != null) 'bearing2': bearing2,
      if (navident != null) 'navident': navident,
      if (navtype != null) 'navtype': navtype,
      if (navctry != null) 'navctry': navctry,
      if (navkeycd != null) 'navkeycd': navkeycd,
      if (cycledate != null) 'cycledate': cycledate,
    });
  }

  DafifIcaoRegionCompanion copyWith(
      {Value<int> id,
      Value<String> bdryident,
      Value<String> seqnbr,
      Value<String> name,
      Value<String> type,
      Value<String> icao,
      Value<String> shap,
      Value<String> derivation,
      Value<String> wgslat1,
      Value<String> wgsdlat1,
      Value<String> wgslong1,
      Value<String> wgsdlong1,
      Value<String> wgslat2,
      Value<String> wgsdlat2,
      Value<String> wgslong2,
      Value<String> wgsdlong2,
      Value<String> wgslat0,
      Value<String> wgsdlat0,
      Value<String> wgslong0,
      Value<String> wgsdlong0,
      Value<String> radius1,
      Value<String> radius2,
      Value<String> bearing1,
      Value<String> bearing2,
      Value<String> navident,
      Value<String> navtype,
      Value<String> navctry,
      Value<String> navkeycd,
      Value<String> cycledate}) {
    return DafifIcaoRegionCompanion(
      id: id ?? this.id,
      bdryident: bdryident ?? this.bdryident,
      seqnbr: seqnbr ?? this.seqnbr,
      name: name ?? this.name,
      type: type ?? this.type,
      icao: icao ?? this.icao,
      shap: shap ?? this.shap,
      derivation: derivation ?? this.derivation,
      wgslat1: wgslat1 ?? this.wgslat1,
      wgsdlat1: wgsdlat1 ?? this.wgsdlat1,
      wgslong1: wgslong1 ?? this.wgslong1,
      wgsdlong1: wgsdlong1 ?? this.wgsdlong1,
      wgslat2: wgslat2 ?? this.wgslat2,
      wgsdlat2: wgsdlat2 ?? this.wgsdlat2,
      wgslong2: wgslong2 ?? this.wgslong2,
      wgsdlong2: wgsdlong2 ?? this.wgsdlong2,
      wgslat0: wgslat0 ?? this.wgslat0,
      wgsdlat0: wgsdlat0 ?? this.wgsdlat0,
      wgslong0: wgslong0 ?? this.wgslong0,
      wgsdlong0: wgsdlong0 ?? this.wgsdlong0,
      radius1: radius1 ?? this.radius1,
      radius2: radius2 ?? this.radius2,
      bearing1: bearing1 ?? this.bearing1,
      bearing2: bearing2 ?? this.bearing2,
      navident: navident ?? this.navident,
      navtype: navtype ?? this.navtype,
      navctry: navctry ?? this.navctry,
      navkeycd: navkeycd ?? this.navkeycd,
      cycledate: cycledate ?? this.cycledate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (bdryident.present) {
      map['bdryident'] = Variable<String>(bdryident.value);
    }
    if (seqnbr.present) {
      map['seqnbr'] = Variable<String>(seqnbr.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (shap.present) {
      map['shap'] = Variable<String>(shap.value);
    }
    if (derivation.present) {
      map['derivation'] = Variable<String>(derivation.value);
    }
    if (wgslat1.present) {
      map['wgslat1'] = Variable<String>(wgslat1.value);
    }
    if (wgsdlat1.present) {
      map['wgsdlat1'] = Variable<String>(wgsdlat1.value);
    }
    if (wgslong1.present) {
      map['wgslong1'] = Variable<String>(wgslong1.value);
    }
    if (wgsdlong1.present) {
      map['wgsdlong1'] = Variable<String>(wgsdlong1.value);
    }
    if (wgslat2.present) {
      map['wgslat2'] = Variable<String>(wgslat2.value);
    }
    if (wgsdlat2.present) {
      map['wgsdlat2'] = Variable<String>(wgsdlat2.value);
    }
    if (wgslong2.present) {
      map['wgslong2'] = Variable<String>(wgslong2.value);
    }
    if (wgsdlong2.present) {
      map['wgsdlong2'] = Variable<String>(wgsdlong2.value);
    }
    if (wgslat0.present) {
      map['wgslat0'] = Variable<String>(wgslat0.value);
    }
    if (wgsdlat0.present) {
      map['wgsdlat0'] = Variable<String>(wgsdlat0.value);
    }
    if (wgslong0.present) {
      map['wgslong0'] = Variable<String>(wgslong0.value);
    }
    if (wgsdlong0.present) {
      map['wgsdlong0'] = Variable<String>(wgsdlong0.value);
    }
    if (radius1.present) {
      map['radius1'] = Variable<String>(radius1.value);
    }
    if (radius2.present) {
      map['radius2'] = Variable<String>(radius2.value);
    }
    if (bearing1.present) {
      map['bearing1'] = Variable<String>(bearing1.value);
    }
    if (bearing2.present) {
      map['bearing2'] = Variable<String>(bearing2.value);
    }
    if (navident.present) {
      map['navident'] = Variable<String>(navident.value);
    }
    if (navtype.present) {
      map['navtype'] = Variable<String>(navtype.value);
    }
    if (navctry.present) {
      map['navctry'] = Variable<String>(navctry.value);
    }
    if (navkeycd.present) {
      map['navkeycd'] = Variable<String>(navkeycd.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    return map;
  }
}

class $DafifIcaoRegionTable extends DafifIcaoRegion
    with TableInfo<$DafifIcaoRegionTable, dafif_icao_region> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifIcaoRegionTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _bdryidentMeta = const VerificationMeta('bdryident');
  GeneratedTextColumn _bdryident;
  @override
  GeneratedTextColumn get bdryident => _bdryident ??= _constructBdryident();
  GeneratedTextColumn _constructBdryident() {
    return GeneratedTextColumn(
      'bdryident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _seqnbrMeta = const VerificationMeta('seqnbr');
  GeneratedTextColumn _seqnbr;
  @override
  GeneratedTextColumn get seqnbr => _seqnbr ??= _constructSeqnbr();
  GeneratedTextColumn _constructSeqnbr() {
    return GeneratedTextColumn(
      'seqnbr',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _shapMeta = const VerificationMeta('shap');
  GeneratedTextColumn _shap;
  @override
  GeneratedTextColumn get shap => _shap ??= _constructShap();
  GeneratedTextColumn _constructShap() {
    return GeneratedTextColumn(
      'shap',
      $tableName,
      true,
    );
  }

  final VerificationMeta _derivationMeta = const VerificationMeta('derivation');
  GeneratedTextColumn _derivation;
  @override
  GeneratedTextColumn get derivation => _derivation ??= _constructDerivation();
  GeneratedTextColumn _constructDerivation() {
    return GeneratedTextColumn(
      'derivation',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslat1Meta = const VerificationMeta('wgslat1');
  GeneratedTextColumn _wgslat1;
  @override
  GeneratedTextColumn get wgslat1 => _wgslat1 ??= _constructWgslat1();
  GeneratedTextColumn _constructWgslat1() {
    return GeneratedTextColumn(
      'wgslat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlat1Meta = const VerificationMeta('wgsdlat1');
  GeneratedTextColumn _wgsdlat1;
  @override
  GeneratedTextColumn get wgsdlat1 => _wgsdlat1 ??= _constructWgsdlat1();
  GeneratedTextColumn _constructWgsdlat1() {
    return GeneratedTextColumn(
      'wgsdlat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslong1Meta = const VerificationMeta('wgslong1');
  GeneratedTextColumn _wgslong1;
  @override
  GeneratedTextColumn get wgslong1 => _wgslong1 ??= _constructWgslong1();
  GeneratedTextColumn _constructWgslong1() {
    return GeneratedTextColumn(
      'wgslong1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlong1Meta = const VerificationMeta('wgsdlong1');
  GeneratedTextColumn _wgsdlong1;
  @override
  GeneratedTextColumn get wgsdlong1 => _wgsdlong1 ??= _constructWgsdlong1();
  GeneratedTextColumn _constructWgsdlong1() {
    return GeneratedTextColumn(
      'wgsdlong1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslat2Meta = const VerificationMeta('wgslat2');
  GeneratedTextColumn _wgslat2;
  @override
  GeneratedTextColumn get wgslat2 => _wgslat2 ??= _constructWgslat2();
  GeneratedTextColumn _constructWgslat2() {
    return GeneratedTextColumn(
      'wgslat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlat2Meta = const VerificationMeta('wgsdlat2');
  GeneratedTextColumn _wgsdlat2;
  @override
  GeneratedTextColumn get wgsdlat2 => _wgsdlat2 ??= _constructWgsdlat2();
  GeneratedTextColumn _constructWgsdlat2() {
    return GeneratedTextColumn(
      'wgsdlat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslong2Meta = const VerificationMeta('wgslong2');
  GeneratedTextColumn _wgslong2;
  @override
  GeneratedTextColumn get wgslong2 => _wgslong2 ??= _constructWgslong2();
  GeneratedTextColumn _constructWgslong2() {
    return GeneratedTextColumn(
      'wgslong2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlong2Meta = const VerificationMeta('wgsdlong2');
  GeneratedTextColumn _wgsdlong2;
  @override
  GeneratedTextColumn get wgsdlong2 => _wgsdlong2 ??= _constructWgsdlong2();
  GeneratedTextColumn _constructWgsdlong2() {
    return GeneratedTextColumn(
      'wgsdlong2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslat0Meta = const VerificationMeta('wgslat0');
  GeneratedTextColumn _wgslat0;
  @override
  GeneratedTextColumn get wgslat0 => _wgslat0 ??= _constructWgslat0();
  GeneratedTextColumn _constructWgslat0() {
    return GeneratedTextColumn(
      'wgslat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlat0Meta = const VerificationMeta('wgsdlat0');
  GeneratedTextColumn _wgsdlat0;
  @override
  GeneratedTextColumn get wgsdlat0 => _wgsdlat0 ??= _constructWgsdlat0();
  GeneratedTextColumn _constructWgsdlat0() {
    return GeneratedTextColumn(
      'wgsdlat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslong0Meta = const VerificationMeta('wgslong0');
  GeneratedTextColumn _wgslong0;
  @override
  GeneratedTextColumn get wgslong0 => _wgslong0 ??= _constructWgslong0();
  GeneratedTextColumn _constructWgslong0() {
    return GeneratedTextColumn(
      'wgslong0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlong0Meta = const VerificationMeta('wgsdlong0');
  GeneratedTextColumn _wgsdlong0;
  @override
  GeneratedTextColumn get wgsdlong0 => _wgsdlong0 ??= _constructWgsdlong0();
  GeneratedTextColumn _constructWgsdlong0() {
    return GeneratedTextColumn(
      'wgsdlong0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _radius1Meta = const VerificationMeta('radius1');
  GeneratedTextColumn _radius1;
  @override
  GeneratedTextColumn get radius1 => _radius1 ??= _constructRadius1();
  GeneratedTextColumn _constructRadius1() {
    return GeneratedTextColumn(
      'radius1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _radius2Meta = const VerificationMeta('radius2');
  GeneratedTextColumn _radius2;
  @override
  GeneratedTextColumn get radius2 => _radius2 ??= _constructRadius2();
  GeneratedTextColumn _constructRadius2() {
    return GeneratedTextColumn(
      'radius2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearing1Meta = const VerificationMeta('bearing1');
  GeneratedTextColumn _bearing1;
  @override
  GeneratedTextColumn get bearing1 => _bearing1 ??= _constructBearing1();
  GeneratedTextColumn _constructBearing1() {
    return GeneratedTextColumn(
      'bearing1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearing2Meta = const VerificationMeta('bearing2');
  GeneratedTextColumn _bearing2;
  @override
  GeneratedTextColumn get bearing2 => _bearing2 ??= _constructBearing2();
  GeneratedTextColumn _constructBearing2() {
    return GeneratedTextColumn(
      'bearing2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navidentMeta = const VerificationMeta('navident');
  GeneratedTextColumn _navident;
  @override
  GeneratedTextColumn get navident => _navident ??= _constructNavident();
  GeneratedTextColumn _constructNavident() {
    return GeneratedTextColumn(
      'navident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navtypeMeta = const VerificationMeta('navtype');
  GeneratedTextColumn _navtype;
  @override
  GeneratedTextColumn get navtype => _navtype ??= _constructNavtype();
  GeneratedTextColumn _constructNavtype() {
    return GeneratedTextColumn(
      'navtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navctryMeta = const VerificationMeta('navctry');
  GeneratedTextColumn _navctry;
  @override
  GeneratedTextColumn get navctry => _navctry ??= _constructNavctry();
  GeneratedTextColumn _constructNavctry() {
    return GeneratedTextColumn(
      'navctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navkeycdMeta = const VerificationMeta('navkeycd');
  GeneratedTextColumn _navkeycd;
  @override
  GeneratedTextColumn get navkeycd => _navkeycd ??= _constructNavkeycd();
  GeneratedTextColumn _constructNavkeycd() {
    return GeneratedTextColumn(
      'navkeycd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        bdryident,
        seqnbr,
        name,
        type,
        icao,
        shap,
        derivation,
        wgslat1,
        wgsdlat1,
        wgslong1,
        wgsdlong1,
        wgslat2,
        wgsdlat2,
        wgslong2,
        wgsdlong2,
        wgslat0,
        wgsdlat0,
        wgslong0,
        wgsdlong0,
        radius1,
        radius2,
        bearing1,
        bearing2,
        navident,
        navtype,
        navctry,
        navkeycd,
        cycledate
      ];
  @override
  $DafifIcaoRegionTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_icao_region';
  @override
  final String actualTableName = 'dafif_icao_region';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_icao_region> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('bdryident')) {
      context.handle(_bdryidentMeta,
          bdryident.isAcceptableOrUnknown(data['bdryident'], _bdryidentMeta));
    }
    if (data.containsKey('seqnbr')) {
      context.handle(_seqnbrMeta,
          seqnbr.isAcceptableOrUnknown(data['seqnbr'], _seqnbrMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('shap')) {
      context.handle(
          _shapMeta, shap.isAcceptableOrUnknown(data['shap'], _shapMeta));
    }
    if (data.containsKey('derivation')) {
      context.handle(
          _derivationMeta,
          derivation.isAcceptableOrUnknown(
              data['derivation'], _derivationMeta));
    }
    if (data.containsKey('wgslat1')) {
      context.handle(_wgslat1Meta,
          wgslat1.isAcceptableOrUnknown(data['wgslat1'], _wgslat1Meta));
    }
    if (data.containsKey('wgsdlat1')) {
      context.handle(_wgsdlat1Meta,
          wgsdlat1.isAcceptableOrUnknown(data['wgsdlat1'], _wgsdlat1Meta));
    }
    if (data.containsKey('wgslong1')) {
      context.handle(_wgslong1Meta,
          wgslong1.isAcceptableOrUnknown(data['wgslong1'], _wgslong1Meta));
    }
    if (data.containsKey('wgsdlong1')) {
      context.handle(_wgsdlong1Meta,
          wgsdlong1.isAcceptableOrUnknown(data['wgsdlong1'], _wgsdlong1Meta));
    }
    if (data.containsKey('wgslat2')) {
      context.handle(_wgslat2Meta,
          wgslat2.isAcceptableOrUnknown(data['wgslat2'], _wgslat2Meta));
    }
    if (data.containsKey('wgsdlat2')) {
      context.handle(_wgsdlat2Meta,
          wgsdlat2.isAcceptableOrUnknown(data['wgsdlat2'], _wgsdlat2Meta));
    }
    if (data.containsKey('wgslong2')) {
      context.handle(_wgslong2Meta,
          wgslong2.isAcceptableOrUnknown(data['wgslong2'], _wgslong2Meta));
    }
    if (data.containsKey('wgsdlong2')) {
      context.handle(_wgsdlong2Meta,
          wgsdlong2.isAcceptableOrUnknown(data['wgsdlong2'], _wgsdlong2Meta));
    }
    if (data.containsKey('wgslat0')) {
      context.handle(_wgslat0Meta,
          wgslat0.isAcceptableOrUnknown(data['wgslat0'], _wgslat0Meta));
    }
    if (data.containsKey('wgsdlat0')) {
      context.handle(_wgsdlat0Meta,
          wgsdlat0.isAcceptableOrUnknown(data['wgsdlat0'], _wgsdlat0Meta));
    }
    if (data.containsKey('wgslong0')) {
      context.handle(_wgslong0Meta,
          wgslong0.isAcceptableOrUnknown(data['wgslong0'], _wgslong0Meta));
    }
    if (data.containsKey('wgsdlong0')) {
      context.handle(_wgsdlong0Meta,
          wgsdlong0.isAcceptableOrUnknown(data['wgsdlong0'], _wgsdlong0Meta));
    }
    if (data.containsKey('radius1')) {
      context.handle(_radius1Meta,
          radius1.isAcceptableOrUnknown(data['radius1'], _radius1Meta));
    }
    if (data.containsKey('radius2')) {
      context.handle(_radius2Meta,
          radius2.isAcceptableOrUnknown(data['radius2'], _radius2Meta));
    }
    if (data.containsKey('bearing1')) {
      context.handle(_bearing1Meta,
          bearing1.isAcceptableOrUnknown(data['bearing1'], _bearing1Meta));
    }
    if (data.containsKey('bearing2')) {
      context.handle(_bearing2Meta,
          bearing2.isAcceptableOrUnknown(data['bearing2'], _bearing2Meta));
    }
    if (data.containsKey('navident')) {
      context.handle(_navidentMeta,
          navident.isAcceptableOrUnknown(data['navident'], _navidentMeta));
    }
    if (data.containsKey('navtype')) {
      context.handle(_navtypeMeta,
          navtype.isAcceptableOrUnknown(data['navtype'], _navtypeMeta));
    }
    if (data.containsKey('navctry')) {
      context.handle(_navctryMeta,
          navctry.isAcceptableOrUnknown(data['navctry'], _navctryMeta));
    }
    if (data.containsKey('navkeycd')) {
      context.handle(_navkeycdMeta,
          navkeycd.isAcceptableOrUnknown(data['navkeycd'], _navkeycdMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_icao_region map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_icao_region.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifIcaoRegionTable createAlias(String alias) {
    return $DafifIcaoRegionTable(_db, alias);
  }
}

class dafif_navaid extends DataClass implements Insertable<dafif_navaid> {
  final int id;
  final String type;
  final String icao;
  final String name;
  final String associatedairfieldicao;
  final double lon;
  final double lat;
  final String elevationstring;
  final double distancetoorigin;
  final String country;
  final String navident;
  final String channel;
  final String navkeycd;
  final String wgsdlat;
  final String wgsdlong;
  final String stateprov;
  final String wac;
  final String freq;
  final String usagecd;
  final String rcc;
  final String freqprot;
  final String power;
  final String navrange;
  final String lochdatum;
  final String wgsdatum;
  final String wgslat;
  final String wgslong;
  final String slavedvar;
  final String magvar;
  final String dmewgslat;
  final String dmewgsdlat;
  final String dmewgslong;
  final String dmewgsdlong;
  final String dmeelev;
  final String os;
  final String cycledate;
  final int crc32;
  dafif_navaid(
      {@required this.id,
      this.type,
      this.icao,
      this.name,
      this.associatedairfieldicao,
      this.lon,
      this.lat,
      this.elevationstring,
      this.distancetoorigin,
      this.country,
      this.navident,
      this.channel,
      this.navkeycd,
      this.wgsdlat,
      this.wgsdlong,
      this.stateprov,
      this.wac,
      this.freq,
      this.usagecd,
      this.rcc,
      this.freqprot,
      this.power,
      this.navrange,
      this.lochdatum,
      this.wgsdatum,
      this.wgslat,
      this.wgslong,
      this.slavedvar,
      this.magvar,
      this.dmewgslat,
      this.dmewgsdlat,
      this.dmewgslong,
      this.dmewgsdlong,
      this.dmeelev,
      this.os,
      this.cycledate,
      this.crc32});
  factory dafif_navaid.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_navaid(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      associatedairfieldicao: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}associatedairfieldicao']),
      lon: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon']),
      lat: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat']),
      elevationstring: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}elevationstring']),
      distancetoorigin: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}distancetoorigin']),
      country:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}country']),
      navident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navident']),
      channel:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}channel']),
      navkeycd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navkeycd']),
      wgsdlat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat']),
      wgsdlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong']),
      stateprov: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}stateprov']),
      wac: stringType.mapFromDatabaseResponse(data['${effectivePrefix}wac']),
      freq: stringType.mapFromDatabaseResponse(data['${effectivePrefix}freq']),
      usagecd:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}usagecd']),
      rcc: stringType.mapFromDatabaseResponse(data['${effectivePrefix}rcc']),
      freqprot: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}freqprot']),
      power:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}power']),
      navrange: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navrange']),
      lochdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lochdatum']),
      wgsdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdatum']),
      wgslat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat']),
      wgslong:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslong']),
      slavedvar: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}slavedvar']),
      magvar:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}magvar']),
      dmewgslat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}dmewgslat']),
      dmewgsdlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}dmewgsdlat']),
      dmewgslong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}dmewgslong']),
      dmewgsdlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}dmewgsdlong']),
      dmeelev:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}dmeelev']),
      os: stringType.mapFromDatabaseResponse(data['${effectivePrefix}os']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || associatedairfieldicao != null) {
      map['associatedairfieldicao'] = Variable<String>(associatedairfieldicao);
    }
    if (!nullToAbsent || lon != null) {
      map['lon'] = Variable<double>(lon);
    }
    if (!nullToAbsent || lat != null) {
      map['lat'] = Variable<double>(lat);
    }
    if (!nullToAbsent || elevationstring != null) {
      map['elevationstring'] = Variable<String>(elevationstring);
    }
    if (!nullToAbsent || distancetoorigin != null) {
      map['distancetoorigin'] = Variable<double>(distancetoorigin);
    }
    if (!nullToAbsent || country != null) {
      map['country'] = Variable<String>(country);
    }
    if (!nullToAbsent || navident != null) {
      map['navident'] = Variable<String>(navident);
    }
    if (!nullToAbsent || channel != null) {
      map['channel'] = Variable<String>(channel);
    }
    if (!nullToAbsent || navkeycd != null) {
      map['navkeycd'] = Variable<String>(navkeycd);
    }
    if (!nullToAbsent || wgsdlat != null) {
      map['wgsdlat'] = Variable<String>(wgsdlat);
    }
    if (!nullToAbsent || wgsdlong != null) {
      map['wgsdlong'] = Variable<String>(wgsdlong);
    }
    if (!nullToAbsent || stateprov != null) {
      map['stateprov'] = Variable<String>(stateprov);
    }
    if (!nullToAbsent || wac != null) {
      map['wac'] = Variable<String>(wac);
    }
    if (!nullToAbsent || freq != null) {
      map['freq'] = Variable<String>(freq);
    }
    if (!nullToAbsent || usagecd != null) {
      map['usagecd'] = Variable<String>(usagecd);
    }
    if (!nullToAbsent || rcc != null) {
      map['rcc'] = Variable<String>(rcc);
    }
    if (!nullToAbsent || freqprot != null) {
      map['freqprot'] = Variable<String>(freqprot);
    }
    if (!nullToAbsent || power != null) {
      map['power'] = Variable<String>(power);
    }
    if (!nullToAbsent || navrange != null) {
      map['navrange'] = Variable<String>(navrange);
    }
    if (!nullToAbsent || lochdatum != null) {
      map['lochdatum'] = Variable<String>(lochdatum);
    }
    if (!nullToAbsent || wgsdatum != null) {
      map['wgsdatum'] = Variable<String>(wgsdatum);
    }
    if (!nullToAbsent || wgslat != null) {
      map['wgslat'] = Variable<String>(wgslat);
    }
    if (!nullToAbsent || wgslong != null) {
      map['wgslong'] = Variable<String>(wgslong);
    }
    if (!nullToAbsent || slavedvar != null) {
      map['slavedvar'] = Variable<String>(slavedvar);
    }
    if (!nullToAbsent || magvar != null) {
      map['magvar'] = Variable<String>(magvar);
    }
    if (!nullToAbsent || dmewgslat != null) {
      map['dmewgslat'] = Variable<String>(dmewgslat);
    }
    if (!nullToAbsent || dmewgsdlat != null) {
      map['dmewgsdlat'] = Variable<String>(dmewgsdlat);
    }
    if (!nullToAbsent || dmewgslong != null) {
      map['dmewgslong'] = Variable<String>(dmewgslong);
    }
    if (!nullToAbsent || dmewgsdlong != null) {
      map['dmewgsdlong'] = Variable<String>(dmewgsdlong);
    }
    if (!nullToAbsent || dmeelev != null) {
      map['dmeelev'] = Variable<String>(dmeelev);
    }
    if (!nullToAbsent || os != null) {
      map['os'] = Variable<String>(os);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_navaid.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_navaid(
      id: serializer.fromJson<int>(json['id']),
      type: serializer.fromJson<String>(json['type']),
      icao: serializer.fromJson<String>(json['icao']),
      name: serializer.fromJson<String>(json['name']),
      associatedairfieldicao:
          serializer.fromJson<String>(json['associatedairfieldicao']),
      lon: serializer.fromJson<double>(json['lon']),
      lat: serializer.fromJson<double>(json['lat']),
      elevationstring: serializer.fromJson<String>(json['elevationstring']),
      distancetoorigin: serializer.fromJson<double>(json['distancetoorigin']),
      country: serializer.fromJson<String>(json['country']),
      navident: serializer.fromJson<String>(json['navident']),
      channel: serializer.fromJson<String>(json['channel']),
      navkeycd: serializer.fromJson<String>(json['navkeycd']),
      wgsdlat: serializer.fromJson<String>(json['wgsdlat']),
      wgsdlong: serializer.fromJson<String>(json['wgsdlong']),
      stateprov: serializer.fromJson<String>(json['stateprov']),
      wac: serializer.fromJson<String>(json['wac']),
      freq: serializer.fromJson<String>(json['freq']),
      usagecd: serializer.fromJson<String>(json['usagecd']),
      rcc: serializer.fromJson<String>(json['rcc']),
      freqprot: serializer.fromJson<String>(json['freqprot']),
      power: serializer.fromJson<String>(json['power']),
      navrange: serializer.fromJson<String>(json['navrange']),
      lochdatum: serializer.fromJson<String>(json['lochdatum']),
      wgsdatum: serializer.fromJson<String>(json['wgsdatum']),
      wgslat: serializer.fromJson<String>(json['wgslat']),
      wgslong: serializer.fromJson<String>(json['wgslong']),
      slavedvar: serializer.fromJson<String>(json['slavedvar']),
      magvar: serializer.fromJson<String>(json['magvar']),
      dmewgslat: serializer.fromJson<String>(json['dmewgslat']),
      dmewgsdlat: serializer.fromJson<String>(json['dmewgsdlat']),
      dmewgslong: serializer.fromJson<String>(json['dmewgslong']),
      dmewgsdlong: serializer.fromJson<String>(json['dmewgsdlong']),
      dmeelev: serializer.fromJson<String>(json['dmeelev']),
      os: serializer.fromJson<String>(json['os']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'type': serializer.toJson<String>(type),
      'icao': serializer.toJson<String>(icao),
      'name': serializer.toJson<String>(name),
      'associatedairfieldicao':
          serializer.toJson<String>(associatedairfieldicao),
      'lon': serializer.toJson<double>(lon),
      'lat': serializer.toJson<double>(lat),
      'elevationstring': serializer.toJson<String>(elevationstring),
      'distancetoorigin': serializer.toJson<double>(distancetoorigin),
      'country': serializer.toJson<String>(country),
      'navident': serializer.toJson<String>(navident),
      'channel': serializer.toJson<String>(channel),
      'navkeycd': serializer.toJson<String>(navkeycd),
      'wgsdlat': serializer.toJson<String>(wgsdlat),
      'wgsdlong': serializer.toJson<String>(wgsdlong),
      'stateprov': serializer.toJson<String>(stateprov),
      'wac': serializer.toJson<String>(wac),
      'freq': serializer.toJson<String>(freq),
      'usagecd': serializer.toJson<String>(usagecd),
      'rcc': serializer.toJson<String>(rcc),
      'freqprot': serializer.toJson<String>(freqprot),
      'power': serializer.toJson<String>(power),
      'navrange': serializer.toJson<String>(navrange),
      'lochdatum': serializer.toJson<String>(lochdatum),
      'wgsdatum': serializer.toJson<String>(wgsdatum),
      'wgslat': serializer.toJson<String>(wgslat),
      'wgslong': serializer.toJson<String>(wgslong),
      'slavedvar': serializer.toJson<String>(slavedvar),
      'magvar': serializer.toJson<String>(magvar),
      'dmewgslat': serializer.toJson<String>(dmewgslat),
      'dmewgsdlat': serializer.toJson<String>(dmewgsdlat),
      'dmewgslong': serializer.toJson<String>(dmewgslong),
      'dmewgsdlong': serializer.toJson<String>(dmewgsdlong),
      'dmeelev': serializer.toJson<String>(dmeelev),
      'os': serializer.toJson<String>(os),
      'cycledate': serializer.toJson<String>(cycledate),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_navaid copyWith(
          {int id,
          String type,
          String icao,
          String name,
          String associatedairfieldicao,
          double lon,
          double lat,
          String elevationstring,
          double distancetoorigin,
          String country,
          String navident,
          String channel,
          String navkeycd,
          String wgsdlat,
          String wgsdlong,
          String stateprov,
          String wac,
          String freq,
          String usagecd,
          String rcc,
          String freqprot,
          String power,
          String navrange,
          String lochdatum,
          String wgsdatum,
          String wgslat,
          String wgslong,
          String slavedvar,
          String magvar,
          String dmewgslat,
          String dmewgsdlat,
          String dmewgslong,
          String dmewgsdlong,
          String dmeelev,
          String os,
          String cycledate,
          int crc32}) =>
      dafif_navaid(
        id: id ?? this.id,
        type: type ?? this.type,
        icao: icao ?? this.icao,
        name: name ?? this.name,
        associatedairfieldicao:
            associatedairfieldicao ?? this.associatedairfieldicao,
        lon: lon ?? this.lon,
        lat: lat ?? this.lat,
        elevationstring: elevationstring ?? this.elevationstring,
        distancetoorigin: distancetoorigin ?? this.distancetoorigin,
        country: country ?? this.country,
        navident: navident ?? this.navident,
        channel: channel ?? this.channel,
        navkeycd: navkeycd ?? this.navkeycd,
        wgsdlat: wgsdlat ?? this.wgsdlat,
        wgsdlong: wgsdlong ?? this.wgsdlong,
        stateprov: stateprov ?? this.stateprov,
        wac: wac ?? this.wac,
        freq: freq ?? this.freq,
        usagecd: usagecd ?? this.usagecd,
        rcc: rcc ?? this.rcc,
        freqprot: freqprot ?? this.freqprot,
        power: power ?? this.power,
        navrange: navrange ?? this.navrange,
        lochdatum: lochdatum ?? this.lochdatum,
        wgsdatum: wgsdatum ?? this.wgsdatum,
        wgslat: wgslat ?? this.wgslat,
        wgslong: wgslong ?? this.wgslong,
        slavedvar: slavedvar ?? this.slavedvar,
        magvar: magvar ?? this.magvar,
        dmewgslat: dmewgslat ?? this.dmewgslat,
        dmewgsdlat: dmewgsdlat ?? this.dmewgsdlat,
        dmewgslong: dmewgslong ?? this.dmewgslong,
        dmewgsdlong: dmewgsdlong ?? this.dmewgsdlong,
        dmeelev: dmeelev ?? this.dmeelev,
        os: os ?? this.os,
        cycledate: cycledate ?? this.cycledate,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_navaid(')
          ..write('id: $id, ')
          ..write('type: $type, ')
          ..write('icao: $icao, ')
          ..write('name: $name, ')
          ..write('associatedairfieldicao: $associatedairfieldicao, ')
          ..write('lon: $lon, ')
          ..write('lat: $lat, ')
          ..write('elevationstring: $elevationstring, ')
          ..write('distancetoorigin: $distancetoorigin, ')
          ..write('country: $country, ')
          ..write('navident: $navident, ')
          ..write('channel: $channel, ')
          ..write('navkeycd: $navkeycd, ')
          ..write('wgsdlat: $wgsdlat, ')
          ..write('wgsdlong: $wgsdlong, ')
          ..write('stateprov: $stateprov, ')
          ..write('wac: $wac, ')
          ..write('freq: $freq, ')
          ..write('usagecd: $usagecd, ')
          ..write('rcc: $rcc, ')
          ..write('freqprot: $freqprot, ')
          ..write('power: $power, ')
          ..write('navrange: $navrange, ')
          ..write('lochdatum: $lochdatum, ')
          ..write('wgsdatum: $wgsdatum, ')
          ..write('wgslat: $wgslat, ')
          ..write('wgslong: $wgslong, ')
          ..write('slavedvar: $slavedvar, ')
          ..write('magvar: $magvar, ')
          ..write('dmewgslat: $dmewgslat, ')
          ..write('dmewgsdlat: $dmewgsdlat, ')
          ..write('dmewgslong: $dmewgslong, ')
          ..write('dmewgsdlong: $dmewgsdlong, ')
          ..write('dmeelev: $dmeelev, ')
          ..write('os: $os, ')
          ..write('cycledate: $cycledate, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          type.hashCode,
          $mrjc(
              icao.hashCode,
              $mrjc(
                  name.hashCode,
                  $mrjc(
                      associatedairfieldicao.hashCode,
                      $mrjc(
                          lon.hashCode,
                          $mrjc(
                              lat.hashCode,
                              $mrjc(
                                  elevationstring.hashCode,
                                  $mrjc(
                                      distancetoorigin.hashCode,
                                      $mrjc(
                                          country.hashCode,
                                          $mrjc(
                                              navident.hashCode,
                                              $mrjc(
                                                  channel.hashCode,
                                                  $mrjc(
                                                      navkeycd.hashCode,
                                                      $mrjc(
                                                          wgsdlat.hashCode,
                                                          $mrjc(
                                                              wgsdlong.hashCode,
                                                              $mrjc(
                                                                  stateprov
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      wac
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          freq
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              usagecd.hashCode,
                                                                              $mrjc(rcc.hashCode, $mrjc(freqprot.hashCode, $mrjc(power.hashCode, $mrjc(navrange.hashCode, $mrjc(lochdatum.hashCode, $mrjc(wgsdatum.hashCode, $mrjc(wgslat.hashCode, $mrjc(wgslong.hashCode, $mrjc(slavedvar.hashCode, $mrjc(magvar.hashCode, $mrjc(dmewgslat.hashCode, $mrjc(dmewgsdlat.hashCode, $mrjc(dmewgslong.hashCode, $mrjc(dmewgsdlong.hashCode, $mrjc(dmeelev.hashCode, $mrjc(os.hashCode, $mrjc(cycledate.hashCode, crc32.hashCode)))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_navaid &&
          other.id == this.id &&
          other.type == this.type &&
          other.icao == this.icao &&
          other.name == this.name &&
          other.associatedairfieldicao == this.associatedairfieldicao &&
          other.lon == this.lon &&
          other.lat == this.lat &&
          other.elevationstring == this.elevationstring &&
          other.distancetoorigin == this.distancetoorigin &&
          other.country == this.country &&
          other.navident == this.navident &&
          other.channel == this.channel &&
          other.navkeycd == this.navkeycd &&
          other.wgsdlat == this.wgsdlat &&
          other.wgsdlong == this.wgsdlong &&
          other.stateprov == this.stateprov &&
          other.wac == this.wac &&
          other.freq == this.freq &&
          other.usagecd == this.usagecd &&
          other.rcc == this.rcc &&
          other.freqprot == this.freqprot &&
          other.power == this.power &&
          other.navrange == this.navrange &&
          other.lochdatum == this.lochdatum &&
          other.wgsdatum == this.wgsdatum &&
          other.wgslat == this.wgslat &&
          other.wgslong == this.wgslong &&
          other.slavedvar == this.slavedvar &&
          other.magvar == this.magvar &&
          other.dmewgslat == this.dmewgslat &&
          other.dmewgsdlat == this.dmewgsdlat &&
          other.dmewgslong == this.dmewgslong &&
          other.dmewgsdlong == this.dmewgsdlong &&
          other.dmeelev == this.dmeelev &&
          other.os == this.os &&
          other.cycledate == this.cycledate &&
          other.crc32 == this.crc32);
}

class DafifNavaidCompanion extends UpdateCompanion<dafif_navaid> {
  final Value<int> id;
  final Value<String> type;
  final Value<String> icao;
  final Value<String> name;
  final Value<String> associatedairfieldicao;
  final Value<double> lon;
  final Value<double> lat;
  final Value<String> elevationstring;
  final Value<double> distancetoorigin;
  final Value<String> country;
  final Value<String> navident;
  final Value<String> channel;
  final Value<String> navkeycd;
  final Value<String> wgsdlat;
  final Value<String> wgsdlong;
  final Value<String> stateprov;
  final Value<String> wac;
  final Value<String> freq;
  final Value<String> usagecd;
  final Value<String> rcc;
  final Value<String> freqprot;
  final Value<String> power;
  final Value<String> navrange;
  final Value<String> lochdatum;
  final Value<String> wgsdatum;
  final Value<String> wgslat;
  final Value<String> wgslong;
  final Value<String> slavedvar;
  final Value<String> magvar;
  final Value<String> dmewgslat;
  final Value<String> dmewgsdlat;
  final Value<String> dmewgslong;
  final Value<String> dmewgsdlong;
  final Value<String> dmeelev;
  final Value<String> os;
  final Value<String> cycledate;
  final Value<int> crc32;
  const DafifNavaidCompanion({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.name = const Value.absent(),
    this.associatedairfieldicao = const Value.absent(),
    this.lon = const Value.absent(),
    this.lat = const Value.absent(),
    this.elevationstring = const Value.absent(),
    this.distancetoorigin = const Value.absent(),
    this.country = const Value.absent(),
    this.navident = const Value.absent(),
    this.channel = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.stateprov = const Value.absent(),
    this.wac = const Value.absent(),
    this.freq = const Value.absent(),
    this.usagecd = const Value.absent(),
    this.rcc = const Value.absent(),
    this.freqprot = const Value.absent(),
    this.power = const Value.absent(),
    this.navrange = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.slavedvar = const Value.absent(),
    this.magvar = const Value.absent(),
    this.dmewgslat = const Value.absent(),
    this.dmewgsdlat = const Value.absent(),
    this.dmewgslong = const Value.absent(),
    this.dmewgsdlong = const Value.absent(),
    this.dmeelev = const Value.absent(),
    this.os = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifNavaidCompanion.insert({
    this.id = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.name = const Value.absent(),
    this.associatedairfieldicao = const Value.absent(),
    this.lon = const Value.absent(),
    this.lat = const Value.absent(),
    this.elevationstring = const Value.absent(),
    this.distancetoorigin = const Value.absent(),
    this.country = const Value.absent(),
    this.navident = const Value.absent(),
    this.channel = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.stateprov = const Value.absent(),
    this.wac = const Value.absent(),
    this.freq = const Value.absent(),
    this.usagecd = const Value.absent(),
    this.rcc = const Value.absent(),
    this.freqprot = const Value.absent(),
    this.power = const Value.absent(),
    this.navrange = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.slavedvar = const Value.absent(),
    this.magvar = const Value.absent(),
    this.dmewgslat = const Value.absent(),
    this.dmewgsdlat = const Value.absent(),
    this.dmewgslong = const Value.absent(),
    this.dmewgsdlong = const Value.absent(),
    this.dmeelev = const Value.absent(),
    this.os = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_navaid> custom({
    Expression<int> id,
    Expression<String> type,
    Expression<String> icao,
    Expression<String> name,
    Expression<String> associatedairfieldicao,
    Expression<double> lon,
    Expression<double> lat,
    Expression<String> elevationstring,
    Expression<double> distancetoorigin,
    Expression<String> country,
    Expression<String> navident,
    Expression<String> channel,
    Expression<String> navkeycd,
    Expression<String> wgsdlat,
    Expression<String> wgsdlong,
    Expression<String> stateprov,
    Expression<String> wac,
    Expression<String> freq,
    Expression<String> usagecd,
    Expression<String> rcc,
    Expression<String> freqprot,
    Expression<String> power,
    Expression<String> navrange,
    Expression<String> lochdatum,
    Expression<String> wgsdatum,
    Expression<String> wgslat,
    Expression<String> wgslong,
    Expression<String> slavedvar,
    Expression<String> magvar,
    Expression<String> dmewgslat,
    Expression<String> dmewgsdlat,
    Expression<String> dmewgslong,
    Expression<String> dmewgsdlong,
    Expression<String> dmeelev,
    Expression<String> os,
    Expression<String> cycledate,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (type != null) 'type': type,
      if (icao != null) 'icao': icao,
      if (name != null) 'name': name,
      if (associatedairfieldicao != null)
        'associatedairfieldicao': associatedairfieldicao,
      if (lon != null) 'lon': lon,
      if (lat != null) 'lat': lat,
      if (elevationstring != null) 'elevationstring': elevationstring,
      if (distancetoorigin != null) 'distancetoorigin': distancetoorigin,
      if (country != null) 'country': country,
      if (navident != null) 'navident': navident,
      if (channel != null) 'channel': channel,
      if (navkeycd != null) 'navkeycd': navkeycd,
      if (wgsdlat != null) 'wgsdlat': wgsdlat,
      if (wgsdlong != null) 'wgsdlong': wgsdlong,
      if (stateprov != null) 'stateprov': stateprov,
      if (wac != null) 'wac': wac,
      if (freq != null) 'freq': freq,
      if (usagecd != null) 'usagecd': usagecd,
      if (rcc != null) 'rcc': rcc,
      if (freqprot != null) 'freqprot': freqprot,
      if (power != null) 'power': power,
      if (navrange != null) 'navrange': navrange,
      if (lochdatum != null) 'lochdatum': lochdatum,
      if (wgsdatum != null) 'wgsdatum': wgsdatum,
      if (wgslat != null) 'wgslat': wgslat,
      if (wgslong != null) 'wgslong': wgslong,
      if (slavedvar != null) 'slavedvar': slavedvar,
      if (magvar != null) 'magvar': magvar,
      if (dmewgslat != null) 'dmewgslat': dmewgslat,
      if (dmewgsdlat != null) 'dmewgsdlat': dmewgsdlat,
      if (dmewgslong != null) 'dmewgslong': dmewgslong,
      if (dmewgsdlong != null) 'dmewgsdlong': dmewgsdlong,
      if (dmeelev != null) 'dmeelev': dmeelev,
      if (os != null) 'os': os,
      if (cycledate != null) 'cycledate': cycledate,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifNavaidCompanion copyWith(
      {Value<int> id,
      Value<String> type,
      Value<String> icao,
      Value<String> name,
      Value<String> associatedairfieldicao,
      Value<double> lon,
      Value<double> lat,
      Value<String> elevationstring,
      Value<double> distancetoorigin,
      Value<String> country,
      Value<String> navident,
      Value<String> channel,
      Value<String> navkeycd,
      Value<String> wgsdlat,
      Value<String> wgsdlong,
      Value<String> stateprov,
      Value<String> wac,
      Value<String> freq,
      Value<String> usagecd,
      Value<String> rcc,
      Value<String> freqprot,
      Value<String> power,
      Value<String> navrange,
      Value<String> lochdatum,
      Value<String> wgsdatum,
      Value<String> wgslat,
      Value<String> wgslong,
      Value<String> slavedvar,
      Value<String> magvar,
      Value<String> dmewgslat,
      Value<String> dmewgsdlat,
      Value<String> dmewgslong,
      Value<String> dmewgsdlong,
      Value<String> dmeelev,
      Value<String> os,
      Value<String> cycledate,
      Value<int> crc32}) {
    return DafifNavaidCompanion(
      id: id ?? this.id,
      type: type ?? this.type,
      icao: icao ?? this.icao,
      name: name ?? this.name,
      associatedairfieldicao:
          associatedairfieldicao ?? this.associatedairfieldicao,
      lon: lon ?? this.lon,
      lat: lat ?? this.lat,
      elevationstring: elevationstring ?? this.elevationstring,
      distancetoorigin: distancetoorigin ?? this.distancetoorigin,
      country: country ?? this.country,
      navident: navident ?? this.navident,
      channel: channel ?? this.channel,
      navkeycd: navkeycd ?? this.navkeycd,
      wgsdlat: wgsdlat ?? this.wgsdlat,
      wgsdlong: wgsdlong ?? this.wgsdlong,
      stateprov: stateprov ?? this.stateprov,
      wac: wac ?? this.wac,
      freq: freq ?? this.freq,
      usagecd: usagecd ?? this.usagecd,
      rcc: rcc ?? this.rcc,
      freqprot: freqprot ?? this.freqprot,
      power: power ?? this.power,
      navrange: navrange ?? this.navrange,
      lochdatum: lochdatum ?? this.lochdatum,
      wgsdatum: wgsdatum ?? this.wgsdatum,
      wgslat: wgslat ?? this.wgslat,
      wgslong: wgslong ?? this.wgslong,
      slavedvar: slavedvar ?? this.slavedvar,
      magvar: magvar ?? this.magvar,
      dmewgslat: dmewgslat ?? this.dmewgslat,
      dmewgsdlat: dmewgsdlat ?? this.dmewgsdlat,
      dmewgslong: dmewgslong ?? this.dmewgslong,
      dmewgsdlong: dmewgsdlong ?? this.dmewgsdlong,
      dmeelev: dmeelev ?? this.dmeelev,
      os: os ?? this.os,
      cycledate: cycledate ?? this.cycledate,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (associatedairfieldicao.present) {
      map['associatedairfieldicao'] =
          Variable<String>(associatedairfieldicao.value);
    }
    if (lon.present) {
      map['lon'] = Variable<double>(lon.value);
    }
    if (lat.present) {
      map['lat'] = Variable<double>(lat.value);
    }
    if (elevationstring.present) {
      map['elevationstring'] = Variable<String>(elevationstring.value);
    }
    if (distancetoorigin.present) {
      map['distancetoorigin'] = Variable<double>(distancetoorigin.value);
    }
    if (country.present) {
      map['country'] = Variable<String>(country.value);
    }
    if (navident.present) {
      map['navident'] = Variable<String>(navident.value);
    }
    if (channel.present) {
      map['channel'] = Variable<String>(channel.value);
    }
    if (navkeycd.present) {
      map['navkeycd'] = Variable<String>(navkeycd.value);
    }
    if (wgsdlat.present) {
      map['wgsdlat'] = Variable<String>(wgsdlat.value);
    }
    if (wgsdlong.present) {
      map['wgsdlong'] = Variable<String>(wgsdlong.value);
    }
    if (stateprov.present) {
      map['stateprov'] = Variable<String>(stateprov.value);
    }
    if (wac.present) {
      map['wac'] = Variable<String>(wac.value);
    }
    if (freq.present) {
      map['freq'] = Variable<String>(freq.value);
    }
    if (usagecd.present) {
      map['usagecd'] = Variable<String>(usagecd.value);
    }
    if (rcc.present) {
      map['rcc'] = Variable<String>(rcc.value);
    }
    if (freqprot.present) {
      map['freqprot'] = Variable<String>(freqprot.value);
    }
    if (power.present) {
      map['power'] = Variable<String>(power.value);
    }
    if (navrange.present) {
      map['navrange'] = Variable<String>(navrange.value);
    }
    if (lochdatum.present) {
      map['lochdatum'] = Variable<String>(lochdatum.value);
    }
    if (wgsdatum.present) {
      map['wgsdatum'] = Variable<String>(wgsdatum.value);
    }
    if (wgslat.present) {
      map['wgslat'] = Variable<String>(wgslat.value);
    }
    if (wgslong.present) {
      map['wgslong'] = Variable<String>(wgslong.value);
    }
    if (slavedvar.present) {
      map['slavedvar'] = Variable<String>(slavedvar.value);
    }
    if (magvar.present) {
      map['magvar'] = Variable<String>(magvar.value);
    }
    if (dmewgslat.present) {
      map['dmewgslat'] = Variable<String>(dmewgslat.value);
    }
    if (dmewgsdlat.present) {
      map['dmewgsdlat'] = Variable<String>(dmewgsdlat.value);
    }
    if (dmewgslong.present) {
      map['dmewgslong'] = Variable<String>(dmewgslong.value);
    }
    if (dmewgsdlong.present) {
      map['dmewgsdlong'] = Variable<String>(dmewgsdlong.value);
    }
    if (dmeelev.present) {
      map['dmeelev'] = Variable<String>(dmeelev.value);
    }
    if (os.present) {
      map['os'] = Variable<String>(os.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifNavaidTable extends DafifNavaid
    with TableInfo<$DafifNavaidTable, dafif_navaid> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifNavaidTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _associatedairfieldicaoMeta =
      const VerificationMeta('associatedairfieldicao');
  GeneratedTextColumn _associatedairfieldicao;
  @override
  GeneratedTextColumn get associatedairfieldicao =>
      _associatedairfieldicao ??= _constructAssociatedairfieldicao();
  GeneratedTextColumn _constructAssociatedairfieldicao() {
    return GeneratedTextColumn(
      'associatedairfieldicao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lonMeta = const VerificationMeta('lon');
  GeneratedRealColumn _lon;
  @override
  GeneratedRealColumn get lon => _lon ??= _constructLon();
  GeneratedRealColumn _constructLon() {
    return GeneratedRealColumn(
      'lon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _latMeta = const VerificationMeta('lat');
  GeneratedRealColumn _lat;
  @override
  GeneratedRealColumn get lat => _lat ??= _constructLat();
  GeneratedRealColumn _constructLat() {
    return GeneratedRealColumn(
      'lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _elevationstringMeta =
      const VerificationMeta('elevationstring');
  GeneratedTextColumn _elevationstring;
  @override
  GeneratedTextColumn get elevationstring =>
      _elevationstring ??= _constructElevationstring();
  GeneratedTextColumn _constructElevationstring() {
    return GeneratedTextColumn(
      'elevationstring',
      $tableName,
      true,
    );
  }

  final VerificationMeta _distancetooriginMeta =
      const VerificationMeta('distancetoorigin');
  GeneratedRealColumn _distancetoorigin;
  @override
  GeneratedRealColumn get distancetoorigin =>
      _distancetoorigin ??= _constructDistancetoorigin();
  GeneratedRealColumn _constructDistancetoorigin() {
    return GeneratedRealColumn(
      'distancetoorigin',
      $tableName,
      true,
    );
  }

  final VerificationMeta _countryMeta = const VerificationMeta('country');
  GeneratedTextColumn _country;
  @override
  GeneratedTextColumn get country => _country ??= _constructCountry();
  GeneratedTextColumn _constructCountry() {
    return GeneratedTextColumn(
      'country',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navidentMeta = const VerificationMeta('navident');
  GeneratedTextColumn _navident;
  @override
  GeneratedTextColumn get navident => _navident ??= _constructNavident();
  GeneratedTextColumn _constructNavident() {
    return GeneratedTextColumn(
      'navident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _channelMeta = const VerificationMeta('channel');
  GeneratedTextColumn _channel;
  @override
  GeneratedTextColumn get channel => _channel ??= _constructChannel();
  GeneratedTextColumn _constructChannel() {
    return GeneratedTextColumn(
      'channel',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navkeycdMeta = const VerificationMeta('navkeycd');
  GeneratedTextColumn _navkeycd;
  @override
  GeneratedTextColumn get navkeycd => _navkeycd ??= _constructNavkeycd();
  GeneratedTextColumn _constructNavkeycd() {
    return GeneratedTextColumn(
      'navkeycd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlatMeta = const VerificationMeta('wgsdlat');
  GeneratedTextColumn _wgsdlat;
  @override
  GeneratedTextColumn get wgsdlat => _wgsdlat ??= _constructWgsdlat();
  GeneratedTextColumn _constructWgsdlat() {
    return GeneratedTextColumn(
      'wgsdlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlongMeta = const VerificationMeta('wgsdlong');
  GeneratedTextColumn _wgsdlong;
  @override
  GeneratedTextColumn get wgsdlong => _wgsdlong ??= _constructWgsdlong();
  GeneratedTextColumn _constructWgsdlong() {
    return GeneratedTextColumn(
      'wgsdlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _stateprovMeta = const VerificationMeta('stateprov');
  GeneratedTextColumn _stateprov;
  @override
  GeneratedTextColumn get stateprov => _stateprov ??= _constructStateprov();
  GeneratedTextColumn _constructStateprov() {
    return GeneratedTextColumn(
      'stateprov',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wacMeta = const VerificationMeta('wac');
  GeneratedTextColumn _wac;
  @override
  GeneratedTextColumn get wac => _wac ??= _constructWac();
  GeneratedTextColumn _constructWac() {
    return GeneratedTextColumn(
      'wac',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqMeta = const VerificationMeta('freq');
  GeneratedTextColumn _freq;
  @override
  GeneratedTextColumn get freq => _freq ??= _constructFreq();
  GeneratedTextColumn _constructFreq() {
    return GeneratedTextColumn(
      'freq',
      $tableName,
      true,
    );
  }

  final VerificationMeta _usagecdMeta = const VerificationMeta('usagecd');
  GeneratedTextColumn _usagecd;
  @override
  GeneratedTextColumn get usagecd => _usagecd ??= _constructUsagecd();
  GeneratedTextColumn _constructUsagecd() {
    return GeneratedTextColumn(
      'usagecd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rccMeta = const VerificationMeta('rcc');
  GeneratedTextColumn _rcc;
  @override
  GeneratedTextColumn get rcc => _rcc ??= _constructRcc();
  GeneratedTextColumn _constructRcc() {
    return GeneratedTextColumn(
      'rcc',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqprotMeta = const VerificationMeta('freqprot');
  GeneratedTextColumn _freqprot;
  @override
  GeneratedTextColumn get freqprot => _freqprot ??= _constructFreqprot();
  GeneratedTextColumn _constructFreqprot() {
    return GeneratedTextColumn(
      'freqprot',
      $tableName,
      true,
    );
  }

  final VerificationMeta _powerMeta = const VerificationMeta('power');
  GeneratedTextColumn _power;
  @override
  GeneratedTextColumn get power => _power ??= _constructPower();
  GeneratedTextColumn _constructPower() {
    return GeneratedTextColumn(
      'power',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navrangeMeta = const VerificationMeta('navrange');
  GeneratedTextColumn _navrange;
  @override
  GeneratedTextColumn get navrange => _navrange ??= _constructNavrange();
  GeneratedTextColumn _constructNavrange() {
    return GeneratedTextColumn(
      'navrange',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lochdatumMeta = const VerificationMeta('lochdatum');
  GeneratedTextColumn _lochdatum;
  @override
  GeneratedTextColumn get lochdatum => _lochdatum ??= _constructLochdatum();
  GeneratedTextColumn _constructLochdatum() {
    return GeneratedTextColumn(
      'lochdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdatumMeta = const VerificationMeta('wgsdatum');
  GeneratedTextColumn _wgsdatum;
  @override
  GeneratedTextColumn get wgsdatum => _wgsdatum ??= _constructWgsdatum();
  GeneratedTextColumn _constructWgsdatum() {
    return GeneratedTextColumn(
      'wgsdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslatMeta = const VerificationMeta('wgslat');
  GeneratedTextColumn _wgslat;
  @override
  GeneratedTextColumn get wgslat => _wgslat ??= _constructWgslat();
  GeneratedTextColumn _constructWgslat() {
    return GeneratedTextColumn(
      'wgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslongMeta = const VerificationMeta('wgslong');
  GeneratedTextColumn _wgslong;
  @override
  GeneratedTextColumn get wgslong => _wgslong ??= _constructWgslong();
  GeneratedTextColumn _constructWgslong() {
    return GeneratedTextColumn(
      'wgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _slavedvarMeta = const VerificationMeta('slavedvar');
  GeneratedTextColumn _slavedvar;
  @override
  GeneratedTextColumn get slavedvar => _slavedvar ??= _constructSlavedvar();
  GeneratedTextColumn _constructSlavedvar() {
    return GeneratedTextColumn(
      'slavedvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _magvarMeta = const VerificationMeta('magvar');
  GeneratedTextColumn _magvar;
  @override
  GeneratedTextColumn get magvar => _magvar ??= _constructMagvar();
  GeneratedTextColumn _constructMagvar() {
    return GeneratedTextColumn(
      'magvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmewgslatMeta = const VerificationMeta('dmewgslat');
  GeneratedTextColumn _dmewgslat;
  @override
  GeneratedTextColumn get dmewgslat => _dmewgslat ??= _constructDmewgslat();
  GeneratedTextColumn _constructDmewgslat() {
    return GeneratedTextColumn(
      'dmewgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmewgsdlatMeta = const VerificationMeta('dmewgsdlat');
  GeneratedTextColumn _dmewgsdlat;
  @override
  GeneratedTextColumn get dmewgsdlat => _dmewgsdlat ??= _constructDmewgsdlat();
  GeneratedTextColumn _constructDmewgsdlat() {
    return GeneratedTextColumn(
      'dmewgsdlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmewgslongMeta = const VerificationMeta('dmewgslong');
  GeneratedTextColumn _dmewgslong;
  @override
  GeneratedTextColumn get dmewgslong => _dmewgslong ??= _constructDmewgslong();
  GeneratedTextColumn _constructDmewgslong() {
    return GeneratedTextColumn(
      'dmewgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmewgsdlongMeta =
      const VerificationMeta('dmewgsdlong');
  GeneratedTextColumn _dmewgsdlong;
  @override
  GeneratedTextColumn get dmewgsdlong =>
      _dmewgsdlong ??= _constructDmewgsdlong();
  GeneratedTextColumn _constructDmewgsdlong() {
    return GeneratedTextColumn(
      'dmewgsdlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmeelevMeta = const VerificationMeta('dmeelev');
  GeneratedTextColumn _dmeelev;
  @override
  GeneratedTextColumn get dmeelev => _dmeelev ??= _constructDmeelev();
  GeneratedTextColumn _constructDmeelev() {
    return GeneratedTextColumn(
      'dmeelev',
      $tableName,
      true,
    );
  }

  final VerificationMeta _osMeta = const VerificationMeta('os');
  GeneratedTextColumn _os;
  @override
  GeneratedTextColumn get os => _os ??= _constructOs();
  GeneratedTextColumn _constructOs() {
    return GeneratedTextColumn(
      'os',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        type,
        icao,
        name,
        associatedairfieldicao,
        lon,
        lat,
        elevationstring,
        distancetoorigin,
        country,
        navident,
        channel,
        navkeycd,
        wgsdlat,
        wgsdlong,
        stateprov,
        wac,
        freq,
        usagecd,
        rcc,
        freqprot,
        power,
        navrange,
        lochdatum,
        wgsdatum,
        wgslat,
        wgslong,
        slavedvar,
        magvar,
        dmewgslat,
        dmewgsdlat,
        dmewgslong,
        dmewgsdlong,
        dmeelev,
        os,
        cycledate,
        crc32
      ];
  @override
  $DafifNavaidTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_navaid';
  @override
  final String actualTableName = 'dafif_navaid';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_navaid> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('associatedairfieldicao')) {
      context.handle(
          _associatedairfieldicaoMeta,
          associatedairfieldicao.isAcceptableOrUnknown(
              data['associatedairfieldicao'], _associatedairfieldicaoMeta));
    }
    if (data.containsKey('lon')) {
      context.handle(
          _lonMeta, lon.isAcceptableOrUnknown(data['lon'], _lonMeta));
    }
    if (data.containsKey('lat')) {
      context.handle(
          _latMeta, lat.isAcceptableOrUnknown(data['lat'], _latMeta));
    }
    if (data.containsKey('elevationstring')) {
      context.handle(
          _elevationstringMeta,
          elevationstring.isAcceptableOrUnknown(
              data['elevationstring'], _elevationstringMeta));
    }
    if (data.containsKey('distancetoorigin')) {
      context.handle(
          _distancetooriginMeta,
          distancetoorigin.isAcceptableOrUnknown(
              data['distancetoorigin'], _distancetooriginMeta));
    }
    if (data.containsKey('country')) {
      context.handle(_countryMeta,
          country.isAcceptableOrUnknown(data['country'], _countryMeta));
    }
    if (data.containsKey('navident')) {
      context.handle(_navidentMeta,
          navident.isAcceptableOrUnknown(data['navident'], _navidentMeta));
    }
    if (data.containsKey('channel')) {
      context.handle(_channelMeta,
          channel.isAcceptableOrUnknown(data['channel'], _channelMeta));
    }
    if (data.containsKey('navkeycd')) {
      context.handle(_navkeycdMeta,
          navkeycd.isAcceptableOrUnknown(data['navkeycd'], _navkeycdMeta));
    }
    if (data.containsKey('wgsdlat')) {
      context.handle(_wgsdlatMeta,
          wgsdlat.isAcceptableOrUnknown(data['wgsdlat'], _wgsdlatMeta));
    }
    if (data.containsKey('wgsdlong')) {
      context.handle(_wgsdlongMeta,
          wgsdlong.isAcceptableOrUnknown(data['wgsdlong'], _wgsdlongMeta));
    }
    if (data.containsKey('stateprov')) {
      context.handle(_stateprovMeta,
          stateprov.isAcceptableOrUnknown(data['stateprov'], _stateprovMeta));
    }
    if (data.containsKey('wac')) {
      context.handle(
          _wacMeta, wac.isAcceptableOrUnknown(data['wac'], _wacMeta));
    }
    if (data.containsKey('freq')) {
      context.handle(
          _freqMeta, freq.isAcceptableOrUnknown(data['freq'], _freqMeta));
    }
    if (data.containsKey('usagecd')) {
      context.handle(_usagecdMeta,
          usagecd.isAcceptableOrUnknown(data['usagecd'], _usagecdMeta));
    }
    if (data.containsKey('rcc')) {
      context.handle(
          _rccMeta, rcc.isAcceptableOrUnknown(data['rcc'], _rccMeta));
    }
    if (data.containsKey('freqprot')) {
      context.handle(_freqprotMeta,
          freqprot.isAcceptableOrUnknown(data['freqprot'], _freqprotMeta));
    }
    if (data.containsKey('power')) {
      context.handle(
          _powerMeta, power.isAcceptableOrUnknown(data['power'], _powerMeta));
    }
    if (data.containsKey('navrange')) {
      context.handle(_navrangeMeta,
          navrange.isAcceptableOrUnknown(data['navrange'], _navrangeMeta));
    }
    if (data.containsKey('lochdatum')) {
      context.handle(_lochdatumMeta,
          lochdatum.isAcceptableOrUnknown(data['lochdatum'], _lochdatumMeta));
    }
    if (data.containsKey('wgsdatum')) {
      context.handle(_wgsdatumMeta,
          wgsdatum.isAcceptableOrUnknown(data['wgsdatum'], _wgsdatumMeta));
    }
    if (data.containsKey('wgslat')) {
      context.handle(_wgslatMeta,
          wgslat.isAcceptableOrUnknown(data['wgslat'], _wgslatMeta));
    }
    if (data.containsKey('wgslong')) {
      context.handle(_wgslongMeta,
          wgslong.isAcceptableOrUnknown(data['wgslong'], _wgslongMeta));
    }
    if (data.containsKey('slavedvar')) {
      context.handle(_slavedvarMeta,
          slavedvar.isAcceptableOrUnknown(data['slavedvar'], _slavedvarMeta));
    }
    if (data.containsKey('magvar')) {
      context.handle(_magvarMeta,
          magvar.isAcceptableOrUnknown(data['magvar'], _magvarMeta));
    }
    if (data.containsKey('dmewgslat')) {
      context.handle(_dmewgslatMeta,
          dmewgslat.isAcceptableOrUnknown(data['dmewgslat'], _dmewgslatMeta));
    }
    if (data.containsKey('dmewgsdlat')) {
      context.handle(
          _dmewgsdlatMeta,
          dmewgsdlat.isAcceptableOrUnknown(
              data['dmewgsdlat'], _dmewgsdlatMeta));
    }
    if (data.containsKey('dmewgslong')) {
      context.handle(
          _dmewgslongMeta,
          dmewgslong.isAcceptableOrUnknown(
              data['dmewgslong'], _dmewgslongMeta));
    }
    if (data.containsKey('dmewgsdlong')) {
      context.handle(
          _dmewgsdlongMeta,
          dmewgsdlong.isAcceptableOrUnknown(
              data['dmewgsdlong'], _dmewgsdlongMeta));
    }
    if (data.containsKey('dmeelev')) {
      context.handle(_dmeelevMeta,
          dmeelev.isAcceptableOrUnknown(data['dmeelev'], _dmeelevMeta));
    }
    if (data.containsKey('os')) {
      context.handle(_osMeta, os.isAcceptableOrUnknown(data['os'], _osMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_navaid map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_navaid.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifNavaidTable createAlias(String alias) {
    return $DafifNavaidTable(_db, alias);
  }
}

class dafif_navaid_ils extends DataClass
    implements Insertable<dafif_navaid_ils> {
  final int id;
  final String arptident;
  final String rwyident;
  final String comptype;
  final String colctn;
  final String name;
  final String freq;
  final String chan;
  final String gsangle;
  final String lczrgslctn;
  final String locmkrlctn;
  final String elev;
  final String lochdatum;
  final String wgsdatum;
  final String ilscat;
  final String wgslat;
  final String wgsdlat;
  final String wgslong;
  final String wgsdlong;
  final String ident;
  final String navtype;
  final String navctry;
  final String navkeycd;
  final String magvar;
  final String slavevar;
  final String ilsbrg;
  final String locwidth;
  final String thdcrossinghgt;
  final String dmebias;
  final String cycledate;
  final String dmenp;
  final int crc32;
  final double lat;
  final double lon;
  dafif_navaid_ils(
      {@required this.id,
      this.arptident,
      this.rwyident,
      this.comptype,
      this.colctn,
      this.name,
      this.freq,
      this.chan,
      this.gsangle,
      this.lczrgslctn,
      this.locmkrlctn,
      this.elev,
      this.lochdatum,
      this.wgsdatum,
      this.ilscat,
      this.wgslat,
      this.wgsdlat,
      this.wgslong,
      this.wgsdlong,
      this.ident,
      this.navtype,
      this.navctry,
      this.navkeycd,
      this.magvar,
      this.slavevar,
      this.ilsbrg,
      this.locwidth,
      this.thdcrossinghgt,
      this.dmebias,
      this.cycledate,
      this.dmenp,
      this.crc32,
      this.lat,
      this.lon});
  factory dafif_navaid_ils.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_navaid_ils(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arptident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arptident']),
      rwyident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}rwyident']),
      comptype: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}comptype']),
      colctn:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}colctn']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      freq: stringType.mapFromDatabaseResponse(data['${effectivePrefix}freq']),
      chan: stringType.mapFromDatabaseResponse(data['${effectivePrefix}chan']),
      gsangle:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}gsangle']),
      lczrgslctn: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lczrgslctn']),
      locmkrlctn: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}locmkrlctn']),
      elev: stringType.mapFromDatabaseResponse(data['${effectivePrefix}elev']),
      lochdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lochdatum']),
      wgsdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdatum']),
      ilscat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}ilscat']),
      wgslat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat']),
      wgsdlat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat']),
      wgslong:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslong']),
      wgsdlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong']),
      ident:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}ident']),
      navtype:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navtype']),
      navctry:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navctry']),
      navkeycd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navkeycd']),
      magvar:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}magvar']),
      slavevar: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}slavevar']),
      ilsbrg:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}ilsbrg']),
      locwidth: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}locwidth']),
      thdcrossinghgt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}thdcrossinghgt']),
      dmebias:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}dmebias']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      dmenp:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}dmenp']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      lat: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat']),
      lon: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arptident != null) {
      map['arptident'] = Variable<String>(arptident);
    }
    if (!nullToAbsent || rwyident != null) {
      map['rwyident'] = Variable<String>(rwyident);
    }
    if (!nullToAbsent || comptype != null) {
      map['comptype'] = Variable<String>(comptype);
    }
    if (!nullToAbsent || colctn != null) {
      map['colctn'] = Variable<String>(colctn);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || freq != null) {
      map['freq'] = Variable<String>(freq);
    }
    if (!nullToAbsent || chan != null) {
      map['chan'] = Variable<String>(chan);
    }
    if (!nullToAbsent || gsangle != null) {
      map['gsangle'] = Variable<String>(gsangle);
    }
    if (!nullToAbsent || lczrgslctn != null) {
      map['lczrgslctn'] = Variable<String>(lczrgslctn);
    }
    if (!nullToAbsent || locmkrlctn != null) {
      map['locmkrlctn'] = Variable<String>(locmkrlctn);
    }
    if (!nullToAbsent || elev != null) {
      map['elev'] = Variable<String>(elev);
    }
    if (!nullToAbsent || lochdatum != null) {
      map['lochdatum'] = Variable<String>(lochdatum);
    }
    if (!nullToAbsent || wgsdatum != null) {
      map['wgsdatum'] = Variable<String>(wgsdatum);
    }
    if (!nullToAbsent || ilscat != null) {
      map['ilscat'] = Variable<String>(ilscat);
    }
    if (!nullToAbsent || wgslat != null) {
      map['wgslat'] = Variable<String>(wgslat);
    }
    if (!nullToAbsent || wgsdlat != null) {
      map['wgsdlat'] = Variable<String>(wgsdlat);
    }
    if (!nullToAbsent || wgslong != null) {
      map['wgslong'] = Variable<String>(wgslong);
    }
    if (!nullToAbsent || wgsdlong != null) {
      map['wgsdlong'] = Variable<String>(wgsdlong);
    }
    if (!nullToAbsent || ident != null) {
      map['ident'] = Variable<String>(ident);
    }
    if (!nullToAbsent || navtype != null) {
      map['navtype'] = Variable<String>(navtype);
    }
    if (!nullToAbsent || navctry != null) {
      map['navctry'] = Variable<String>(navctry);
    }
    if (!nullToAbsent || navkeycd != null) {
      map['navkeycd'] = Variable<String>(navkeycd);
    }
    if (!nullToAbsent || magvar != null) {
      map['magvar'] = Variable<String>(magvar);
    }
    if (!nullToAbsent || slavevar != null) {
      map['slavevar'] = Variable<String>(slavevar);
    }
    if (!nullToAbsent || ilsbrg != null) {
      map['ilsbrg'] = Variable<String>(ilsbrg);
    }
    if (!nullToAbsent || locwidth != null) {
      map['locwidth'] = Variable<String>(locwidth);
    }
    if (!nullToAbsent || thdcrossinghgt != null) {
      map['thdcrossinghgt'] = Variable<String>(thdcrossinghgt);
    }
    if (!nullToAbsent || dmebias != null) {
      map['dmebias'] = Variable<String>(dmebias);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || dmenp != null) {
      map['dmenp'] = Variable<String>(dmenp);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    if (!nullToAbsent || lat != null) {
      map['lat'] = Variable<double>(lat);
    }
    if (!nullToAbsent || lon != null) {
      map['lon'] = Variable<double>(lon);
    }
    return map;
  }

  factory dafif_navaid_ils.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_navaid_ils(
      id: serializer.fromJson<int>(json['id']),
      arptident: serializer.fromJson<String>(json['arptident']),
      rwyident: serializer.fromJson<String>(json['rwyident']),
      comptype: serializer.fromJson<String>(json['comptype']),
      colctn: serializer.fromJson<String>(json['colctn']),
      name: serializer.fromJson<String>(json['name']),
      freq: serializer.fromJson<String>(json['freq']),
      chan: serializer.fromJson<String>(json['chan']),
      gsangle: serializer.fromJson<String>(json['gsangle']),
      lczrgslctn: serializer.fromJson<String>(json['lczrgslctn']),
      locmkrlctn: serializer.fromJson<String>(json['locmkrlctn']),
      elev: serializer.fromJson<String>(json['elev']),
      lochdatum: serializer.fromJson<String>(json['lochdatum']),
      wgsdatum: serializer.fromJson<String>(json['wgsdatum']),
      ilscat: serializer.fromJson<String>(json['ilscat']),
      wgslat: serializer.fromJson<String>(json['wgslat']),
      wgsdlat: serializer.fromJson<String>(json['wgsdlat']),
      wgslong: serializer.fromJson<String>(json['wgslong']),
      wgsdlong: serializer.fromJson<String>(json['wgsdlong']),
      ident: serializer.fromJson<String>(json['ident']),
      navtype: serializer.fromJson<String>(json['navtype']),
      navctry: serializer.fromJson<String>(json['navctry']),
      navkeycd: serializer.fromJson<String>(json['navkeycd']),
      magvar: serializer.fromJson<String>(json['magvar']),
      slavevar: serializer.fromJson<String>(json['slavevar']),
      ilsbrg: serializer.fromJson<String>(json['ilsbrg']),
      locwidth: serializer.fromJson<String>(json['locwidth']),
      thdcrossinghgt: serializer.fromJson<String>(json['thdcrossinghgt']),
      dmebias: serializer.fromJson<String>(json['dmebias']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      dmenp: serializer.fromJson<String>(json['dmenp']),
      crc32: serializer.fromJson<int>(json['crc32']),
      lat: serializer.fromJson<double>(json['lat']),
      lon: serializer.fromJson<double>(json['lon']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arptident': serializer.toJson<String>(arptident),
      'rwyident': serializer.toJson<String>(rwyident),
      'comptype': serializer.toJson<String>(comptype),
      'colctn': serializer.toJson<String>(colctn),
      'name': serializer.toJson<String>(name),
      'freq': serializer.toJson<String>(freq),
      'chan': serializer.toJson<String>(chan),
      'gsangle': serializer.toJson<String>(gsangle),
      'lczrgslctn': serializer.toJson<String>(lczrgslctn),
      'locmkrlctn': serializer.toJson<String>(locmkrlctn),
      'elev': serializer.toJson<String>(elev),
      'lochdatum': serializer.toJson<String>(lochdatum),
      'wgsdatum': serializer.toJson<String>(wgsdatum),
      'ilscat': serializer.toJson<String>(ilscat),
      'wgslat': serializer.toJson<String>(wgslat),
      'wgsdlat': serializer.toJson<String>(wgsdlat),
      'wgslong': serializer.toJson<String>(wgslong),
      'wgsdlong': serializer.toJson<String>(wgsdlong),
      'ident': serializer.toJson<String>(ident),
      'navtype': serializer.toJson<String>(navtype),
      'navctry': serializer.toJson<String>(navctry),
      'navkeycd': serializer.toJson<String>(navkeycd),
      'magvar': serializer.toJson<String>(magvar),
      'slavevar': serializer.toJson<String>(slavevar),
      'ilsbrg': serializer.toJson<String>(ilsbrg),
      'locwidth': serializer.toJson<String>(locwidth),
      'thdcrossinghgt': serializer.toJson<String>(thdcrossinghgt),
      'dmebias': serializer.toJson<String>(dmebias),
      'cycledate': serializer.toJson<String>(cycledate),
      'dmenp': serializer.toJson<String>(dmenp),
      'crc32': serializer.toJson<int>(crc32),
      'lat': serializer.toJson<double>(lat),
      'lon': serializer.toJson<double>(lon),
    };
  }

  dafif_navaid_ils copyWith(
          {int id,
          String arptident,
          String rwyident,
          String comptype,
          String colctn,
          String name,
          String freq,
          String chan,
          String gsangle,
          String lczrgslctn,
          String locmkrlctn,
          String elev,
          String lochdatum,
          String wgsdatum,
          String ilscat,
          String wgslat,
          String wgsdlat,
          String wgslong,
          String wgsdlong,
          String ident,
          String navtype,
          String navctry,
          String navkeycd,
          String magvar,
          String slavevar,
          String ilsbrg,
          String locwidth,
          String thdcrossinghgt,
          String dmebias,
          String cycledate,
          String dmenp,
          int crc32,
          double lat,
          double lon}) =>
      dafif_navaid_ils(
        id: id ?? this.id,
        arptident: arptident ?? this.arptident,
        rwyident: rwyident ?? this.rwyident,
        comptype: comptype ?? this.comptype,
        colctn: colctn ?? this.colctn,
        name: name ?? this.name,
        freq: freq ?? this.freq,
        chan: chan ?? this.chan,
        gsangle: gsangle ?? this.gsangle,
        lczrgslctn: lczrgslctn ?? this.lczrgslctn,
        locmkrlctn: locmkrlctn ?? this.locmkrlctn,
        elev: elev ?? this.elev,
        lochdatum: lochdatum ?? this.lochdatum,
        wgsdatum: wgsdatum ?? this.wgsdatum,
        ilscat: ilscat ?? this.ilscat,
        wgslat: wgslat ?? this.wgslat,
        wgsdlat: wgsdlat ?? this.wgsdlat,
        wgslong: wgslong ?? this.wgslong,
        wgsdlong: wgsdlong ?? this.wgsdlong,
        ident: ident ?? this.ident,
        navtype: navtype ?? this.navtype,
        navctry: navctry ?? this.navctry,
        navkeycd: navkeycd ?? this.navkeycd,
        magvar: magvar ?? this.magvar,
        slavevar: slavevar ?? this.slavevar,
        ilsbrg: ilsbrg ?? this.ilsbrg,
        locwidth: locwidth ?? this.locwidth,
        thdcrossinghgt: thdcrossinghgt ?? this.thdcrossinghgt,
        dmebias: dmebias ?? this.dmebias,
        cycledate: cycledate ?? this.cycledate,
        dmenp: dmenp ?? this.dmenp,
        crc32: crc32 ?? this.crc32,
        lat: lat ?? this.lat,
        lon: lon ?? this.lon,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_navaid_ils(')
          ..write('id: $id, ')
          ..write('arptident: $arptident, ')
          ..write('rwyident: $rwyident, ')
          ..write('comptype: $comptype, ')
          ..write('colctn: $colctn, ')
          ..write('name: $name, ')
          ..write('freq: $freq, ')
          ..write('chan: $chan, ')
          ..write('gsangle: $gsangle, ')
          ..write('lczrgslctn: $lczrgslctn, ')
          ..write('locmkrlctn: $locmkrlctn, ')
          ..write('elev: $elev, ')
          ..write('lochdatum: $lochdatum, ')
          ..write('wgsdatum: $wgsdatum, ')
          ..write('ilscat: $ilscat, ')
          ..write('wgslat: $wgslat, ')
          ..write('wgsdlat: $wgsdlat, ')
          ..write('wgslong: $wgslong, ')
          ..write('wgsdlong: $wgsdlong, ')
          ..write('ident: $ident, ')
          ..write('navtype: $navtype, ')
          ..write('navctry: $navctry, ')
          ..write('navkeycd: $navkeycd, ')
          ..write('magvar: $magvar, ')
          ..write('slavevar: $slavevar, ')
          ..write('ilsbrg: $ilsbrg, ')
          ..write('locwidth: $locwidth, ')
          ..write('thdcrossinghgt: $thdcrossinghgt, ')
          ..write('dmebias: $dmebias, ')
          ..write('cycledate: $cycledate, ')
          ..write('dmenp: $dmenp, ')
          ..write('crc32: $crc32, ')
          ..write('lat: $lat, ')
          ..write('lon: $lon')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arptident.hashCode,
          $mrjc(
              rwyident.hashCode,
              $mrjc(
                  comptype.hashCode,
                  $mrjc(
                      colctn.hashCode,
                      $mrjc(
                          name.hashCode,
                          $mrjc(
                              freq.hashCode,
                              $mrjc(
                                  chan.hashCode,
                                  $mrjc(
                                      gsangle.hashCode,
                                      $mrjc(
                                          lczrgslctn.hashCode,
                                          $mrjc(
                                              locmkrlctn.hashCode,
                                              $mrjc(
                                                  elev.hashCode,
                                                  $mrjc(
                                                      lochdatum.hashCode,
                                                      $mrjc(
                                                          wgsdatum.hashCode,
                                                          $mrjc(
                                                              ilscat.hashCode,
                                                              $mrjc(
                                                                  wgslat
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      wgsdlat
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          wgslong
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              wgsdlong.hashCode,
                                                                              $mrjc(ident.hashCode, $mrjc(navtype.hashCode, $mrjc(navctry.hashCode, $mrjc(navkeycd.hashCode, $mrjc(magvar.hashCode, $mrjc(slavevar.hashCode, $mrjc(ilsbrg.hashCode, $mrjc(locwidth.hashCode, $mrjc(thdcrossinghgt.hashCode, $mrjc(dmebias.hashCode, $mrjc(cycledate.hashCode, $mrjc(dmenp.hashCode, $mrjc(crc32.hashCode, $mrjc(lat.hashCode, lon.hashCode))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_navaid_ils &&
          other.id == this.id &&
          other.arptident == this.arptident &&
          other.rwyident == this.rwyident &&
          other.comptype == this.comptype &&
          other.colctn == this.colctn &&
          other.name == this.name &&
          other.freq == this.freq &&
          other.chan == this.chan &&
          other.gsangle == this.gsangle &&
          other.lczrgslctn == this.lczrgslctn &&
          other.locmkrlctn == this.locmkrlctn &&
          other.elev == this.elev &&
          other.lochdatum == this.lochdatum &&
          other.wgsdatum == this.wgsdatum &&
          other.ilscat == this.ilscat &&
          other.wgslat == this.wgslat &&
          other.wgsdlat == this.wgsdlat &&
          other.wgslong == this.wgslong &&
          other.wgsdlong == this.wgsdlong &&
          other.ident == this.ident &&
          other.navtype == this.navtype &&
          other.navctry == this.navctry &&
          other.navkeycd == this.navkeycd &&
          other.magvar == this.magvar &&
          other.slavevar == this.slavevar &&
          other.ilsbrg == this.ilsbrg &&
          other.locwidth == this.locwidth &&
          other.thdcrossinghgt == this.thdcrossinghgt &&
          other.dmebias == this.dmebias &&
          other.cycledate == this.cycledate &&
          other.dmenp == this.dmenp &&
          other.crc32 == this.crc32 &&
          other.lat == this.lat &&
          other.lon == this.lon);
}

class DafifNavaidIlsCompanion extends UpdateCompanion<dafif_navaid_ils> {
  final Value<int> id;
  final Value<String> arptident;
  final Value<String> rwyident;
  final Value<String> comptype;
  final Value<String> colctn;
  final Value<String> name;
  final Value<String> freq;
  final Value<String> chan;
  final Value<String> gsangle;
  final Value<String> lczrgslctn;
  final Value<String> locmkrlctn;
  final Value<String> elev;
  final Value<String> lochdatum;
  final Value<String> wgsdatum;
  final Value<String> ilscat;
  final Value<String> wgslat;
  final Value<String> wgsdlat;
  final Value<String> wgslong;
  final Value<String> wgsdlong;
  final Value<String> ident;
  final Value<String> navtype;
  final Value<String> navctry;
  final Value<String> navkeycd;
  final Value<String> magvar;
  final Value<String> slavevar;
  final Value<String> ilsbrg;
  final Value<String> locwidth;
  final Value<String> thdcrossinghgt;
  final Value<String> dmebias;
  final Value<String> cycledate;
  final Value<String> dmenp;
  final Value<int> crc32;
  final Value<double> lat;
  final Value<double> lon;
  const DafifNavaidIlsCompanion({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.rwyident = const Value.absent(),
    this.comptype = const Value.absent(),
    this.colctn = const Value.absent(),
    this.name = const Value.absent(),
    this.freq = const Value.absent(),
    this.chan = const Value.absent(),
    this.gsangle = const Value.absent(),
    this.lczrgslctn = const Value.absent(),
    this.locmkrlctn = const Value.absent(),
    this.elev = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.ilscat = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.ident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.magvar = const Value.absent(),
    this.slavevar = const Value.absent(),
    this.ilsbrg = const Value.absent(),
    this.locwidth = const Value.absent(),
    this.thdcrossinghgt = const Value.absent(),
    this.dmebias = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.dmenp = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat = const Value.absent(),
    this.lon = const Value.absent(),
  });
  DafifNavaidIlsCompanion.insert({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.rwyident = const Value.absent(),
    this.comptype = const Value.absent(),
    this.colctn = const Value.absent(),
    this.name = const Value.absent(),
    this.freq = const Value.absent(),
    this.chan = const Value.absent(),
    this.gsangle = const Value.absent(),
    this.lczrgslctn = const Value.absent(),
    this.locmkrlctn = const Value.absent(),
    this.elev = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.ilscat = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.ident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.magvar = const Value.absent(),
    this.slavevar = const Value.absent(),
    this.ilsbrg = const Value.absent(),
    this.locwidth = const Value.absent(),
    this.thdcrossinghgt = const Value.absent(),
    this.dmebias = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.dmenp = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat = const Value.absent(),
    this.lon = const Value.absent(),
  });
  static Insertable<dafif_navaid_ils> custom({
    Expression<int> id,
    Expression<String> arptident,
    Expression<String> rwyident,
    Expression<String> comptype,
    Expression<String> colctn,
    Expression<String> name,
    Expression<String> freq,
    Expression<String> chan,
    Expression<String> gsangle,
    Expression<String> lczrgslctn,
    Expression<String> locmkrlctn,
    Expression<String> elev,
    Expression<String> lochdatum,
    Expression<String> wgsdatum,
    Expression<String> ilscat,
    Expression<String> wgslat,
    Expression<String> wgsdlat,
    Expression<String> wgslong,
    Expression<String> wgsdlong,
    Expression<String> ident,
    Expression<String> navtype,
    Expression<String> navctry,
    Expression<String> navkeycd,
    Expression<String> magvar,
    Expression<String> slavevar,
    Expression<String> ilsbrg,
    Expression<String> locwidth,
    Expression<String> thdcrossinghgt,
    Expression<String> dmebias,
    Expression<String> cycledate,
    Expression<String> dmenp,
    Expression<int> crc32,
    Expression<double> lat,
    Expression<double> lon,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arptident != null) 'arptident': arptident,
      if (rwyident != null) 'rwyident': rwyident,
      if (comptype != null) 'comptype': comptype,
      if (colctn != null) 'colctn': colctn,
      if (name != null) 'name': name,
      if (freq != null) 'freq': freq,
      if (chan != null) 'chan': chan,
      if (gsangle != null) 'gsangle': gsangle,
      if (lczrgslctn != null) 'lczrgslctn': lczrgslctn,
      if (locmkrlctn != null) 'locmkrlctn': locmkrlctn,
      if (elev != null) 'elev': elev,
      if (lochdatum != null) 'lochdatum': lochdatum,
      if (wgsdatum != null) 'wgsdatum': wgsdatum,
      if (ilscat != null) 'ilscat': ilscat,
      if (wgslat != null) 'wgslat': wgslat,
      if (wgsdlat != null) 'wgsdlat': wgsdlat,
      if (wgslong != null) 'wgslong': wgslong,
      if (wgsdlong != null) 'wgsdlong': wgsdlong,
      if (ident != null) 'ident': ident,
      if (navtype != null) 'navtype': navtype,
      if (navctry != null) 'navctry': navctry,
      if (navkeycd != null) 'navkeycd': navkeycd,
      if (magvar != null) 'magvar': magvar,
      if (slavevar != null) 'slavevar': slavevar,
      if (ilsbrg != null) 'ilsbrg': ilsbrg,
      if (locwidth != null) 'locwidth': locwidth,
      if (thdcrossinghgt != null) 'thdcrossinghgt': thdcrossinghgt,
      if (dmebias != null) 'dmebias': dmebias,
      if (cycledate != null) 'cycledate': cycledate,
      if (dmenp != null) 'dmenp': dmenp,
      if (crc32 != null) 'crc32': crc32,
      if (lat != null) 'lat': lat,
      if (lon != null) 'lon': lon,
    });
  }

  DafifNavaidIlsCompanion copyWith(
      {Value<int> id,
      Value<String> arptident,
      Value<String> rwyident,
      Value<String> comptype,
      Value<String> colctn,
      Value<String> name,
      Value<String> freq,
      Value<String> chan,
      Value<String> gsangle,
      Value<String> lczrgslctn,
      Value<String> locmkrlctn,
      Value<String> elev,
      Value<String> lochdatum,
      Value<String> wgsdatum,
      Value<String> ilscat,
      Value<String> wgslat,
      Value<String> wgsdlat,
      Value<String> wgslong,
      Value<String> wgsdlong,
      Value<String> ident,
      Value<String> navtype,
      Value<String> navctry,
      Value<String> navkeycd,
      Value<String> magvar,
      Value<String> slavevar,
      Value<String> ilsbrg,
      Value<String> locwidth,
      Value<String> thdcrossinghgt,
      Value<String> dmebias,
      Value<String> cycledate,
      Value<String> dmenp,
      Value<int> crc32,
      Value<double> lat,
      Value<double> lon}) {
    return DafifNavaidIlsCompanion(
      id: id ?? this.id,
      arptident: arptident ?? this.arptident,
      rwyident: rwyident ?? this.rwyident,
      comptype: comptype ?? this.comptype,
      colctn: colctn ?? this.colctn,
      name: name ?? this.name,
      freq: freq ?? this.freq,
      chan: chan ?? this.chan,
      gsangle: gsangle ?? this.gsangle,
      lczrgslctn: lczrgslctn ?? this.lczrgslctn,
      locmkrlctn: locmkrlctn ?? this.locmkrlctn,
      elev: elev ?? this.elev,
      lochdatum: lochdatum ?? this.lochdatum,
      wgsdatum: wgsdatum ?? this.wgsdatum,
      ilscat: ilscat ?? this.ilscat,
      wgslat: wgslat ?? this.wgslat,
      wgsdlat: wgsdlat ?? this.wgsdlat,
      wgslong: wgslong ?? this.wgslong,
      wgsdlong: wgsdlong ?? this.wgsdlong,
      ident: ident ?? this.ident,
      navtype: navtype ?? this.navtype,
      navctry: navctry ?? this.navctry,
      navkeycd: navkeycd ?? this.navkeycd,
      magvar: magvar ?? this.magvar,
      slavevar: slavevar ?? this.slavevar,
      ilsbrg: ilsbrg ?? this.ilsbrg,
      locwidth: locwidth ?? this.locwidth,
      thdcrossinghgt: thdcrossinghgt ?? this.thdcrossinghgt,
      dmebias: dmebias ?? this.dmebias,
      cycledate: cycledate ?? this.cycledate,
      dmenp: dmenp ?? this.dmenp,
      crc32: crc32 ?? this.crc32,
      lat: lat ?? this.lat,
      lon: lon ?? this.lon,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arptident.present) {
      map['arptident'] = Variable<String>(arptident.value);
    }
    if (rwyident.present) {
      map['rwyident'] = Variable<String>(rwyident.value);
    }
    if (comptype.present) {
      map['comptype'] = Variable<String>(comptype.value);
    }
    if (colctn.present) {
      map['colctn'] = Variable<String>(colctn.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (freq.present) {
      map['freq'] = Variable<String>(freq.value);
    }
    if (chan.present) {
      map['chan'] = Variable<String>(chan.value);
    }
    if (gsangle.present) {
      map['gsangle'] = Variable<String>(gsangle.value);
    }
    if (lczrgslctn.present) {
      map['lczrgslctn'] = Variable<String>(lczrgslctn.value);
    }
    if (locmkrlctn.present) {
      map['locmkrlctn'] = Variable<String>(locmkrlctn.value);
    }
    if (elev.present) {
      map['elev'] = Variable<String>(elev.value);
    }
    if (lochdatum.present) {
      map['lochdatum'] = Variable<String>(lochdatum.value);
    }
    if (wgsdatum.present) {
      map['wgsdatum'] = Variable<String>(wgsdatum.value);
    }
    if (ilscat.present) {
      map['ilscat'] = Variable<String>(ilscat.value);
    }
    if (wgslat.present) {
      map['wgslat'] = Variable<String>(wgslat.value);
    }
    if (wgsdlat.present) {
      map['wgsdlat'] = Variable<String>(wgsdlat.value);
    }
    if (wgslong.present) {
      map['wgslong'] = Variable<String>(wgslong.value);
    }
    if (wgsdlong.present) {
      map['wgsdlong'] = Variable<String>(wgsdlong.value);
    }
    if (ident.present) {
      map['ident'] = Variable<String>(ident.value);
    }
    if (navtype.present) {
      map['navtype'] = Variable<String>(navtype.value);
    }
    if (navctry.present) {
      map['navctry'] = Variable<String>(navctry.value);
    }
    if (navkeycd.present) {
      map['navkeycd'] = Variable<String>(navkeycd.value);
    }
    if (magvar.present) {
      map['magvar'] = Variable<String>(magvar.value);
    }
    if (slavevar.present) {
      map['slavevar'] = Variable<String>(slavevar.value);
    }
    if (ilsbrg.present) {
      map['ilsbrg'] = Variable<String>(ilsbrg.value);
    }
    if (locwidth.present) {
      map['locwidth'] = Variable<String>(locwidth.value);
    }
    if (thdcrossinghgt.present) {
      map['thdcrossinghgt'] = Variable<String>(thdcrossinghgt.value);
    }
    if (dmebias.present) {
      map['dmebias'] = Variable<String>(dmebias.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (dmenp.present) {
      map['dmenp'] = Variable<String>(dmenp.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    if (lat.present) {
      map['lat'] = Variable<double>(lat.value);
    }
    if (lon.present) {
      map['lon'] = Variable<double>(lon.value);
    }
    return map;
  }
}

class $DafifNavaidIlsTable extends DafifNavaidIls
    with TableInfo<$DafifNavaidIlsTable, dafif_navaid_ils> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifNavaidIlsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arptidentMeta = const VerificationMeta('arptident');
  GeneratedTextColumn _arptident;
  @override
  GeneratedTextColumn get arptident => _arptident ??= _constructArptident();
  GeneratedTextColumn _constructArptident() {
    return GeneratedTextColumn(
      'arptident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rwyidentMeta = const VerificationMeta('rwyident');
  GeneratedTextColumn _rwyident;
  @override
  GeneratedTextColumn get rwyident => _rwyident ??= _constructRwyident();
  GeneratedTextColumn _constructRwyident() {
    return GeneratedTextColumn(
      'rwyident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comptypeMeta = const VerificationMeta('comptype');
  GeneratedTextColumn _comptype;
  @override
  GeneratedTextColumn get comptype => _comptype ??= _constructComptype();
  GeneratedTextColumn _constructComptype() {
    return GeneratedTextColumn(
      'comptype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _colctnMeta = const VerificationMeta('colctn');
  GeneratedTextColumn _colctn;
  @override
  GeneratedTextColumn get colctn => _colctn ??= _constructColctn();
  GeneratedTextColumn _constructColctn() {
    return GeneratedTextColumn(
      'colctn',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freqMeta = const VerificationMeta('freq');
  GeneratedTextColumn _freq;
  @override
  GeneratedTextColumn get freq => _freq ??= _constructFreq();
  GeneratedTextColumn _constructFreq() {
    return GeneratedTextColumn(
      'freq',
      $tableName,
      true,
    );
  }

  final VerificationMeta _chanMeta = const VerificationMeta('chan');
  GeneratedTextColumn _chan;
  @override
  GeneratedTextColumn get chan => _chan ??= _constructChan();
  GeneratedTextColumn _constructChan() {
    return GeneratedTextColumn(
      'chan',
      $tableName,
      true,
    );
  }

  final VerificationMeta _gsangleMeta = const VerificationMeta('gsangle');
  GeneratedTextColumn _gsangle;
  @override
  GeneratedTextColumn get gsangle => _gsangle ??= _constructGsangle();
  GeneratedTextColumn _constructGsangle() {
    return GeneratedTextColumn(
      'gsangle',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lczrgslctnMeta = const VerificationMeta('lczrgslctn');
  GeneratedTextColumn _lczrgslctn;
  @override
  GeneratedTextColumn get lczrgslctn => _lczrgslctn ??= _constructLczrgslctn();
  GeneratedTextColumn _constructLczrgslctn() {
    return GeneratedTextColumn(
      'lczrgslctn',
      $tableName,
      true,
    );
  }

  final VerificationMeta _locmkrlctnMeta = const VerificationMeta('locmkrlctn');
  GeneratedTextColumn _locmkrlctn;
  @override
  GeneratedTextColumn get locmkrlctn => _locmkrlctn ??= _constructLocmkrlctn();
  GeneratedTextColumn _constructLocmkrlctn() {
    return GeneratedTextColumn(
      'locmkrlctn',
      $tableName,
      true,
    );
  }

  final VerificationMeta _elevMeta = const VerificationMeta('elev');
  GeneratedTextColumn _elev;
  @override
  GeneratedTextColumn get elev => _elev ??= _constructElev();
  GeneratedTextColumn _constructElev() {
    return GeneratedTextColumn(
      'elev',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lochdatumMeta = const VerificationMeta('lochdatum');
  GeneratedTextColumn _lochdatum;
  @override
  GeneratedTextColumn get lochdatum => _lochdatum ??= _constructLochdatum();
  GeneratedTextColumn _constructLochdatum() {
    return GeneratedTextColumn(
      'lochdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdatumMeta = const VerificationMeta('wgsdatum');
  GeneratedTextColumn _wgsdatum;
  @override
  GeneratedTextColumn get wgsdatum => _wgsdatum ??= _constructWgsdatum();
  GeneratedTextColumn _constructWgsdatum() {
    return GeneratedTextColumn(
      'wgsdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ilscatMeta = const VerificationMeta('ilscat');
  GeneratedTextColumn _ilscat;
  @override
  GeneratedTextColumn get ilscat => _ilscat ??= _constructIlscat();
  GeneratedTextColumn _constructIlscat() {
    return GeneratedTextColumn(
      'ilscat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslatMeta = const VerificationMeta('wgslat');
  GeneratedTextColumn _wgslat;
  @override
  GeneratedTextColumn get wgslat => _wgslat ??= _constructWgslat();
  GeneratedTextColumn _constructWgslat() {
    return GeneratedTextColumn(
      'wgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlatMeta = const VerificationMeta('wgsdlat');
  GeneratedTextColumn _wgsdlat;
  @override
  GeneratedTextColumn get wgsdlat => _wgsdlat ??= _constructWgsdlat();
  GeneratedTextColumn _constructWgsdlat() {
    return GeneratedTextColumn(
      'wgsdlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslongMeta = const VerificationMeta('wgslong');
  GeneratedTextColumn _wgslong;
  @override
  GeneratedTextColumn get wgslong => _wgslong ??= _constructWgslong();
  GeneratedTextColumn _constructWgslong() {
    return GeneratedTextColumn(
      'wgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlongMeta = const VerificationMeta('wgsdlong');
  GeneratedTextColumn _wgsdlong;
  @override
  GeneratedTextColumn get wgsdlong => _wgsdlong ??= _constructWgsdlong();
  GeneratedTextColumn _constructWgsdlong() {
    return GeneratedTextColumn(
      'wgsdlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _identMeta = const VerificationMeta('ident');
  GeneratedTextColumn _ident;
  @override
  GeneratedTextColumn get ident => _ident ??= _constructIdent();
  GeneratedTextColumn _constructIdent() {
    return GeneratedTextColumn(
      'ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navtypeMeta = const VerificationMeta('navtype');
  GeneratedTextColumn _navtype;
  @override
  GeneratedTextColumn get navtype => _navtype ??= _constructNavtype();
  GeneratedTextColumn _constructNavtype() {
    return GeneratedTextColumn(
      'navtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navctryMeta = const VerificationMeta('navctry');
  GeneratedTextColumn _navctry;
  @override
  GeneratedTextColumn get navctry => _navctry ??= _constructNavctry();
  GeneratedTextColumn _constructNavctry() {
    return GeneratedTextColumn(
      'navctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navkeycdMeta = const VerificationMeta('navkeycd');
  GeneratedTextColumn _navkeycd;
  @override
  GeneratedTextColumn get navkeycd => _navkeycd ??= _constructNavkeycd();
  GeneratedTextColumn _constructNavkeycd() {
    return GeneratedTextColumn(
      'navkeycd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _magvarMeta = const VerificationMeta('magvar');
  GeneratedTextColumn _magvar;
  @override
  GeneratedTextColumn get magvar => _magvar ??= _constructMagvar();
  GeneratedTextColumn _constructMagvar() {
    return GeneratedTextColumn(
      'magvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _slavevarMeta = const VerificationMeta('slavevar');
  GeneratedTextColumn _slavevar;
  @override
  GeneratedTextColumn get slavevar => _slavevar ??= _constructSlavevar();
  GeneratedTextColumn _constructSlavevar() {
    return GeneratedTextColumn(
      'slavevar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ilsbrgMeta = const VerificationMeta('ilsbrg');
  GeneratedTextColumn _ilsbrg;
  @override
  GeneratedTextColumn get ilsbrg => _ilsbrg ??= _constructIlsbrg();
  GeneratedTextColumn _constructIlsbrg() {
    return GeneratedTextColumn(
      'ilsbrg',
      $tableName,
      true,
    );
  }

  final VerificationMeta _locwidthMeta = const VerificationMeta('locwidth');
  GeneratedTextColumn _locwidth;
  @override
  GeneratedTextColumn get locwidth => _locwidth ??= _constructLocwidth();
  GeneratedTextColumn _constructLocwidth() {
    return GeneratedTextColumn(
      'locwidth',
      $tableName,
      true,
    );
  }

  final VerificationMeta _thdcrossinghgtMeta =
      const VerificationMeta('thdcrossinghgt');
  GeneratedTextColumn _thdcrossinghgt;
  @override
  GeneratedTextColumn get thdcrossinghgt =>
      _thdcrossinghgt ??= _constructThdcrossinghgt();
  GeneratedTextColumn _constructThdcrossinghgt() {
    return GeneratedTextColumn(
      'thdcrossinghgt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmebiasMeta = const VerificationMeta('dmebias');
  GeneratedTextColumn _dmebias;
  @override
  GeneratedTextColumn get dmebias => _dmebias ??= _constructDmebias();
  GeneratedTextColumn _constructDmebias() {
    return GeneratedTextColumn(
      'dmebias',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dmenpMeta = const VerificationMeta('dmenp');
  GeneratedTextColumn _dmenp;
  @override
  GeneratedTextColumn get dmenp => _dmenp ??= _constructDmenp();
  GeneratedTextColumn _constructDmenp() {
    return GeneratedTextColumn(
      'dmenp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _latMeta = const VerificationMeta('lat');
  GeneratedRealColumn _lat;
  @override
  GeneratedRealColumn get lat => _lat ??= _constructLat();
  GeneratedRealColumn _constructLat() {
    return GeneratedRealColumn(
      'lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lonMeta = const VerificationMeta('lon');
  GeneratedRealColumn _lon;
  @override
  GeneratedRealColumn get lon => _lon ??= _constructLon();
  GeneratedRealColumn _constructLon() {
    return GeneratedRealColumn(
      'lon',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arptident,
        rwyident,
        comptype,
        colctn,
        name,
        freq,
        chan,
        gsangle,
        lczrgslctn,
        locmkrlctn,
        elev,
        lochdatum,
        wgsdatum,
        ilscat,
        wgslat,
        wgsdlat,
        wgslong,
        wgsdlong,
        ident,
        navtype,
        navctry,
        navkeycd,
        magvar,
        slavevar,
        ilsbrg,
        locwidth,
        thdcrossinghgt,
        dmebias,
        cycledate,
        dmenp,
        crc32,
        lat,
        lon
      ];
  @override
  $DafifNavaidIlsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_navaid_ils';
  @override
  final String actualTableName = 'dafif_navaid_ils';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_navaid_ils> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arptident')) {
      context.handle(_arptidentMeta,
          arptident.isAcceptableOrUnknown(data['arptident'], _arptidentMeta));
    }
    if (data.containsKey('rwyident')) {
      context.handle(_rwyidentMeta,
          rwyident.isAcceptableOrUnknown(data['rwyident'], _rwyidentMeta));
    }
    if (data.containsKey('comptype')) {
      context.handle(_comptypeMeta,
          comptype.isAcceptableOrUnknown(data['comptype'], _comptypeMeta));
    }
    if (data.containsKey('colctn')) {
      context.handle(_colctnMeta,
          colctn.isAcceptableOrUnknown(data['colctn'], _colctnMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('freq')) {
      context.handle(
          _freqMeta, freq.isAcceptableOrUnknown(data['freq'], _freqMeta));
    }
    if (data.containsKey('chan')) {
      context.handle(
          _chanMeta, chan.isAcceptableOrUnknown(data['chan'], _chanMeta));
    }
    if (data.containsKey('gsangle')) {
      context.handle(_gsangleMeta,
          gsangle.isAcceptableOrUnknown(data['gsangle'], _gsangleMeta));
    }
    if (data.containsKey('lczrgslctn')) {
      context.handle(
          _lczrgslctnMeta,
          lczrgslctn.isAcceptableOrUnknown(
              data['lczrgslctn'], _lczrgslctnMeta));
    }
    if (data.containsKey('locmkrlctn')) {
      context.handle(
          _locmkrlctnMeta,
          locmkrlctn.isAcceptableOrUnknown(
              data['locmkrlctn'], _locmkrlctnMeta));
    }
    if (data.containsKey('elev')) {
      context.handle(
          _elevMeta, elev.isAcceptableOrUnknown(data['elev'], _elevMeta));
    }
    if (data.containsKey('lochdatum')) {
      context.handle(_lochdatumMeta,
          lochdatum.isAcceptableOrUnknown(data['lochdatum'], _lochdatumMeta));
    }
    if (data.containsKey('wgsdatum')) {
      context.handle(_wgsdatumMeta,
          wgsdatum.isAcceptableOrUnknown(data['wgsdatum'], _wgsdatumMeta));
    }
    if (data.containsKey('ilscat')) {
      context.handle(_ilscatMeta,
          ilscat.isAcceptableOrUnknown(data['ilscat'], _ilscatMeta));
    }
    if (data.containsKey('wgslat')) {
      context.handle(_wgslatMeta,
          wgslat.isAcceptableOrUnknown(data['wgslat'], _wgslatMeta));
    }
    if (data.containsKey('wgsdlat')) {
      context.handle(_wgsdlatMeta,
          wgsdlat.isAcceptableOrUnknown(data['wgsdlat'], _wgsdlatMeta));
    }
    if (data.containsKey('wgslong')) {
      context.handle(_wgslongMeta,
          wgslong.isAcceptableOrUnknown(data['wgslong'], _wgslongMeta));
    }
    if (data.containsKey('wgsdlong')) {
      context.handle(_wgsdlongMeta,
          wgsdlong.isAcceptableOrUnknown(data['wgsdlong'], _wgsdlongMeta));
    }
    if (data.containsKey('ident')) {
      context.handle(
          _identMeta, ident.isAcceptableOrUnknown(data['ident'], _identMeta));
    }
    if (data.containsKey('navtype')) {
      context.handle(_navtypeMeta,
          navtype.isAcceptableOrUnknown(data['navtype'], _navtypeMeta));
    }
    if (data.containsKey('navctry')) {
      context.handle(_navctryMeta,
          navctry.isAcceptableOrUnknown(data['navctry'], _navctryMeta));
    }
    if (data.containsKey('navkeycd')) {
      context.handle(_navkeycdMeta,
          navkeycd.isAcceptableOrUnknown(data['navkeycd'], _navkeycdMeta));
    }
    if (data.containsKey('magvar')) {
      context.handle(_magvarMeta,
          magvar.isAcceptableOrUnknown(data['magvar'], _magvarMeta));
    }
    if (data.containsKey('slavevar')) {
      context.handle(_slavevarMeta,
          slavevar.isAcceptableOrUnknown(data['slavevar'], _slavevarMeta));
    }
    if (data.containsKey('ilsbrg')) {
      context.handle(_ilsbrgMeta,
          ilsbrg.isAcceptableOrUnknown(data['ilsbrg'], _ilsbrgMeta));
    }
    if (data.containsKey('locwidth')) {
      context.handle(_locwidthMeta,
          locwidth.isAcceptableOrUnknown(data['locwidth'], _locwidthMeta));
    }
    if (data.containsKey('thdcrossinghgt')) {
      context.handle(
          _thdcrossinghgtMeta,
          thdcrossinghgt.isAcceptableOrUnknown(
              data['thdcrossinghgt'], _thdcrossinghgtMeta));
    }
    if (data.containsKey('dmebias')) {
      context.handle(_dmebiasMeta,
          dmebias.isAcceptableOrUnknown(data['dmebias'], _dmebiasMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('dmenp')) {
      context.handle(
          _dmenpMeta, dmenp.isAcceptableOrUnknown(data['dmenp'], _dmenpMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('lat')) {
      context.handle(
          _latMeta, lat.isAcceptableOrUnknown(data['lat'], _latMeta));
    }
    if (data.containsKey('lon')) {
      context.handle(
          _lonMeta, lon.isAcceptableOrUnknown(data['lon'], _lonMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_navaid_ils map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_navaid_ils.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifNavaidIlsTable createAlias(String alias) {
    return $DafifNavaidIlsTable(_db, alias);
  }
}

class dafif_runway extends DataClass implements Insertable<dafif_runway> {
  final int id;
  final String arptident;
  final String highident;
  final String lowident;
  final String highendlatitude;
  final String highendlongitude;
  final String highendelevation;
  final String highendslope;
  final String lowendlatitude;
  final String lowendlongitude;
  final String lowendelevation;
  final String lowendslope;
  final String rwywidth;
  final String length;
  final String highendtrueheading;
  final String lowendtrueheading;
  final String highendmagneticheading;
  final String lowendmagneticheading;
  final String highendlandingdistance;
  final String lowendlandingdistance;
  final String surface;
  final String pcn;
  final String hetdze;
  final String hedt;
  final String hedtelev;
  final String hlgtsys1;
  final String hlgtsys2;
  final String hlgtsys3;
  final String hlgtsys4;
  final String hlgtsys5;
  final String hlgtsys6;
  final String hlgtsys7;
  final String hlgtsys8;
  final String lewgslat;
  final String lewgslong;
  final String hewgslat;
  final String hewgslong;
  final String letdze;
  final String ledt;
  final String ledtelev;
  final String llgtsys1;
  final String llgtsys2;
  final String llgtsys3;
  final String llgtsys4;
  final String llgtsys5;
  final String llgtsys6;
  final String llgtsys7;
  final String llgtsys8;
  final String cldrwy;
  final String hetakeoff;
  final String letakeoff;
  final String cycledate;
  final String crc32;
  final double helat;
  final double helon;
  final double lelat;
  final double lelon;
  dafif_runway(
      {@required this.id,
      this.arptident,
      this.highident,
      this.lowident,
      this.highendlatitude,
      this.highendlongitude,
      this.highendelevation,
      this.highendslope,
      this.lowendlatitude,
      this.lowendlongitude,
      this.lowendelevation,
      this.lowendslope,
      this.rwywidth,
      this.length,
      this.highendtrueheading,
      this.lowendtrueheading,
      this.highendmagneticheading,
      this.lowendmagneticheading,
      this.highendlandingdistance,
      this.lowendlandingdistance,
      this.surface,
      this.pcn,
      this.hetdze,
      this.hedt,
      this.hedtelev,
      this.hlgtsys1,
      this.hlgtsys2,
      this.hlgtsys3,
      this.hlgtsys4,
      this.hlgtsys5,
      this.hlgtsys6,
      this.hlgtsys7,
      this.hlgtsys8,
      this.lewgslat,
      this.lewgslong,
      this.hewgslat,
      this.hewgslong,
      this.letdze,
      this.ledt,
      this.ledtelev,
      this.llgtsys1,
      this.llgtsys2,
      this.llgtsys3,
      this.llgtsys4,
      this.llgtsys5,
      this.llgtsys6,
      this.llgtsys7,
      this.llgtsys8,
      this.cldrwy,
      this.hetakeoff,
      this.letakeoff,
      this.cycledate,
      this.crc32,
      this.helat,
      this.helon,
      this.lelat,
      this.lelon});
  factory dafif_runway.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_runway(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arptident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arptident']),
      highident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}highident']),
      lowident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowident']),
      highendlatitude: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}highendlatitude']),
      highendlongitude: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}highendlongitude']),
      highendelevation: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}highendelevation']),
      highendslope: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}highendslope']),
      lowendlatitude: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowendlatitude']),
      lowendlongitude: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowendlongitude']),
      lowendelevation: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowendelevation']),
      lowendslope: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowendslope']),
      rwywidth: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}rwywidth']),
      length:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}length']),
      highendtrueheading: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}highendtrueheading']),
      lowendtrueheading: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowendtrueheading']),
      highendmagneticheading: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}highendmagneticheading']),
      lowendmagneticheading: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}lowendmagneticheading']),
      highendlandingdistance: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}highendlandingdistance']),
      lowendlandingdistance: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}lowendlandingdistance']),
      surface:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}surface']),
      pcn: stringType.mapFromDatabaseResponse(data['${effectivePrefix}pcn']),
      hetdze:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}hetdze']),
      hedt: stringType.mapFromDatabaseResponse(data['${effectivePrefix}hedt']),
      hedtelev: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hedtelev']),
      hlgtsys1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys1']),
      hlgtsys2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys2']),
      hlgtsys3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys3']),
      hlgtsys4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys4']),
      hlgtsys5: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys5']),
      hlgtsys6: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys6']),
      hlgtsys7: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys7']),
      hlgtsys8: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hlgtsys8']),
      lewgslat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lewgslat']),
      lewgslong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lewgslong']),
      hewgslat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hewgslat']),
      hewgslong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hewgslong']),
      letdze:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}letdze']),
      ledt: stringType.mapFromDatabaseResponse(data['${effectivePrefix}ledt']),
      ledtelev: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ledtelev']),
      llgtsys1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys1']),
      llgtsys2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys2']),
      llgtsys3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys3']),
      llgtsys4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys4']),
      llgtsys5: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys5']),
      llgtsys6: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys6']),
      llgtsys7: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys7']),
      llgtsys8: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}llgtsys8']),
      cldrwy:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}cldrwy']),
      hetakeoff: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}hetakeoff']),
      letakeoff: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}letakeoff']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      crc32:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      helat:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}helat']),
      helon:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}helon']),
      lelat:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lelat']),
      lelon:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lelon']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arptident != null) {
      map['arptident'] = Variable<String>(arptident);
    }
    if (!nullToAbsent || highident != null) {
      map['highident'] = Variable<String>(highident);
    }
    if (!nullToAbsent || lowident != null) {
      map['lowident'] = Variable<String>(lowident);
    }
    if (!nullToAbsent || highendlatitude != null) {
      map['highendlatitude'] = Variable<String>(highendlatitude);
    }
    if (!nullToAbsent || highendlongitude != null) {
      map['highendlongitude'] = Variable<String>(highendlongitude);
    }
    if (!nullToAbsent || highendelevation != null) {
      map['highendelevation'] = Variable<String>(highendelevation);
    }
    if (!nullToAbsent || highendslope != null) {
      map['highendslope'] = Variable<String>(highendslope);
    }
    if (!nullToAbsent || lowendlatitude != null) {
      map['lowendlatitude'] = Variable<String>(lowendlatitude);
    }
    if (!nullToAbsent || lowendlongitude != null) {
      map['lowendlongitude'] = Variable<String>(lowendlongitude);
    }
    if (!nullToAbsent || lowendelevation != null) {
      map['lowendelevation'] = Variable<String>(lowendelevation);
    }
    if (!nullToAbsent || lowendslope != null) {
      map['lowendslope'] = Variable<String>(lowendslope);
    }
    if (!nullToAbsent || rwywidth != null) {
      map['rwywidth'] = Variable<String>(rwywidth);
    }
    if (!nullToAbsent || length != null) {
      map['length'] = Variable<String>(length);
    }
    if (!nullToAbsent || highendtrueheading != null) {
      map['highendtrueheading'] = Variable<String>(highendtrueheading);
    }
    if (!nullToAbsent || lowendtrueheading != null) {
      map['lowendtrueheading'] = Variable<String>(lowendtrueheading);
    }
    if (!nullToAbsent || highendmagneticheading != null) {
      map['highendmagneticheading'] = Variable<String>(highendmagneticheading);
    }
    if (!nullToAbsent || lowendmagneticheading != null) {
      map['lowendmagneticheading'] = Variable<String>(lowendmagneticheading);
    }
    if (!nullToAbsent || highendlandingdistance != null) {
      map['highendlandingdistance'] = Variable<String>(highendlandingdistance);
    }
    if (!nullToAbsent || lowendlandingdistance != null) {
      map['lowendlandingdistance'] = Variable<String>(lowendlandingdistance);
    }
    if (!nullToAbsent || surface != null) {
      map['surface'] = Variable<String>(surface);
    }
    if (!nullToAbsent || pcn != null) {
      map['pcn'] = Variable<String>(pcn);
    }
    if (!nullToAbsent || hetdze != null) {
      map['hetdze'] = Variable<String>(hetdze);
    }
    if (!nullToAbsent || hedt != null) {
      map['hedt'] = Variable<String>(hedt);
    }
    if (!nullToAbsent || hedtelev != null) {
      map['hedtelev'] = Variable<String>(hedtelev);
    }
    if (!nullToAbsent || hlgtsys1 != null) {
      map['hlgtsys1'] = Variable<String>(hlgtsys1);
    }
    if (!nullToAbsent || hlgtsys2 != null) {
      map['hlgtsys2'] = Variable<String>(hlgtsys2);
    }
    if (!nullToAbsent || hlgtsys3 != null) {
      map['hlgtsys3'] = Variable<String>(hlgtsys3);
    }
    if (!nullToAbsent || hlgtsys4 != null) {
      map['hlgtsys4'] = Variable<String>(hlgtsys4);
    }
    if (!nullToAbsent || hlgtsys5 != null) {
      map['hlgtsys5'] = Variable<String>(hlgtsys5);
    }
    if (!nullToAbsent || hlgtsys6 != null) {
      map['hlgtsys6'] = Variable<String>(hlgtsys6);
    }
    if (!nullToAbsent || hlgtsys7 != null) {
      map['hlgtsys7'] = Variable<String>(hlgtsys7);
    }
    if (!nullToAbsent || hlgtsys8 != null) {
      map['hlgtsys8'] = Variable<String>(hlgtsys8);
    }
    if (!nullToAbsent || lewgslat != null) {
      map['lewgslat'] = Variable<String>(lewgslat);
    }
    if (!nullToAbsent || lewgslong != null) {
      map['lewgslong'] = Variable<String>(lewgslong);
    }
    if (!nullToAbsent || hewgslat != null) {
      map['hewgslat'] = Variable<String>(hewgslat);
    }
    if (!nullToAbsent || hewgslong != null) {
      map['hewgslong'] = Variable<String>(hewgslong);
    }
    if (!nullToAbsent || letdze != null) {
      map['letdze'] = Variable<String>(letdze);
    }
    if (!nullToAbsent || ledt != null) {
      map['ledt'] = Variable<String>(ledt);
    }
    if (!nullToAbsent || ledtelev != null) {
      map['ledtelev'] = Variable<String>(ledtelev);
    }
    if (!nullToAbsent || llgtsys1 != null) {
      map['llgtsys1'] = Variable<String>(llgtsys1);
    }
    if (!nullToAbsent || llgtsys2 != null) {
      map['llgtsys2'] = Variable<String>(llgtsys2);
    }
    if (!nullToAbsent || llgtsys3 != null) {
      map['llgtsys3'] = Variable<String>(llgtsys3);
    }
    if (!nullToAbsent || llgtsys4 != null) {
      map['llgtsys4'] = Variable<String>(llgtsys4);
    }
    if (!nullToAbsent || llgtsys5 != null) {
      map['llgtsys5'] = Variable<String>(llgtsys5);
    }
    if (!nullToAbsent || llgtsys6 != null) {
      map['llgtsys6'] = Variable<String>(llgtsys6);
    }
    if (!nullToAbsent || llgtsys7 != null) {
      map['llgtsys7'] = Variable<String>(llgtsys7);
    }
    if (!nullToAbsent || llgtsys8 != null) {
      map['llgtsys8'] = Variable<String>(llgtsys8);
    }
    if (!nullToAbsent || cldrwy != null) {
      map['cldrwy'] = Variable<String>(cldrwy);
    }
    if (!nullToAbsent || hetakeoff != null) {
      map['hetakeoff'] = Variable<String>(hetakeoff);
    }
    if (!nullToAbsent || letakeoff != null) {
      map['letakeoff'] = Variable<String>(letakeoff);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<String>(crc32);
    }
    if (!nullToAbsent || helat != null) {
      map['helat'] = Variable<double>(helat);
    }
    if (!nullToAbsent || helon != null) {
      map['helon'] = Variable<double>(helon);
    }
    if (!nullToAbsent || lelat != null) {
      map['lelat'] = Variable<double>(lelat);
    }
    if (!nullToAbsent || lelon != null) {
      map['lelon'] = Variable<double>(lelon);
    }
    return map;
  }

  factory dafif_runway.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_runway(
      id: serializer.fromJson<int>(json['id']),
      arptident: serializer.fromJson<String>(json['arptident']),
      highident: serializer.fromJson<String>(json['highident']),
      lowident: serializer.fromJson<String>(json['lowident']),
      highendlatitude: serializer.fromJson<String>(json['highendlatitude']),
      highendlongitude: serializer.fromJson<String>(json['highendlongitude']),
      highendelevation: serializer.fromJson<String>(json['highendelevation']),
      highendslope: serializer.fromJson<String>(json['highendslope']),
      lowendlatitude: serializer.fromJson<String>(json['lowendlatitude']),
      lowendlongitude: serializer.fromJson<String>(json['lowendlongitude']),
      lowendelevation: serializer.fromJson<String>(json['lowendelevation']),
      lowendslope: serializer.fromJson<String>(json['lowendslope']),
      rwywidth: serializer.fromJson<String>(json['rwywidth']),
      length: serializer.fromJson<String>(json['length']),
      highendtrueheading:
          serializer.fromJson<String>(json['highendtrueheading']),
      lowendtrueheading: serializer.fromJson<String>(json['lowendtrueheading']),
      highendmagneticheading:
          serializer.fromJson<String>(json['highendmagneticheading']),
      lowendmagneticheading:
          serializer.fromJson<String>(json['lowendmagneticheading']),
      highendlandingdistance:
          serializer.fromJson<String>(json['highendlandingdistance']),
      lowendlandingdistance:
          serializer.fromJson<String>(json['lowendlandingdistance']),
      surface: serializer.fromJson<String>(json['surface']),
      pcn: serializer.fromJson<String>(json['pcn']),
      hetdze: serializer.fromJson<String>(json['hetdze']),
      hedt: serializer.fromJson<String>(json['hedt']),
      hedtelev: serializer.fromJson<String>(json['hedtelev']),
      hlgtsys1: serializer.fromJson<String>(json['hlgtsys1']),
      hlgtsys2: serializer.fromJson<String>(json['hlgtsys2']),
      hlgtsys3: serializer.fromJson<String>(json['hlgtsys3']),
      hlgtsys4: serializer.fromJson<String>(json['hlgtsys4']),
      hlgtsys5: serializer.fromJson<String>(json['hlgtsys5']),
      hlgtsys6: serializer.fromJson<String>(json['hlgtsys6']),
      hlgtsys7: serializer.fromJson<String>(json['hlgtsys7']),
      hlgtsys8: serializer.fromJson<String>(json['hlgtsys8']),
      lewgslat: serializer.fromJson<String>(json['lewgslat']),
      lewgslong: serializer.fromJson<String>(json['lewgslong']),
      hewgslat: serializer.fromJson<String>(json['hewgslat']),
      hewgslong: serializer.fromJson<String>(json['hewgslong']),
      letdze: serializer.fromJson<String>(json['letdze']),
      ledt: serializer.fromJson<String>(json['ledt']),
      ledtelev: serializer.fromJson<String>(json['ledtelev']),
      llgtsys1: serializer.fromJson<String>(json['llgtsys1']),
      llgtsys2: serializer.fromJson<String>(json['llgtsys2']),
      llgtsys3: serializer.fromJson<String>(json['llgtsys3']),
      llgtsys4: serializer.fromJson<String>(json['llgtsys4']),
      llgtsys5: serializer.fromJson<String>(json['llgtsys5']),
      llgtsys6: serializer.fromJson<String>(json['llgtsys6']),
      llgtsys7: serializer.fromJson<String>(json['llgtsys7']),
      llgtsys8: serializer.fromJson<String>(json['llgtsys8']),
      cldrwy: serializer.fromJson<String>(json['cldrwy']),
      hetakeoff: serializer.fromJson<String>(json['hetakeoff']),
      letakeoff: serializer.fromJson<String>(json['letakeoff']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      crc32: serializer.fromJson<String>(json['crc32']),
      helat: serializer.fromJson<double>(json['helat']),
      helon: serializer.fromJson<double>(json['helon']),
      lelat: serializer.fromJson<double>(json['lelat']),
      lelon: serializer.fromJson<double>(json['lelon']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arptident': serializer.toJson<String>(arptident),
      'highident': serializer.toJson<String>(highident),
      'lowident': serializer.toJson<String>(lowident),
      'highendlatitude': serializer.toJson<String>(highendlatitude),
      'highendlongitude': serializer.toJson<String>(highendlongitude),
      'highendelevation': serializer.toJson<String>(highendelevation),
      'highendslope': serializer.toJson<String>(highendslope),
      'lowendlatitude': serializer.toJson<String>(lowendlatitude),
      'lowendlongitude': serializer.toJson<String>(lowendlongitude),
      'lowendelevation': serializer.toJson<String>(lowendelevation),
      'lowendslope': serializer.toJson<String>(lowendslope),
      'rwywidth': serializer.toJson<String>(rwywidth),
      'length': serializer.toJson<String>(length),
      'highendtrueheading': serializer.toJson<String>(highendtrueheading),
      'lowendtrueheading': serializer.toJson<String>(lowendtrueheading),
      'highendmagneticheading':
          serializer.toJson<String>(highendmagneticheading),
      'lowendmagneticheading': serializer.toJson<String>(lowendmagneticheading),
      'highendlandingdistance':
          serializer.toJson<String>(highendlandingdistance),
      'lowendlandingdistance': serializer.toJson<String>(lowendlandingdistance),
      'surface': serializer.toJson<String>(surface),
      'pcn': serializer.toJson<String>(pcn),
      'hetdze': serializer.toJson<String>(hetdze),
      'hedt': serializer.toJson<String>(hedt),
      'hedtelev': serializer.toJson<String>(hedtelev),
      'hlgtsys1': serializer.toJson<String>(hlgtsys1),
      'hlgtsys2': serializer.toJson<String>(hlgtsys2),
      'hlgtsys3': serializer.toJson<String>(hlgtsys3),
      'hlgtsys4': serializer.toJson<String>(hlgtsys4),
      'hlgtsys5': serializer.toJson<String>(hlgtsys5),
      'hlgtsys6': serializer.toJson<String>(hlgtsys6),
      'hlgtsys7': serializer.toJson<String>(hlgtsys7),
      'hlgtsys8': serializer.toJson<String>(hlgtsys8),
      'lewgslat': serializer.toJson<String>(lewgslat),
      'lewgslong': serializer.toJson<String>(lewgslong),
      'hewgslat': serializer.toJson<String>(hewgslat),
      'hewgslong': serializer.toJson<String>(hewgslong),
      'letdze': serializer.toJson<String>(letdze),
      'ledt': serializer.toJson<String>(ledt),
      'ledtelev': serializer.toJson<String>(ledtelev),
      'llgtsys1': serializer.toJson<String>(llgtsys1),
      'llgtsys2': serializer.toJson<String>(llgtsys2),
      'llgtsys3': serializer.toJson<String>(llgtsys3),
      'llgtsys4': serializer.toJson<String>(llgtsys4),
      'llgtsys5': serializer.toJson<String>(llgtsys5),
      'llgtsys6': serializer.toJson<String>(llgtsys6),
      'llgtsys7': serializer.toJson<String>(llgtsys7),
      'llgtsys8': serializer.toJson<String>(llgtsys8),
      'cldrwy': serializer.toJson<String>(cldrwy),
      'hetakeoff': serializer.toJson<String>(hetakeoff),
      'letakeoff': serializer.toJson<String>(letakeoff),
      'cycledate': serializer.toJson<String>(cycledate),
      'crc32': serializer.toJson<String>(crc32),
      'helat': serializer.toJson<double>(helat),
      'helon': serializer.toJson<double>(helon),
      'lelat': serializer.toJson<double>(lelat),
      'lelon': serializer.toJson<double>(lelon),
    };
  }

  dafif_runway copyWith(
          {int id,
          String arptident,
          String highident,
          String lowident,
          String highendlatitude,
          String highendlongitude,
          String highendelevation,
          String highendslope,
          String lowendlatitude,
          String lowendlongitude,
          String lowendelevation,
          String lowendslope,
          String rwywidth,
          String length,
          String highendtrueheading,
          String lowendtrueheading,
          String highendmagneticheading,
          String lowendmagneticheading,
          String highendlandingdistance,
          String lowendlandingdistance,
          String surface,
          String pcn,
          String hetdze,
          String hedt,
          String hedtelev,
          String hlgtsys1,
          String hlgtsys2,
          String hlgtsys3,
          String hlgtsys4,
          String hlgtsys5,
          String hlgtsys6,
          String hlgtsys7,
          String hlgtsys8,
          String lewgslat,
          String lewgslong,
          String hewgslat,
          String hewgslong,
          String letdze,
          String ledt,
          String ledtelev,
          String llgtsys1,
          String llgtsys2,
          String llgtsys3,
          String llgtsys4,
          String llgtsys5,
          String llgtsys6,
          String llgtsys7,
          String llgtsys8,
          String cldrwy,
          String hetakeoff,
          String letakeoff,
          String cycledate,
          String crc32,
          double helat,
          double helon,
          double lelat,
          double lelon}) =>
      dafif_runway(
        id: id ?? this.id,
        arptident: arptident ?? this.arptident,
        highident: highident ?? this.highident,
        lowident: lowident ?? this.lowident,
        highendlatitude: highendlatitude ?? this.highendlatitude,
        highendlongitude: highendlongitude ?? this.highendlongitude,
        highendelevation: highendelevation ?? this.highendelevation,
        highendslope: highendslope ?? this.highendslope,
        lowendlatitude: lowendlatitude ?? this.lowendlatitude,
        lowendlongitude: lowendlongitude ?? this.lowendlongitude,
        lowendelevation: lowendelevation ?? this.lowendelevation,
        lowendslope: lowendslope ?? this.lowendslope,
        rwywidth: rwywidth ?? this.rwywidth,
        length: length ?? this.length,
        highendtrueheading: highendtrueheading ?? this.highendtrueheading,
        lowendtrueheading: lowendtrueheading ?? this.lowendtrueheading,
        highendmagneticheading:
            highendmagneticheading ?? this.highendmagneticheading,
        lowendmagneticheading:
            lowendmagneticheading ?? this.lowendmagneticheading,
        highendlandingdistance:
            highendlandingdistance ?? this.highendlandingdistance,
        lowendlandingdistance:
            lowendlandingdistance ?? this.lowendlandingdistance,
        surface: surface ?? this.surface,
        pcn: pcn ?? this.pcn,
        hetdze: hetdze ?? this.hetdze,
        hedt: hedt ?? this.hedt,
        hedtelev: hedtelev ?? this.hedtelev,
        hlgtsys1: hlgtsys1 ?? this.hlgtsys1,
        hlgtsys2: hlgtsys2 ?? this.hlgtsys2,
        hlgtsys3: hlgtsys3 ?? this.hlgtsys3,
        hlgtsys4: hlgtsys4 ?? this.hlgtsys4,
        hlgtsys5: hlgtsys5 ?? this.hlgtsys5,
        hlgtsys6: hlgtsys6 ?? this.hlgtsys6,
        hlgtsys7: hlgtsys7 ?? this.hlgtsys7,
        hlgtsys8: hlgtsys8 ?? this.hlgtsys8,
        lewgslat: lewgslat ?? this.lewgslat,
        lewgslong: lewgslong ?? this.lewgslong,
        hewgslat: hewgslat ?? this.hewgslat,
        hewgslong: hewgslong ?? this.hewgslong,
        letdze: letdze ?? this.letdze,
        ledt: ledt ?? this.ledt,
        ledtelev: ledtelev ?? this.ledtelev,
        llgtsys1: llgtsys1 ?? this.llgtsys1,
        llgtsys2: llgtsys2 ?? this.llgtsys2,
        llgtsys3: llgtsys3 ?? this.llgtsys3,
        llgtsys4: llgtsys4 ?? this.llgtsys4,
        llgtsys5: llgtsys5 ?? this.llgtsys5,
        llgtsys6: llgtsys6 ?? this.llgtsys6,
        llgtsys7: llgtsys7 ?? this.llgtsys7,
        llgtsys8: llgtsys8 ?? this.llgtsys8,
        cldrwy: cldrwy ?? this.cldrwy,
        hetakeoff: hetakeoff ?? this.hetakeoff,
        letakeoff: letakeoff ?? this.letakeoff,
        cycledate: cycledate ?? this.cycledate,
        crc32: crc32 ?? this.crc32,
        helat: helat ?? this.helat,
        helon: helon ?? this.helon,
        lelat: lelat ?? this.lelat,
        lelon: lelon ?? this.lelon,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_runway(')
          ..write('id: $id, ')
          ..write('arptident: $arptident, ')
          ..write('highident: $highident, ')
          ..write('lowident: $lowident, ')
          ..write('highendlatitude: $highendlatitude, ')
          ..write('highendlongitude: $highendlongitude, ')
          ..write('highendelevation: $highendelevation, ')
          ..write('highendslope: $highendslope, ')
          ..write('lowendlatitude: $lowendlatitude, ')
          ..write('lowendlongitude: $lowendlongitude, ')
          ..write('lowendelevation: $lowendelevation, ')
          ..write('lowendslope: $lowendslope, ')
          ..write('rwywidth: $rwywidth, ')
          ..write('length: $length, ')
          ..write('highendtrueheading: $highendtrueheading, ')
          ..write('lowendtrueheading: $lowendtrueheading, ')
          ..write('highendmagneticheading: $highendmagneticheading, ')
          ..write('lowendmagneticheading: $lowendmagneticheading, ')
          ..write('highendlandingdistance: $highendlandingdistance, ')
          ..write('lowendlandingdistance: $lowendlandingdistance, ')
          ..write('surface: $surface, ')
          ..write('pcn: $pcn, ')
          ..write('hetdze: $hetdze, ')
          ..write('hedt: $hedt, ')
          ..write('hedtelev: $hedtelev, ')
          ..write('hlgtsys1: $hlgtsys1, ')
          ..write('hlgtsys2: $hlgtsys2, ')
          ..write('hlgtsys3: $hlgtsys3, ')
          ..write('hlgtsys4: $hlgtsys4, ')
          ..write('hlgtsys5: $hlgtsys5, ')
          ..write('hlgtsys6: $hlgtsys6, ')
          ..write('hlgtsys7: $hlgtsys7, ')
          ..write('hlgtsys8: $hlgtsys8, ')
          ..write('lewgslat: $lewgslat, ')
          ..write('lewgslong: $lewgslong, ')
          ..write('hewgslat: $hewgslat, ')
          ..write('hewgslong: $hewgslong, ')
          ..write('letdze: $letdze, ')
          ..write('ledt: $ledt, ')
          ..write('ledtelev: $ledtelev, ')
          ..write('llgtsys1: $llgtsys1, ')
          ..write('llgtsys2: $llgtsys2, ')
          ..write('llgtsys3: $llgtsys3, ')
          ..write('llgtsys4: $llgtsys4, ')
          ..write('llgtsys5: $llgtsys5, ')
          ..write('llgtsys6: $llgtsys6, ')
          ..write('llgtsys7: $llgtsys7, ')
          ..write('llgtsys8: $llgtsys8, ')
          ..write('cldrwy: $cldrwy, ')
          ..write('hetakeoff: $hetakeoff, ')
          ..write('letakeoff: $letakeoff, ')
          ..write('cycledate: $cycledate, ')
          ..write('crc32: $crc32, ')
          ..write('helat: $helat, ')
          ..write('helon: $helon, ')
          ..write('lelat: $lelat, ')
          ..write('lelon: $lelon')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arptident.hashCode,
          $mrjc(
              highident.hashCode,
              $mrjc(
                  lowident.hashCode,
                  $mrjc(
                      highendlatitude.hashCode,
                      $mrjc(
                          highendlongitude.hashCode,
                          $mrjc(
                              highendelevation.hashCode,
                              $mrjc(
                                  highendslope.hashCode,
                                  $mrjc(
                                      lowendlatitude.hashCode,
                                      $mrjc(
                                          lowendlongitude.hashCode,
                                          $mrjc(
                                              lowendelevation.hashCode,
                                              $mrjc(
                                                  lowendslope.hashCode,
                                                  $mrjc(
                                                      rwywidth.hashCode,
                                                      $mrjc(
                                                          length.hashCode,
                                                          $mrjc(
                                                              highendtrueheading
                                                                  .hashCode,
                                                              $mrjc(
                                                                  lowendtrueheading
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      highendmagneticheading
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          lowendmagneticheading
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              highendlandingdistance.hashCode,
                                                                              $mrjc(lowendlandingdistance.hashCode, $mrjc(surface.hashCode, $mrjc(pcn.hashCode, $mrjc(hetdze.hashCode, $mrjc(hedt.hashCode, $mrjc(hedtelev.hashCode, $mrjc(hlgtsys1.hashCode, $mrjc(hlgtsys2.hashCode, $mrjc(hlgtsys3.hashCode, $mrjc(hlgtsys4.hashCode, $mrjc(hlgtsys5.hashCode, $mrjc(hlgtsys6.hashCode, $mrjc(hlgtsys7.hashCode, $mrjc(hlgtsys8.hashCode, $mrjc(lewgslat.hashCode, $mrjc(lewgslong.hashCode, $mrjc(hewgslat.hashCode, $mrjc(hewgslong.hashCode, $mrjc(letdze.hashCode, $mrjc(ledt.hashCode, $mrjc(ledtelev.hashCode, $mrjc(llgtsys1.hashCode, $mrjc(llgtsys2.hashCode, $mrjc(llgtsys3.hashCode, $mrjc(llgtsys4.hashCode, $mrjc(llgtsys5.hashCode, $mrjc(llgtsys6.hashCode, $mrjc(llgtsys7.hashCode, $mrjc(llgtsys8.hashCode, $mrjc(cldrwy.hashCode, $mrjc(hetakeoff.hashCode, $mrjc(letakeoff.hashCode, $mrjc(cycledate.hashCode, $mrjc(crc32.hashCode, $mrjc(helat.hashCode, $mrjc(helon.hashCode, $mrjc(lelat.hashCode, lelon.hashCode)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_runway &&
          other.id == this.id &&
          other.arptident == this.arptident &&
          other.highident == this.highident &&
          other.lowident == this.lowident &&
          other.highendlatitude == this.highendlatitude &&
          other.highendlongitude == this.highendlongitude &&
          other.highendelevation == this.highendelevation &&
          other.highendslope == this.highendslope &&
          other.lowendlatitude == this.lowendlatitude &&
          other.lowendlongitude == this.lowendlongitude &&
          other.lowendelevation == this.lowendelevation &&
          other.lowendslope == this.lowendslope &&
          other.rwywidth == this.rwywidth &&
          other.length == this.length &&
          other.highendtrueheading == this.highendtrueheading &&
          other.lowendtrueheading == this.lowendtrueheading &&
          other.highendmagneticheading == this.highendmagneticheading &&
          other.lowendmagneticheading == this.lowendmagneticheading &&
          other.highendlandingdistance == this.highendlandingdistance &&
          other.lowendlandingdistance == this.lowendlandingdistance &&
          other.surface == this.surface &&
          other.pcn == this.pcn &&
          other.hetdze == this.hetdze &&
          other.hedt == this.hedt &&
          other.hedtelev == this.hedtelev &&
          other.hlgtsys1 == this.hlgtsys1 &&
          other.hlgtsys2 == this.hlgtsys2 &&
          other.hlgtsys3 == this.hlgtsys3 &&
          other.hlgtsys4 == this.hlgtsys4 &&
          other.hlgtsys5 == this.hlgtsys5 &&
          other.hlgtsys6 == this.hlgtsys6 &&
          other.hlgtsys7 == this.hlgtsys7 &&
          other.hlgtsys8 == this.hlgtsys8 &&
          other.lewgslat == this.lewgslat &&
          other.lewgslong == this.lewgslong &&
          other.hewgslat == this.hewgslat &&
          other.hewgslong == this.hewgslong &&
          other.letdze == this.letdze &&
          other.ledt == this.ledt &&
          other.ledtelev == this.ledtelev &&
          other.llgtsys1 == this.llgtsys1 &&
          other.llgtsys2 == this.llgtsys2 &&
          other.llgtsys3 == this.llgtsys3 &&
          other.llgtsys4 == this.llgtsys4 &&
          other.llgtsys5 == this.llgtsys5 &&
          other.llgtsys6 == this.llgtsys6 &&
          other.llgtsys7 == this.llgtsys7 &&
          other.llgtsys8 == this.llgtsys8 &&
          other.cldrwy == this.cldrwy &&
          other.hetakeoff == this.hetakeoff &&
          other.letakeoff == this.letakeoff &&
          other.cycledate == this.cycledate &&
          other.crc32 == this.crc32 &&
          other.helat == this.helat &&
          other.helon == this.helon &&
          other.lelat == this.lelat &&
          other.lelon == this.lelon);
}

class DafifRunwayCompanion extends UpdateCompanion<dafif_runway> {
  final Value<int> id;
  final Value<String> arptident;
  final Value<String> highident;
  final Value<String> lowident;
  final Value<String> highendlatitude;
  final Value<String> highendlongitude;
  final Value<String> highendelevation;
  final Value<String> highendslope;
  final Value<String> lowendlatitude;
  final Value<String> lowendlongitude;
  final Value<String> lowendelevation;
  final Value<String> lowendslope;
  final Value<String> rwywidth;
  final Value<String> length;
  final Value<String> highendtrueheading;
  final Value<String> lowendtrueheading;
  final Value<String> highendmagneticheading;
  final Value<String> lowendmagneticheading;
  final Value<String> highendlandingdistance;
  final Value<String> lowendlandingdistance;
  final Value<String> surface;
  final Value<String> pcn;
  final Value<String> hetdze;
  final Value<String> hedt;
  final Value<String> hedtelev;
  final Value<String> hlgtsys1;
  final Value<String> hlgtsys2;
  final Value<String> hlgtsys3;
  final Value<String> hlgtsys4;
  final Value<String> hlgtsys5;
  final Value<String> hlgtsys6;
  final Value<String> hlgtsys7;
  final Value<String> hlgtsys8;
  final Value<String> lewgslat;
  final Value<String> lewgslong;
  final Value<String> hewgslat;
  final Value<String> hewgslong;
  final Value<String> letdze;
  final Value<String> ledt;
  final Value<String> ledtelev;
  final Value<String> llgtsys1;
  final Value<String> llgtsys2;
  final Value<String> llgtsys3;
  final Value<String> llgtsys4;
  final Value<String> llgtsys5;
  final Value<String> llgtsys6;
  final Value<String> llgtsys7;
  final Value<String> llgtsys8;
  final Value<String> cldrwy;
  final Value<String> hetakeoff;
  final Value<String> letakeoff;
  final Value<String> cycledate;
  final Value<String> crc32;
  final Value<double> helat;
  final Value<double> helon;
  final Value<double> lelat;
  final Value<double> lelon;
  const DafifRunwayCompanion({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.highident = const Value.absent(),
    this.lowident = const Value.absent(),
    this.highendlatitude = const Value.absent(),
    this.highendlongitude = const Value.absent(),
    this.highendelevation = const Value.absent(),
    this.highendslope = const Value.absent(),
    this.lowendlatitude = const Value.absent(),
    this.lowendlongitude = const Value.absent(),
    this.lowendelevation = const Value.absent(),
    this.lowendslope = const Value.absent(),
    this.rwywidth = const Value.absent(),
    this.length = const Value.absent(),
    this.highendtrueheading = const Value.absent(),
    this.lowendtrueheading = const Value.absent(),
    this.highendmagneticheading = const Value.absent(),
    this.lowendmagneticheading = const Value.absent(),
    this.highendlandingdistance = const Value.absent(),
    this.lowendlandingdistance = const Value.absent(),
    this.surface = const Value.absent(),
    this.pcn = const Value.absent(),
    this.hetdze = const Value.absent(),
    this.hedt = const Value.absent(),
    this.hedtelev = const Value.absent(),
    this.hlgtsys1 = const Value.absent(),
    this.hlgtsys2 = const Value.absent(),
    this.hlgtsys3 = const Value.absent(),
    this.hlgtsys4 = const Value.absent(),
    this.hlgtsys5 = const Value.absent(),
    this.hlgtsys6 = const Value.absent(),
    this.hlgtsys7 = const Value.absent(),
    this.hlgtsys8 = const Value.absent(),
    this.lewgslat = const Value.absent(),
    this.lewgslong = const Value.absent(),
    this.hewgslat = const Value.absent(),
    this.hewgslong = const Value.absent(),
    this.letdze = const Value.absent(),
    this.ledt = const Value.absent(),
    this.ledtelev = const Value.absent(),
    this.llgtsys1 = const Value.absent(),
    this.llgtsys2 = const Value.absent(),
    this.llgtsys3 = const Value.absent(),
    this.llgtsys4 = const Value.absent(),
    this.llgtsys5 = const Value.absent(),
    this.llgtsys6 = const Value.absent(),
    this.llgtsys7 = const Value.absent(),
    this.llgtsys8 = const Value.absent(),
    this.cldrwy = const Value.absent(),
    this.hetakeoff = const Value.absent(),
    this.letakeoff = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.helat = const Value.absent(),
    this.helon = const Value.absent(),
    this.lelat = const Value.absent(),
    this.lelon = const Value.absent(),
  });
  DafifRunwayCompanion.insert({
    this.id = const Value.absent(),
    this.arptident = const Value.absent(),
    this.highident = const Value.absent(),
    this.lowident = const Value.absent(),
    this.highendlatitude = const Value.absent(),
    this.highendlongitude = const Value.absent(),
    this.highendelevation = const Value.absent(),
    this.highendslope = const Value.absent(),
    this.lowendlatitude = const Value.absent(),
    this.lowendlongitude = const Value.absent(),
    this.lowendelevation = const Value.absent(),
    this.lowendslope = const Value.absent(),
    this.rwywidth = const Value.absent(),
    this.length = const Value.absent(),
    this.highendtrueheading = const Value.absent(),
    this.lowendtrueheading = const Value.absent(),
    this.highendmagneticheading = const Value.absent(),
    this.lowendmagneticheading = const Value.absent(),
    this.highendlandingdistance = const Value.absent(),
    this.lowendlandingdistance = const Value.absent(),
    this.surface = const Value.absent(),
    this.pcn = const Value.absent(),
    this.hetdze = const Value.absent(),
    this.hedt = const Value.absent(),
    this.hedtelev = const Value.absent(),
    this.hlgtsys1 = const Value.absent(),
    this.hlgtsys2 = const Value.absent(),
    this.hlgtsys3 = const Value.absent(),
    this.hlgtsys4 = const Value.absent(),
    this.hlgtsys5 = const Value.absent(),
    this.hlgtsys6 = const Value.absent(),
    this.hlgtsys7 = const Value.absent(),
    this.hlgtsys8 = const Value.absent(),
    this.lewgslat = const Value.absent(),
    this.lewgslong = const Value.absent(),
    this.hewgslat = const Value.absent(),
    this.hewgslong = const Value.absent(),
    this.letdze = const Value.absent(),
    this.ledt = const Value.absent(),
    this.ledtelev = const Value.absent(),
    this.llgtsys1 = const Value.absent(),
    this.llgtsys2 = const Value.absent(),
    this.llgtsys3 = const Value.absent(),
    this.llgtsys4 = const Value.absent(),
    this.llgtsys5 = const Value.absent(),
    this.llgtsys6 = const Value.absent(),
    this.llgtsys7 = const Value.absent(),
    this.llgtsys8 = const Value.absent(),
    this.cldrwy = const Value.absent(),
    this.hetakeoff = const Value.absent(),
    this.letakeoff = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.helat = const Value.absent(),
    this.helon = const Value.absent(),
    this.lelat = const Value.absent(),
    this.lelon = const Value.absent(),
  });
  static Insertable<dafif_runway> custom({
    Expression<int> id,
    Expression<String> arptident,
    Expression<String> highident,
    Expression<String> lowident,
    Expression<String> highendlatitude,
    Expression<String> highendlongitude,
    Expression<String> highendelevation,
    Expression<String> highendslope,
    Expression<String> lowendlatitude,
    Expression<String> lowendlongitude,
    Expression<String> lowendelevation,
    Expression<String> lowendslope,
    Expression<String> rwywidth,
    Expression<String> length,
    Expression<String> highendtrueheading,
    Expression<String> lowendtrueheading,
    Expression<String> highendmagneticheading,
    Expression<String> lowendmagneticheading,
    Expression<String> highendlandingdistance,
    Expression<String> lowendlandingdistance,
    Expression<String> surface,
    Expression<String> pcn,
    Expression<String> hetdze,
    Expression<String> hedt,
    Expression<String> hedtelev,
    Expression<String> hlgtsys1,
    Expression<String> hlgtsys2,
    Expression<String> hlgtsys3,
    Expression<String> hlgtsys4,
    Expression<String> hlgtsys5,
    Expression<String> hlgtsys6,
    Expression<String> hlgtsys7,
    Expression<String> hlgtsys8,
    Expression<String> lewgslat,
    Expression<String> lewgslong,
    Expression<String> hewgslat,
    Expression<String> hewgslong,
    Expression<String> letdze,
    Expression<String> ledt,
    Expression<String> ledtelev,
    Expression<String> llgtsys1,
    Expression<String> llgtsys2,
    Expression<String> llgtsys3,
    Expression<String> llgtsys4,
    Expression<String> llgtsys5,
    Expression<String> llgtsys6,
    Expression<String> llgtsys7,
    Expression<String> llgtsys8,
    Expression<String> cldrwy,
    Expression<String> hetakeoff,
    Expression<String> letakeoff,
    Expression<String> cycledate,
    Expression<String> crc32,
    Expression<double> helat,
    Expression<double> helon,
    Expression<double> lelat,
    Expression<double> lelon,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arptident != null) 'arptident': arptident,
      if (highident != null) 'highident': highident,
      if (lowident != null) 'lowident': lowident,
      if (highendlatitude != null) 'highendlatitude': highendlatitude,
      if (highendlongitude != null) 'highendlongitude': highendlongitude,
      if (highendelevation != null) 'highendelevation': highendelevation,
      if (highendslope != null) 'highendslope': highendslope,
      if (lowendlatitude != null) 'lowendlatitude': lowendlatitude,
      if (lowendlongitude != null) 'lowendlongitude': lowendlongitude,
      if (lowendelevation != null) 'lowendelevation': lowendelevation,
      if (lowendslope != null) 'lowendslope': lowendslope,
      if (rwywidth != null) 'rwywidth': rwywidth,
      if (length != null) 'length': length,
      if (highendtrueheading != null) 'highendtrueheading': highendtrueheading,
      if (lowendtrueheading != null) 'lowendtrueheading': lowendtrueheading,
      if (highendmagneticheading != null)
        'highendmagneticheading': highendmagneticheading,
      if (lowendmagneticheading != null)
        'lowendmagneticheading': lowendmagneticheading,
      if (highendlandingdistance != null)
        'highendlandingdistance': highendlandingdistance,
      if (lowendlandingdistance != null)
        'lowendlandingdistance': lowendlandingdistance,
      if (surface != null) 'surface': surface,
      if (pcn != null) 'pcn': pcn,
      if (hetdze != null) 'hetdze': hetdze,
      if (hedt != null) 'hedt': hedt,
      if (hedtelev != null) 'hedtelev': hedtelev,
      if (hlgtsys1 != null) 'hlgtsys1': hlgtsys1,
      if (hlgtsys2 != null) 'hlgtsys2': hlgtsys2,
      if (hlgtsys3 != null) 'hlgtsys3': hlgtsys3,
      if (hlgtsys4 != null) 'hlgtsys4': hlgtsys4,
      if (hlgtsys5 != null) 'hlgtsys5': hlgtsys5,
      if (hlgtsys6 != null) 'hlgtsys6': hlgtsys6,
      if (hlgtsys7 != null) 'hlgtsys7': hlgtsys7,
      if (hlgtsys8 != null) 'hlgtsys8': hlgtsys8,
      if (lewgslat != null) 'lewgslat': lewgslat,
      if (lewgslong != null) 'lewgslong': lewgslong,
      if (hewgslat != null) 'hewgslat': hewgslat,
      if (hewgslong != null) 'hewgslong': hewgslong,
      if (letdze != null) 'letdze': letdze,
      if (ledt != null) 'ledt': ledt,
      if (ledtelev != null) 'ledtelev': ledtelev,
      if (llgtsys1 != null) 'llgtsys1': llgtsys1,
      if (llgtsys2 != null) 'llgtsys2': llgtsys2,
      if (llgtsys3 != null) 'llgtsys3': llgtsys3,
      if (llgtsys4 != null) 'llgtsys4': llgtsys4,
      if (llgtsys5 != null) 'llgtsys5': llgtsys5,
      if (llgtsys6 != null) 'llgtsys6': llgtsys6,
      if (llgtsys7 != null) 'llgtsys7': llgtsys7,
      if (llgtsys8 != null) 'llgtsys8': llgtsys8,
      if (cldrwy != null) 'cldrwy': cldrwy,
      if (hetakeoff != null) 'hetakeoff': hetakeoff,
      if (letakeoff != null) 'letakeoff': letakeoff,
      if (cycledate != null) 'cycledate': cycledate,
      if (crc32 != null) 'crc32': crc32,
      if (helat != null) 'helat': helat,
      if (helon != null) 'helon': helon,
      if (lelat != null) 'lelat': lelat,
      if (lelon != null) 'lelon': lelon,
    });
  }

  DafifRunwayCompanion copyWith(
      {Value<int> id,
      Value<String> arptident,
      Value<String> highident,
      Value<String> lowident,
      Value<String> highendlatitude,
      Value<String> highendlongitude,
      Value<String> highendelevation,
      Value<String> highendslope,
      Value<String> lowendlatitude,
      Value<String> lowendlongitude,
      Value<String> lowendelevation,
      Value<String> lowendslope,
      Value<String> rwywidth,
      Value<String> length,
      Value<String> highendtrueheading,
      Value<String> lowendtrueheading,
      Value<String> highendmagneticheading,
      Value<String> lowendmagneticheading,
      Value<String> highendlandingdistance,
      Value<String> lowendlandingdistance,
      Value<String> surface,
      Value<String> pcn,
      Value<String> hetdze,
      Value<String> hedt,
      Value<String> hedtelev,
      Value<String> hlgtsys1,
      Value<String> hlgtsys2,
      Value<String> hlgtsys3,
      Value<String> hlgtsys4,
      Value<String> hlgtsys5,
      Value<String> hlgtsys6,
      Value<String> hlgtsys7,
      Value<String> hlgtsys8,
      Value<String> lewgslat,
      Value<String> lewgslong,
      Value<String> hewgslat,
      Value<String> hewgslong,
      Value<String> letdze,
      Value<String> ledt,
      Value<String> ledtelev,
      Value<String> llgtsys1,
      Value<String> llgtsys2,
      Value<String> llgtsys3,
      Value<String> llgtsys4,
      Value<String> llgtsys5,
      Value<String> llgtsys6,
      Value<String> llgtsys7,
      Value<String> llgtsys8,
      Value<String> cldrwy,
      Value<String> hetakeoff,
      Value<String> letakeoff,
      Value<String> cycledate,
      Value<String> crc32,
      Value<double> helat,
      Value<double> helon,
      Value<double> lelat,
      Value<double> lelon}) {
    return DafifRunwayCompanion(
      id: id ?? this.id,
      arptident: arptident ?? this.arptident,
      highident: highident ?? this.highident,
      lowident: lowident ?? this.lowident,
      highendlatitude: highendlatitude ?? this.highendlatitude,
      highendlongitude: highendlongitude ?? this.highendlongitude,
      highendelevation: highendelevation ?? this.highendelevation,
      highendslope: highendslope ?? this.highendslope,
      lowendlatitude: lowendlatitude ?? this.lowendlatitude,
      lowendlongitude: lowendlongitude ?? this.lowendlongitude,
      lowendelevation: lowendelevation ?? this.lowendelevation,
      lowendslope: lowendslope ?? this.lowendslope,
      rwywidth: rwywidth ?? this.rwywidth,
      length: length ?? this.length,
      highendtrueheading: highendtrueheading ?? this.highendtrueheading,
      lowendtrueheading: lowendtrueheading ?? this.lowendtrueheading,
      highendmagneticheading:
          highendmagneticheading ?? this.highendmagneticheading,
      lowendmagneticheading:
          lowendmagneticheading ?? this.lowendmagneticheading,
      highendlandingdistance:
          highendlandingdistance ?? this.highendlandingdistance,
      lowendlandingdistance:
          lowendlandingdistance ?? this.lowendlandingdistance,
      surface: surface ?? this.surface,
      pcn: pcn ?? this.pcn,
      hetdze: hetdze ?? this.hetdze,
      hedt: hedt ?? this.hedt,
      hedtelev: hedtelev ?? this.hedtelev,
      hlgtsys1: hlgtsys1 ?? this.hlgtsys1,
      hlgtsys2: hlgtsys2 ?? this.hlgtsys2,
      hlgtsys3: hlgtsys3 ?? this.hlgtsys3,
      hlgtsys4: hlgtsys4 ?? this.hlgtsys4,
      hlgtsys5: hlgtsys5 ?? this.hlgtsys5,
      hlgtsys6: hlgtsys6 ?? this.hlgtsys6,
      hlgtsys7: hlgtsys7 ?? this.hlgtsys7,
      hlgtsys8: hlgtsys8 ?? this.hlgtsys8,
      lewgslat: lewgslat ?? this.lewgslat,
      lewgslong: lewgslong ?? this.lewgslong,
      hewgslat: hewgslat ?? this.hewgslat,
      hewgslong: hewgslong ?? this.hewgslong,
      letdze: letdze ?? this.letdze,
      ledt: ledt ?? this.ledt,
      ledtelev: ledtelev ?? this.ledtelev,
      llgtsys1: llgtsys1 ?? this.llgtsys1,
      llgtsys2: llgtsys2 ?? this.llgtsys2,
      llgtsys3: llgtsys3 ?? this.llgtsys3,
      llgtsys4: llgtsys4 ?? this.llgtsys4,
      llgtsys5: llgtsys5 ?? this.llgtsys5,
      llgtsys6: llgtsys6 ?? this.llgtsys6,
      llgtsys7: llgtsys7 ?? this.llgtsys7,
      llgtsys8: llgtsys8 ?? this.llgtsys8,
      cldrwy: cldrwy ?? this.cldrwy,
      hetakeoff: hetakeoff ?? this.hetakeoff,
      letakeoff: letakeoff ?? this.letakeoff,
      cycledate: cycledate ?? this.cycledate,
      crc32: crc32 ?? this.crc32,
      helat: helat ?? this.helat,
      helon: helon ?? this.helon,
      lelat: lelat ?? this.lelat,
      lelon: lelon ?? this.lelon,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arptident.present) {
      map['arptident'] = Variable<String>(arptident.value);
    }
    if (highident.present) {
      map['highident'] = Variable<String>(highident.value);
    }
    if (lowident.present) {
      map['lowident'] = Variable<String>(lowident.value);
    }
    if (highendlatitude.present) {
      map['highendlatitude'] = Variable<String>(highendlatitude.value);
    }
    if (highendlongitude.present) {
      map['highendlongitude'] = Variable<String>(highendlongitude.value);
    }
    if (highendelevation.present) {
      map['highendelevation'] = Variable<String>(highendelevation.value);
    }
    if (highendslope.present) {
      map['highendslope'] = Variable<String>(highendslope.value);
    }
    if (lowendlatitude.present) {
      map['lowendlatitude'] = Variable<String>(lowendlatitude.value);
    }
    if (lowendlongitude.present) {
      map['lowendlongitude'] = Variable<String>(lowendlongitude.value);
    }
    if (lowendelevation.present) {
      map['lowendelevation'] = Variable<String>(lowendelevation.value);
    }
    if (lowendslope.present) {
      map['lowendslope'] = Variable<String>(lowendslope.value);
    }
    if (rwywidth.present) {
      map['rwywidth'] = Variable<String>(rwywidth.value);
    }
    if (length.present) {
      map['length'] = Variable<String>(length.value);
    }
    if (highendtrueheading.present) {
      map['highendtrueheading'] = Variable<String>(highendtrueheading.value);
    }
    if (lowendtrueheading.present) {
      map['lowendtrueheading'] = Variable<String>(lowendtrueheading.value);
    }
    if (highendmagneticheading.present) {
      map['highendmagneticheading'] =
          Variable<String>(highendmagneticheading.value);
    }
    if (lowendmagneticheading.present) {
      map['lowendmagneticheading'] =
          Variable<String>(lowendmagneticheading.value);
    }
    if (highendlandingdistance.present) {
      map['highendlandingdistance'] =
          Variable<String>(highendlandingdistance.value);
    }
    if (lowendlandingdistance.present) {
      map['lowendlandingdistance'] =
          Variable<String>(lowendlandingdistance.value);
    }
    if (surface.present) {
      map['surface'] = Variable<String>(surface.value);
    }
    if (pcn.present) {
      map['pcn'] = Variable<String>(pcn.value);
    }
    if (hetdze.present) {
      map['hetdze'] = Variable<String>(hetdze.value);
    }
    if (hedt.present) {
      map['hedt'] = Variable<String>(hedt.value);
    }
    if (hedtelev.present) {
      map['hedtelev'] = Variable<String>(hedtelev.value);
    }
    if (hlgtsys1.present) {
      map['hlgtsys1'] = Variable<String>(hlgtsys1.value);
    }
    if (hlgtsys2.present) {
      map['hlgtsys2'] = Variable<String>(hlgtsys2.value);
    }
    if (hlgtsys3.present) {
      map['hlgtsys3'] = Variable<String>(hlgtsys3.value);
    }
    if (hlgtsys4.present) {
      map['hlgtsys4'] = Variable<String>(hlgtsys4.value);
    }
    if (hlgtsys5.present) {
      map['hlgtsys5'] = Variable<String>(hlgtsys5.value);
    }
    if (hlgtsys6.present) {
      map['hlgtsys6'] = Variable<String>(hlgtsys6.value);
    }
    if (hlgtsys7.present) {
      map['hlgtsys7'] = Variable<String>(hlgtsys7.value);
    }
    if (hlgtsys8.present) {
      map['hlgtsys8'] = Variable<String>(hlgtsys8.value);
    }
    if (lewgslat.present) {
      map['lewgslat'] = Variable<String>(lewgslat.value);
    }
    if (lewgslong.present) {
      map['lewgslong'] = Variable<String>(lewgslong.value);
    }
    if (hewgslat.present) {
      map['hewgslat'] = Variable<String>(hewgslat.value);
    }
    if (hewgslong.present) {
      map['hewgslong'] = Variable<String>(hewgslong.value);
    }
    if (letdze.present) {
      map['letdze'] = Variable<String>(letdze.value);
    }
    if (ledt.present) {
      map['ledt'] = Variable<String>(ledt.value);
    }
    if (ledtelev.present) {
      map['ledtelev'] = Variable<String>(ledtelev.value);
    }
    if (llgtsys1.present) {
      map['llgtsys1'] = Variable<String>(llgtsys1.value);
    }
    if (llgtsys2.present) {
      map['llgtsys2'] = Variable<String>(llgtsys2.value);
    }
    if (llgtsys3.present) {
      map['llgtsys3'] = Variable<String>(llgtsys3.value);
    }
    if (llgtsys4.present) {
      map['llgtsys4'] = Variable<String>(llgtsys4.value);
    }
    if (llgtsys5.present) {
      map['llgtsys5'] = Variable<String>(llgtsys5.value);
    }
    if (llgtsys6.present) {
      map['llgtsys6'] = Variable<String>(llgtsys6.value);
    }
    if (llgtsys7.present) {
      map['llgtsys7'] = Variable<String>(llgtsys7.value);
    }
    if (llgtsys8.present) {
      map['llgtsys8'] = Variable<String>(llgtsys8.value);
    }
    if (cldrwy.present) {
      map['cldrwy'] = Variable<String>(cldrwy.value);
    }
    if (hetakeoff.present) {
      map['hetakeoff'] = Variable<String>(hetakeoff.value);
    }
    if (letakeoff.present) {
      map['letakeoff'] = Variable<String>(letakeoff.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<String>(crc32.value);
    }
    if (helat.present) {
      map['helat'] = Variable<double>(helat.value);
    }
    if (helon.present) {
      map['helon'] = Variable<double>(helon.value);
    }
    if (lelat.present) {
      map['lelat'] = Variable<double>(lelat.value);
    }
    if (lelon.present) {
      map['lelon'] = Variable<double>(lelon.value);
    }
    return map;
  }
}

class $DafifRunwayTable extends DafifRunway
    with TableInfo<$DafifRunwayTable, dafif_runway> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifRunwayTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arptidentMeta = const VerificationMeta('arptident');
  GeneratedTextColumn _arptident;
  @override
  GeneratedTextColumn get arptident => _arptident ??= _constructArptident();
  GeneratedTextColumn _constructArptident() {
    return GeneratedTextColumn(
      'arptident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highidentMeta = const VerificationMeta('highident');
  GeneratedTextColumn _highident;
  @override
  GeneratedTextColumn get highident => _highident ??= _constructHighident();
  GeneratedTextColumn _constructHighident() {
    return GeneratedTextColumn(
      'highident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowidentMeta = const VerificationMeta('lowident');
  GeneratedTextColumn _lowident;
  @override
  GeneratedTextColumn get lowident => _lowident ??= _constructLowident();
  GeneratedTextColumn _constructLowident() {
    return GeneratedTextColumn(
      'lowident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendlatitudeMeta =
      const VerificationMeta('highendlatitude');
  GeneratedTextColumn _highendlatitude;
  @override
  GeneratedTextColumn get highendlatitude =>
      _highendlatitude ??= _constructHighendlatitude();
  GeneratedTextColumn _constructHighendlatitude() {
    return GeneratedTextColumn(
      'highendlatitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendlongitudeMeta =
      const VerificationMeta('highendlongitude');
  GeneratedTextColumn _highendlongitude;
  @override
  GeneratedTextColumn get highendlongitude =>
      _highendlongitude ??= _constructHighendlongitude();
  GeneratedTextColumn _constructHighendlongitude() {
    return GeneratedTextColumn(
      'highendlongitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendelevationMeta =
      const VerificationMeta('highendelevation');
  GeneratedTextColumn _highendelevation;
  @override
  GeneratedTextColumn get highendelevation =>
      _highendelevation ??= _constructHighendelevation();
  GeneratedTextColumn _constructHighendelevation() {
    return GeneratedTextColumn(
      'highendelevation',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendslopeMeta =
      const VerificationMeta('highendslope');
  GeneratedTextColumn _highendslope;
  @override
  GeneratedTextColumn get highendslope =>
      _highendslope ??= _constructHighendslope();
  GeneratedTextColumn _constructHighendslope() {
    return GeneratedTextColumn(
      'highendslope',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendlatitudeMeta =
      const VerificationMeta('lowendlatitude');
  GeneratedTextColumn _lowendlatitude;
  @override
  GeneratedTextColumn get lowendlatitude =>
      _lowendlatitude ??= _constructLowendlatitude();
  GeneratedTextColumn _constructLowendlatitude() {
    return GeneratedTextColumn(
      'lowendlatitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendlongitudeMeta =
      const VerificationMeta('lowendlongitude');
  GeneratedTextColumn _lowendlongitude;
  @override
  GeneratedTextColumn get lowendlongitude =>
      _lowendlongitude ??= _constructLowendlongitude();
  GeneratedTextColumn _constructLowendlongitude() {
    return GeneratedTextColumn(
      'lowendlongitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendelevationMeta =
      const VerificationMeta('lowendelevation');
  GeneratedTextColumn _lowendelevation;
  @override
  GeneratedTextColumn get lowendelevation =>
      _lowendelevation ??= _constructLowendelevation();
  GeneratedTextColumn _constructLowendelevation() {
    return GeneratedTextColumn(
      'lowendelevation',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendslopeMeta =
      const VerificationMeta('lowendslope');
  GeneratedTextColumn _lowendslope;
  @override
  GeneratedTextColumn get lowendslope =>
      _lowendslope ??= _constructLowendslope();
  GeneratedTextColumn _constructLowendslope() {
    return GeneratedTextColumn(
      'lowendslope',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rwywidthMeta = const VerificationMeta('rwywidth');
  GeneratedTextColumn _rwywidth;
  @override
  GeneratedTextColumn get rwywidth => _rwywidth ??= _constructRwywidth();
  GeneratedTextColumn _constructRwywidth() {
    return GeneratedTextColumn(
      'rwywidth',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lengthMeta = const VerificationMeta('length');
  GeneratedTextColumn _length;
  @override
  GeneratedTextColumn get length => _length ??= _constructLength();
  GeneratedTextColumn _constructLength() {
    return GeneratedTextColumn(
      'length',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendtrueheadingMeta =
      const VerificationMeta('highendtrueheading');
  GeneratedTextColumn _highendtrueheading;
  @override
  GeneratedTextColumn get highendtrueheading =>
      _highendtrueheading ??= _constructHighendtrueheading();
  GeneratedTextColumn _constructHighendtrueheading() {
    return GeneratedTextColumn(
      'highendtrueheading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendtrueheadingMeta =
      const VerificationMeta('lowendtrueheading');
  GeneratedTextColumn _lowendtrueheading;
  @override
  GeneratedTextColumn get lowendtrueheading =>
      _lowendtrueheading ??= _constructLowendtrueheading();
  GeneratedTextColumn _constructLowendtrueheading() {
    return GeneratedTextColumn(
      'lowendtrueheading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendmagneticheadingMeta =
      const VerificationMeta('highendmagneticheading');
  GeneratedTextColumn _highendmagneticheading;
  @override
  GeneratedTextColumn get highendmagneticheading =>
      _highendmagneticheading ??= _constructHighendmagneticheading();
  GeneratedTextColumn _constructHighendmagneticheading() {
    return GeneratedTextColumn(
      'highendmagneticheading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendmagneticheadingMeta =
      const VerificationMeta('lowendmagneticheading');
  GeneratedTextColumn _lowendmagneticheading;
  @override
  GeneratedTextColumn get lowendmagneticheading =>
      _lowendmagneticheading ??= _constructLowendmagneticheading();
  GeneratedTextColumn _constructLowendmagneticheading() {
    return GeneratedTextColumn(
      'lowendmagneticheading',
      $tableName,
      true,
    );
  }

  final VerificationMeta _highendlandingdistanceMeta =
      const VerificationMeta('highendlandingdistance');
  GeneratedTextColumn _highendlandingdistance;
  @override
  GeneratedTextColumn get highendlandingdistance =>
      _highendlandingdistance ??= _constructHighendlandingdistance();
  GeneratedTextColumn _constructHighendlandingdistance() {
    return GeneratedTextColumn(
      'highendlandingdistance',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowendlandingdistanceMeta =
      const VerificationMeta('lowendlandingdistance');
  GeneratedTextColumn _lowendlandingdistance;
  @override
  GeneratedTextColumn get lowendlandingdistance =>
      _lowendlandingdistance ??= _constructLowendlandingdistance();
  GeneratedTextColumn _constructLowendlandingdistance() {
    return GeneratedTextColumn(
      'lowendlandingdistance',
      $tableName,
      true,
    );
  }

  final VerificationMeta _surfaceMeta = const VerificationMeta('surface');
  GeneratedTextColumn _surface;
  @override
  GeneratedTextColumn get surface => _surface ??= _constructSurface();
  GeneratedTextColumn _constructSurface() {
    return GeneratedTextColumn(
      'surface',
      $tableName,
      true,
    );
  }

  final VerificationMeta _pcnMeta = const VerificationMeta('pcn');
  GeneratedTextColumn _pcn;
  @override
  GeneratedTextColumn get pcn => _pcn ??= _constructPcn();
  GeneratedTextColumn _constructPcn() {
    return GeneratedTextColumn(
      'pcn',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hetdzeMeta = const VerificationMeta('hetdze');
  GeneratedTextColumn _hetdze;
  @override
  GeneratedTextColumn get hetdze => _hetdze ??= _constructHetdze();
  GeneratedTextColumn _constructHetdze() {
    return GeneratedTextColumn(
      'hetdze',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hedtMeta = const VerificationMeta('hedt');
  GeneratedTextColumn _hedt;
  @override
  GeneratedTextColumn get hedt => _hedt ??= _constructHedt();
  GeneratedTextColumn _constructHedt() {
    return GeneratedTextColumn(
      'hedt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hedtelevMeta = const VerificationMeta('hedtelev');
  GeneratedTextColumn _hedtelev;
  @override
  GeneratedTextColumn get hedtelev => _hedtelev ??= _constructHedtelev();
  GeneratedTextColumn _constructHedtelev() {
    return GeneratedTextColumn(
      'hedtelev',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys1Meta = const VerificationMeta('hlgtsys1');
  GeneratedTextColumn _hlgtsys1;
  @override
  GeneratedTextColumn get hlgtsys1 => _hlgtsys1 ??= _constructHlgtsys1();
  GeneratedTextColumn _constructHlgtsys1() {
    return GeneratedTextColumn(
      'hlgtsys1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys2Meta = const VerificationMeta('hlgtsys2');
  GeneratedTextColumn _hlgtsys2;
  @override
  GeneratedTextColumn get hlgtsys2 => _hlgtsys2 ??= _constructHlgtsys2();
  GeneratedTextColumn _constructHlgtsys2() {
    return GeneratedTextColumn(
      'hlgtsys2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys3Meta = const VerificationMeta('hlgtsys3');
  GeneratedTextColumn _hlgtsys3;
  @override
  GeneratedTextColumn get hlgtsys3 => _hlgtsys3 ??= _constructHlgtsys3();
  GeneratedTextColumn _constructHlgtsys3() {
    return GeneratedTextColumn(
      'hlgtsys3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys4Meta = const VerificationMeta('hlgtsys4');
  GeneratedTextColumn _hlgtsys4;
  @override
  GeneratedTextColumn get hlgtsys4 => _hlgtsys4 ??= _constructHlgtsys4();
  GeneratedTextColumn _constructHlgtsys4() {
    return GeneratedTextColumn(
      'hlgtsys4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys5Meta = const VerificationMeta('hlgtsys5');
  GeneratedTextColumn _hlgtsys5;
  @override
  GeneratedTextColumn get hlgtsys5 => _hlgtsys5 ??= _constructHlgtsys5();
  GeneratedTextColumn _constructHlgtsys5() {
    return GeneratedTextColumn(
      'hlgtsys5',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys6Meta = const VerificationMeta('hlgtsys6');
  GeneratedTextColumn _hlgtsys6;
  @override
  GeneratedTextColumn get hlgtsys6 => _hlgtsys6 ??= _constructHlgtsys6();
  GeneratedTextColumn _constructHlgtsys6() {
    return GeneratedTextColumn(
      'hlgtsys6',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys7Meta = const VerificationMeta('hlgtsys7');
  GeneratedTextColumn _hlgtsys7;
  @override
  GeneratedTextColumn get hlgtsys7 => _hlgtsys7 ??= _constructHlgtsys7();
  GeneratedTextColumn _constructHlgtsys7() {
    return GeneratedTextColumn(
      'hlgtsys7',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hlgtsys8Meta = const VerificationMeta('hlgtsys8');
  GeneratedTextColumn _hlgtsys8;
  @override
  GeneratedTextColumn get hlgtsys8 => _hlgtsys8 ??= _constructHlgtsys8();
  GeneratedTextColumn _constructHlgtsys8() {
    return GeneratedTextColumn(
      'hlgtsys8',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lewgslatMeta = const VerificationMeta('lewgslat');
  GeneratedTextColumn _lewgslat;
  @override
  GeneratedTextColumn get lewgslat => _lewgslat ??= _constructLewgslat();
  GeneratedTextColumn _constructLewgslat() {
    return GeneratedTextColumn(
      'lewgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lewgslongMeta = const VerificationMeta('lewgslong');
  GeneratedTextColumn _lewgslong;
  @override
  GeneratedTextColumn get lewgslong => _lewgslong ??= _constructLewgslong();
  GeneratedTextColumn _constructLewgslong() {
    return GeneratedTextColumn(
      'lewgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hewgslatMeta = const VerificationMeta('hewgslat');
  GeneratedTextColumn _hewgslat;
  @override
  GeneratedTextColumn get hewgslat => _hewgslat ??= _constructHewgslat();
  GeneratedTextColumn _constructHewgslat() {
    return GeneratedTextColumn(
      'hewgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hewgslongMeta = const VerificationMeta('hewgslong');
  GeneratedTextColumn _hewgslong;
  @override
  GeneratedTextColumn get hewgslong => _hewgslong ??= _constructHewgslong();
  GeneratedTextColumn _constructHewgslong() {
    return GeneratedTextColumn(
      'hewgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _letdzeMeta = const VerificationMeta('letdze');
  GeneratedTextColumn _letdze;
  @override
  GeneratedTextColumn get letdze => _letdze ??= _constructLetdze();
  GeneratedTextColumn _constructLetdze() {
    return GeneratedTextColumn(
      'letdze',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ledtMeta = const VerificationMeta('ledt');
  GeneratedTextColumn _ledt;
  @override
  GeneratedTextColumn get ledt => _ledt ??= _constructLedt();
  GeneratedTextColumn _constructLedt() {
    return GeneratedTextColumn(
      'ledt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ledtelevMeta = const VerificationMeta('ledtelev');
  GeneratedTextColumn _ledtelev;
  @override
  GeneratedTextColumn get ledtelev => _ledtelev ??= _constructLedtelev();
  GeneratedTextColumn _constructLedtelev() {
    return GeneratedTextColumn(
      'ledtelev',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys1Meta = const VerificationMeta('llgtsys1');
  GeneratedTextColumn _llgtsys1;
  @override
  GeneratedTextColumn get llgtsys1 => _llgtsys1 ??= _constructLlgtsys1();
  GeneratedTextColumn _constructLlgtsys1() {
    return GeneratedTextColumn(
      'llgtsys1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys2Meta = const VerificationMeta('llgtsys2');
  GeneratedTextColumn _llgtsys2;
  @override
  GeneratedTextColumn get llgtsys2 => _llgtsys2 ??= _constructLlgtsys2();
  GeneratedTextColumn _constructLlgtsys2() {
    return GeneratedTextColumn(
      'llgtsys2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys3Meta = const VerificationMeta('llgtsys3');
  GeneratedTextColumn _llgtsys3;
  @override
  GeneratedTextColumn get llgtsys3 => _llgtsys3 ??= _constructLlgtsys3();
  GeneratedTextColumn _constructLlgtsys3() {
    return GeneratedTextColumn(
      'llgtsys3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys4Meta = const VerificationMeta('llgtsys4');
  GeneratedTextColumn _llgtsys4;
  @override
  GeneratedTextColumn get llgtsys4 => _llgtsys4 ??= _constructLlgtsys4();
  GeneratedTextColumn _constructLlgtsys4() {
    return GeneratedTextColumn(
      'llgtsys4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys5Meta = const VerificationMeta('llgtsys5');
  GeneratedTextColumn _llgtsys5;
  @override
  GeneratedTextColumn get llgtsys5 => _llgtsys5 ??= _constructLlgtsys5();
  GeneratedTextColumn _constructLlgtsys5() {
    return GeneratedTextColumn(
      'llgtsys5',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys6Meta = const VerificationMeta('llgtsys6');
  GeneratedTextColumn _llgtsys6;
  @override
  GeneratedTextColumn get llgtsys6 => _llgtsys6 ??= _constructLlgtsys6();
  GeneratedTextColumn _constructLlgtsys6() {
    return GeneratedTextColumn(
      'llgtsys6',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys7Meta = const VerificationMeta('llgtsys7');
  GeneratedTextColumn _llgtsys7;
  @override
  GeneratedTextColumn get llgtsys7 => _llgtsys7 ??= _constructLlgtsys7();
  GeneratedTextColumn _constructLlgtsys7() {
    return GeneratedTextColumn(
      'llgtsys7',
      $tableName,
      true,
    );
  }

  final VerificationMeta _llgtsys8Meta = const VerificationMeta('llgtsys8');
  GeneratedTextColumn _llgtsys8;
  @override
  GeneratedTextColumn get llgtsys8 => _llgtsys8 ??= _constructLlgtsys8();
  GeneratedTextColumn _constructLlgtsys8() {
    return GeneratedTextColumn(
      'llgtsys8',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cldrwyMeta = const VerificationMeta('cldrwy');
  GeneratedTextColumn _cldrwy;
  @override
  GeneratedTextColumn get cldrwy => _cldrwy ??= _constructCldrwy();
  GeneratedTextColumn _constructCldrwy() {
    return GeneratedTextColumn(
      'cldrwy',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hetakeoffMeta = const VerificationMeta('hetakeoff');
  GeneratedTextColumn _hetakeoff;
  @override
  GeneratedTextColumn get hetakeoff => _hetakeoff ??= _constructHetakeoff();
  GeneratedTextColumn _constructHetakeoff() {
    return GeneratedTextColumn(
      'hetakeoff',
      $tableName,
      true,
    );
  }

  final VerificationMeta _letakeoffMeta = const VerificationMeta('letakeoff');
  GeneratedTextColumn _letakeoff;
  @override
  GeneratedTextColumn get letakeoff => _letakeoff ??= _constructLetakeoff();
  GeneratedTextColumn _constructLetakeoff() {
    return GeneratedTextColumn(
      'letakeoff',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedTextColumn _crc32;
  @override
  GeneratedTextColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedTextColumn _constructCrc32() {
    return GeneratedTextColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _helatMeta = const VerificationMeta('helat');
  GeneratedRealColumn _helat;
  @override
  GeneratedRealColumn get helat => _helat ??= _constructHelat();
  GeneratedRealColumn _constructHelat() {
    return GeneratedRealColumn(
      'helat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _helonMeta = const VerificationMeta('helon');
  GeneratedRealColumn _helon;
  @override
  GeneratedRealColumn get helon => _helon ??= _constructHelon();
  GeneratedRealColumn _constructHelon() {
    return GeneratedRealColumn(
      'helon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lelatMeta = const VerificationMeta('lelat');
  GeneratedRealColumn _lelat;
  @override
  GeneratedRealColumn get lelat => _lelat ??= _constructLelat();
  GeneratedRealColumn _constructLelat() {
    return GeneratedRealColumn(
      'lelat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lelonMeta = const VerificationMeta('lelon');
  GeneratedRealColumn _lelon;
  @override
  GeneratedRealColumn get lelon => _lelon ??= _constructLelon();
  GeneratedRealColumn _constructLelon() {
    return GeneratedRealColumn(
      'lelon',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arptident,
        highident,
        lowident,
        highendlatitude,
        highendlongitude,
        highendelevation,
        highendslope,
        lowendlatitude,
        lowendlongitude,
        lowendelevation,
        lowendslope,
        rwywidth,
        length,
        highendtrueheading,
        lowendtrueheading,
        highendmagneticheading,
        lowendmagneticheading,
        highendlandingdistance,
        lowendlandingdistance,
        surface,
        pcn,
        hetdze,
        hedt,
        hedtelev,
        hlgtsys1,
        hlgtsys2,
        hlgtsys3,
        hlgtsys4,
        hlgtsys5,
        hlgtsys6,
        hlgtsys7,
        hlgtsys8,
        lewgslat,
        lewgslong,
        hewgslat,
        hewgslong,
        letdze,
        ledt,
        ledtelev,
        llgtsys1,
        llgtsys2,
        llgtsys3,
        llgtsys4,
        llgtsys5,
        llgtsys6,
        llgtsys7,
        llgtsys8,
        cldrwy,
        hetakeoff,
        letakeoff,
        cycledate,
        crc32,
        helat,
        helon,
        lelat,
        lelon
      ];
  @override
  $DafifRunwayTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_runway';
  @override
  final String actualTableName = 'dafif_runway';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_runway> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arptident')) {
      context.handle(_arptidentMeta,
          arptident.isAcceptableOrUnknown(data['arptident'], _arptidentMeta));
    }
    if (data.containsKey('highident')) {
      context.handle(_highidentMeta,
          highident.isAcceptableOrUnknown(data['highident'], _highidentMeta));
    }
    if (data.containsKey('lowident')) {
      context.handle(_lowidentMeta,
          lowident.isAcceptableOrUnknown(data['lowident'], _lowidentMeta));
    }
    if (data.containsKey('highendlatitude')) {
      context.handle(
          _highendlatitudeMeta,
          highendlatitude.isAcceptableOrUnknown(
              data['highendlatitude'], _highendlatitudeMeta));
    }
    if (data.containsKey('highendlongitude')) {
      context.handle(
          _highendlongitudeMeta,
          highendlongitude.isAcceptableOrUnknown(
              data['highendlongitude'], _highendlongitudeMeta));
    }
    if (data.containsKey('highendelevation')) {
      context.handle(
          _highendelevationMeta,
          highendelevation.isAcceptableOrUnknown(
              data['highendelevation'], _highendelevationMeta));
    }
    if (data.containsKey('highendslope')) {
      context.handle(
          _highendslopeMeta,
          highendslope.isAcceptableOrUnknown(
              data['highendslope'], _highendslopeMeta));
    }
    if (data.containsKey('lowendlatitude')) {
      context.handle(
          _lowendlatitudeMeta,
          lowendlatitude.isAcceptableOrUnknown(
              data['lowendlatitude'], _lowendlatitudeMeta));
    }
    if (data.containsKey('lowendlongitude')) {
      context.handle(
          _lowendlongitudeMeta,
          lowendlongitude.isAcceptableOrUnknown(
              data['lowendlongitude'], _lowendlongitudeMeta));
    }
    if (data.containsKey('lowendelevation')) {
      context.handle(
          _lowendelevationMeta,
          lowendelevation.isAcceptableOrUnknown(
              data['lowendelevation'], _lowendelevationMeta));
    }
    if (data.containsKey('lowendslope')) {
      context.handle(
          _lowendslopeMeta,
          lowendslope.isAcceptableOrUnknown(
              data['lowendslope'], _lowendslopeMeta));
    }
    if (data.containsKey('rwywidth')) {
      context.handle(_rwywidthMeta,
          rwywidth.isAcceptableOrUnknown(data['rwywidth'], _rwywidthMeta));
    }
    if (data.containsKey('length')) {
      context.handle(_lengthMeta,
          length.isAcceptableOrUnknown(data['length'], _lengthMeta));
    }
    if (data.containsKey('highendtrueheading')) {
      context.handle(
          _highendtrueheadingMeta,
          highendtrueheading.isAcceptableOrUnknown(
              data['highendtrueheading'], _highendtrueheadingMeta));
    }
    if (data.containsKey('lowendtrueheading')) {
      context.handle(
          _lowendtrueheadingMeta,
          lowendtrueheading.isAcceptableOrUnknown(
              data['lowendtrueheading'], _lowendtrueheadingMeta));
    }
    if (data.containsKey('highendmagneticheading')) {
      context.handle(
          _highendmagneticheadingMeta,
          highendmagneticheading.isAcceptableOrUnknown(
              data['highendmagneticheading'], _highendmagneticheadingMeta));
    }
    if (data.containsKey('lowendmagneticheading')) {
      context.handle(
          _lowendmagneticheadingMeta,
          lowendmagneticheading.isAcceptableOrUnknown(
              data['lowendmagneticheading'], _lowendmagneticheadingMeta));
    }
    if (data.containsKey('highendlandingdistance')) {
      context.handle(
          _highendlandingdistanceMeta,
          highendlandingdistance.isAcceptableOrUnknown(
              data['highendlandingdistance'], _highendlandingdistanceMeta));
    }
    if (data.containsKey('lowendlandingdistance')) {
      context.handle(
          _lowendlandingdistanceMeta,
          lowendlandingdistance.isAcceptableOrUnknown(
              data['lowendlandingdistance'], _lowendlandingdistanceMeta));
    }
    if (data.containsKey('surface')) {
      context.handle(_surfaceMeta,
          surface.isAcceptableOrUnknown(data['surface'], _surfaceMeta));
    }
    if (data.containsKey('pcn')) {
      context.handle(
          _pcnMeta, pcn.isAcceptableOrUnknown(data['pcn'], _pcnMeta));
    }
    if (data.containsKey('hetdze')) {
      context.handle(_hetdzeMeta,
          hetdze.isAcceptableOrUnknown(data['hetdze'], _hetdzeMeta));
    }
    if (data.containsKey('hedt')) {
      context.handle(
          _hedtMeta, hedt.isAcceptableOrUnknown(data['hedt'], _hedtMeta));
    }
    if (data.containsKey('hedtelev')) {
      context.handle(_hedtelevMeta,
          hedtelev.isAcceptableOrUnknown(data['hedtelev'], _hedtelevMeta));
    }
    if (data.containsKey('hlgtsys1')) {
      context.handle(_hlgtsys1Meta,
          hlgtsys1.isAcceptableOrUnknown(data['hlgtsys1'], _hlgtsys1Meta));
    }
    if (data.containsKey('hlgtsys2')) {
      context.handle(_hlgtsys2Meta,
          hlgtsys2.isAcceptableOrUnknown(data['hlgtsys2'], _hlgtsys2Meta));
    }
    if (data.containsKey('hlgtsys3')) {
      context.handle(_hlgtsys3Meta,
          hlgtsys3.isAcceptableOrUnknown(data['hlgtsys3'], _hlgtsys3Meta));
    }
    if (data.containsKey('hlgtsys4')) {
      context.handle(_hlgtsys4Meta,
          hlgtsys4.isAcceptableOrUnknown(data['hlgtsys4'], _hlgtsys4Meta));
    }
    if (data.containsKey('hlgtsys5')) {
      context.handle(_hlgtsys5Meta,
          hlgtsys5.isAcceptableOrUnknown(data['hlgtsys5'], _hlgtsys5Meta));
    }
    if (data.containsKey('hlgtsys6')) {
      context.handle(_hlgtsys6Meta,
          hlgtsys6.isAcceptableOrUnknown(data['hlgtsys6'], _hlgtsys6Meta));
    }
    if (data.containsKey('hlgtsys7')) {
      context.handle(_hlgtsys7Meta,
          hlgtsys7.isAcceptableOrUnknown(data['hlgtsys7'], _hlgtsys7Meta));
    }
    if (data.containsKey('hlgtsys8')) {
      context.handle(_hlgtsys8Meta,
          hlgtsys8.isAcceptableOrUnknown(data['hlgtsys8'], _hlgtsys8Meta));
    }
    if (data.containsKey('lewgslat')) {
      context.handle(_lewgslatMeta,
          lewgslat.isAcceptableOrUnknown(data['lewgslat'], _lewgslatMeta));
    }
    if (data.containsKey('lewgslong')) {
      context.handle(_lewgslongMeta,
          lewgslong.isAcceptableOrUnknown(data['lewgslong'], _lewgslongMeta));
    }
    if (data.containsKey('hewgslat')) {
      context.handle(_hewgslatMeta,
          hewgslat.isAcceptableOrUnknown(data['hewgslat'], _hewgslatMeta));
    }
    if (data.containsKey('hewgslong')) {
      context.handle(_hewgslongMeta,
          hewgslong.isAcceptableOrUnknown(data['hewgslong'], _hewgslongMeta));
    }
    if (data.containsKey('letdze')) {
      context.handle(_letdzeMeta,
          letdze.isAcceptableOrUnknown(data['letdze'], _letdzeMeta));
    }
    if (data.containsKey('ledt')) {
      context.handle(
          _ledtMeta, ledt.isAcceptableOrUnknown(data['ledt'], _ledtMeta));
    }
    if (data.containsKey('ledtelev')) {
      context.handle(_ledtelevMeta,
          ledtelev.isAcceptableOrUnknown(data['ledtelev'], _ledtelevMeta));
    }
    if (data.containsKey('llgtsys1')) {
      context.handle(_llgtsys1Meta,
          llgtsys1.isAcceptableOrUnknown(data['llgtsys1'], _llgtsys1Meta));
    }
    if (data.containsKey('llgtsys2')) {
      context.handle(_llgtsys2Meta,
          llgtsys2.isAcceptableOrUnknown(data['llgtsys2'], _llgtsys2Meta));
    }
    if (data.containsKey('llgtsys3')) {
      context.handle(_llgtsys3Meta,
          llgtsys3.isAcceptableOrUnknown(data['llgtsys3'], _llgtsys3Meta));
    }
    if (data.containsKey('llgtsys4')) {
      context.handle(_llgtsys4Meta,
          llgtsys4.isAcceptableOrUnknown(data['llgtsys4'], _llgtsys4Meta));
    }
    if (data.containsKey('llgtsys5')) {
      context.handle(_llgtsys5Meta,
          llgtsys5.isAcceptableOrUnknown(data['llgtsys5'], _llgtsys5Meta));
    }
    if (data.containsKey('llgtsys6')) {
      context.handle(_llgtsys6Meta,
          llgtsys6.isAcceptableOrUnknown(data['llgtsys6'], _llgtsys6Meta));
    }
    if (data.containsKey('llgtsys7')) {
      context.handle(_llgtsys7Meta,
          llgtsys7.isAcceptableOrUnknown(data['llgtsys7'], _llgtsys7Meta));
    }
    if (data.containsKey('llgtsys8')) {
      context.handle(_llgtsys8Meta,
          llgtsys8.isAcceptableOrUnknown(data['llgtsys8'], _llgtsys8Meta));
    }
    if (data.containsKey('cldrwy')) {
      context.handle(_cldrwyMeta,
          cldrwy.isAcceptableOrUnknown(data['cldrwy'], _cldrwyMeta));
    }
    if (data.containsKey('hetakeoff')) {
      context.handle(_hetakeoffMeta,
          hetakeoff.isAcceptableOrUnknown(data['hetakeoff'], _hetakeoffMeta));
    }
    if (data.containsKey('letakeoff')) {
      context.handle(_letakeoffMeta,
          letakeoff.isAcceptableOrUnknown(data['letakeoff'], _letakeoffMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('helat')) {
      context.handle(
          _helatMeta, helat.isAcceptableOrUnknown(data['helat'], _helatMeta));
    }
    if (data.containsKey('helon')) {
      context.handle(
          _helonMeta, helon.isAcceptableOrUnknown(data['helon'], _helonMeta));
    }
    if (data.containsKey('lelat')) {
      context.handle(
          _lelatMeta, lelat.isAcceptableOrUnknown(data['lelat'], _lelatMeta));
    }
    if (data.containsKey('lelon')) {
      context.handle(
          _lelonMeta, lelon.isAcceptableOrUnknown(data['lelon'], _lelonMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_runway map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_runway.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifRunwayTable createAlias(String alias) {
    return $DafifRunwayTable(_db, alias);
  }
}

class dafif_special_use_airspace extends DataClass
    implements Insertable<dafif_special_use_airspace> {
  final int id;
  final String suasident;
  final String sector;
  final String segnbr;
  final String name;
  final String type;
  final String icao;
  final String shap;
  final String derivation;
  final String wgslat1;
  final String wgsdlat1;
  final String wgslong1;
  final String wgsdlong1;
  final String wgslat2;
  final String wgsdlat2;
  final String wgslong2;
  final String wgsdlong2;
  final String wgslat0;
  final String wgsdlat0;
  final String wgslong0;
  final String wgsdlong0;
  final String radius1;
  final String radius2;
  final String bearing1;
  final String bearing2;
  final String navident;
  final String navtype;
  final String navctry;
  final String navkeycd;
  final String cycledate;
  final int crc32;
  final double lat0;
  final double lon0;
  final double lat1;
  final double lon1;
  final double lat2;
  final double lon2;
  dafif_special_use_airspace(
      {@required this.id,
      this.suasident,
      this.sector,
      this.segnbr,
      this.name,
      this.type,
      this.icao,
      this.shap,
      this.derivation,
      this.wgslat1,
      this.wgsdlat1,
      this.wgslong1,
      this.wgsdlong1,
      this.wgslat2,
      this.wgsdlat2,
      this.wgslong2,
      this.wgsdlong2,
      this.wgslat0,
      this.wgsdlat0,
      this.wgslong0,
      this.wgsdlong0,
      this.radius1,
      this.radius2,
      this.bearing1,
      this.bearing2,
      this.navident,
      this.navtype,
      this.navctry,
      this.navkeycd,
      this.cycledate,
      this.crc32,
      this.lat0,
      this.lon0,
      this.lat1,
      this.lon1,
      this.lat2,
      this.lon2});
  factory dafif_special_use_airspace.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_special_use_airspace(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      suasident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}suasident']),
      sector:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}sector']),
      segnbr:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}segnbr']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      shap: stringType.mapFromDatabaseResponse(data['${effectivePrefix}shap']),
      derivation: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}derivation']),
      wgslat1:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat1']),
      wgsdlat1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat1']),
      wgslong1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgslong1']),
      wgsdlong1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong1']),
      wgslat2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat2']),
      wgsdlat2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat2']),
      wgslong2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgslong2']),
      wgsdlong2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong2']),
      wgslat0:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat0']),
      wgsdlat0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat0']),
      wgslong0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgslong0']),
      wgsdlong0: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong0']),
      radius1:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}radius1']),
      radius2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}radius2']),
      bearing1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bearing1']),
      bearing2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}bearing2']),
      navident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navident']),
      navtype:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navtype']),
      navctry:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navctry']),
      navkeycd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navkeycd']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      lat0: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat0']),
      lon0: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon0']),
      lat1: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat1']),
      lon1: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon1']),
      lat2: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat2']),
      lon2: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon2']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || suasident != null) {
      map['suasident'] = Variable<String>(suasident);
    }
    if (!nullToAbsent || sector != null) {
      map['sector'] = Variable<String>(sector);
    }
    if (!nullToAbsent || segnbr != null) {
      map['segnbr'] = Variable<String>(segnbr);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || shap != null) {
      map['shap'] = Variable<String>(shap);
    }
    if (!nullToAbsent || derivation != null) {
      map['derivation'] = Variable<String>(derivation);
    }
    if (!nullToAbsent || wgslat1 != null) {
      map['wgslat1'] = Variable<String>(wgslat1);
    }
    if (!nullToAbsent || wgsdlat1 != null) {
      map['wgsdlat1'] = Variable<String>(wgsdlat1);
    }
    if (!nullToAbsent || wgslong1 != null) {
      map['wgslong1'] = Variable<String>(wgslong1);
    }
    if (!nullToAbsent || wgsdlong1 != null) {
      map['wgsdlong1'] = Variable<String>(wgsdlong1);
    }
    if (!nullToAbsent || wgslat2 != null) {
      map['wgslat2'] = Variable<String>(wgslat2);
    }
    if (!nullToAbsent || wgsdlat2 != null) {
      map['wgsdlat2'] = Variable<String>(wgsdlat2);
    }
    if (!nullToAbsent || wgslong2 != null) {
      map['wgslong2'] = Variable<String>(wgslong2);
    }
    if (!nullToAbsent || wgsdlong2 != null) {
      map['wgsdlong2'] = Variable<String>(wgsdlong2);
    }
    if (!nullToAbsent || wgslat0 != null) {
      map['wgslat0'] = Variable<String>(wgslat0);
    }
    if (!nullToAbsent || wgsdlat0 != null) {
      map['wgsdlat0'] = Variable<String>(wgsdlat0);
    }
    if (!nullToAbsent || wgslong0 != null) {
      map['wgslong0'] = Variable<String>(wgslong0);
    }
    if (!nullToAbsent || wgsdlong0 != null) {
      map['wgsdlong0'] = Variable<String>(wgsdlong0);
    }
    if (!nullToAbsent || radius1 != null) {
      map['radius1'] = Variable<String>(radius1);
    }
    if (!nullToAbsent || radius2 != null) {
      map['radius2'] = Variable<String>(radius2);
    }
    if (!nullToAbsent || bearing1 != null) {
      map['bearing1'] = Variable<String>(bearing1);
    }
    if (!nullToAbsent || bearing2 != null) {
      map['bearing2'] = Variable<String>(bearing2);
    }
    if (!nullToAbsent || navident != null) {
      map['navident'] = Variable<String>(navident);
    }
    if (!nullToAbsent || navtype != null) {
      map['navtype'] = Variable<String>(navtype);
    }
    if (!nullToAbsent || navctry != null) {
      map['navctry'] = Variable<String>(navctry);
    }
    if (!nullToAbsent || navkeycd != null) {
      map['navkeycd'] = Variable<String>(navkeycd);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    if (!nullToAbsent || lat0 != null) {
      map['lat0'] = Variable<double>(lat0);
    }
    if (!nullToAbsent || lon0 != null) {
      map['lon0'] = Variable<double>(lon0);
    }
    if (!nullToAbsent || lat1 != null) {
      map['lat1'] = Variable<double>(lat1);
    }
    if (!nullToAbsent || lon1 != null) {
      map['lon1'] = Variable<double>(lon1);
    }
    if (!nullToAbsent || lat2 != null) {
      map['lat2'] = Variable<double>(lat2);
    }
    if (!nullToAbsent || lon2 != null) {
      map['lon2'] = Variable<double>(lon2);
    }
    return map;
  }

  factory dafif_special_use_airspace.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_special_use_airspace(
      id: serializer.fromJson<int>(json['id']),
      suasident: serializer.fromJson<String>(json['suasident']),
      sector: serializer.fromJson<String>(json['sector']),
      segnbr: serializer.fromJson<String>(json['segnbr']),
      name: serializer.fromJson<String>(json['name']),
      type: serializer.fromJson<String>(json['type']),
      icao: serializer.fromJson<String>(json['icao']),
      shap: serializer.fromJson<String>(json['shap']),
      derivation: serializer.fromJson<String>(json['derivation']),
      wgslat1: serializer.fromJson<String>(json['wgslat1']),
      wgsdlat1: serializer.fromJson<String>(json['wgsdlat1']),
      wgslong1: serializer.fromJson<String>(json['wgslong1']),
      wgsdlong1: serializer.fromJson<String>(json['wgsdlong1']),
      wgslat2: serializer.fromJson<String>(json['wgslat2']),
      wgsdlat2: serializer.fromJson<String>(json['wgsdlat2']),
      wgslong2: serializer.fromJson<String>(json['wgslong2']),
      wgsdlong2: serializer.fromJson<String>(json['wgsdlong2']),
      wgslat0: serializer.fromJson<String>(json['wgslat0']),
      wgsdlat0: serializer.fromJson<String>(json['wgsdlat0']),
      wgslong0: serializer.fromJson<String>(json['wgslong0']),
      wgsdlong0: serializer.fromJson<String>(json['wgsdlong0']),
      radius1: serializer.fromJson<String>(json['radius1']),
      radius2: serializer.fromJson<String>(json['radius2']),
      bearing1: serializer.fromJson<String>(json['bearing1']),
      bearing2: serializer.fromJson<String>(json['bearing2']),
      navident: serializer.fromJson<String>(json['navident']),
      navtype: serializer.fromJson<String>(json['navtype']),
      navctry: serializer.fromJson<String>(json['navctry']),
      navkeycd: serializer.fromJson<String>(json['navkeycd']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      crc32: serializer.fromJson<int>(json['crc32']),
      lat0: serializer.fromJson<double>(json['lat0']),
      lon0: serializer.fromJson<double>(json['lon0']),
      lat1: serializer.fromJson<double>(json['lat1']),
      lon1: serializer.fromJson<double>(json['lon1']),
      lat2: serializer.fromJson<double>(json['lat2']),
      lon2: serializer.fromJson<double>(json['lon2']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'suasident': serializer.toJson<String>(suasident),
      'sector': serializer.toJson<String>(sector),
      'segnbr': serializer.toJson<String>(segnbr),
      'name': serializer.toJson<String>(name),
      'type': serializer.toJson<String>(type),
      'icao': serializer.toJson<String>(icao),
      'shap': serializer.toJson<String>(shap),
      'derivation': serializer.toJson<String>(derivation),
      'wgslat1': serializer.toJson<String>(wgslat1),
      'wgsdlat1': serializer.toJson<String>(wgsdlat1),
      'wgslong1': serializer.toJson<String>(wgslong1),
      'wgsdlong1': serializer.toJson<String>(wgsdlong1),
      'wgslat2': serializer.toJson<String>(wgslat2),
      'wgsdlat2': serializer.toJson<String>(wgsdlat2),
      'wgslong2': serializer.toJson<String>(wgslong2),
      'wgsdlong2': serializer.toJson<String>(wgsdlong2),
      'wgslat0': serializer.toJson<String>(wgslat0),
      'wgsdlat0': serializer.toJson<String>(wgsdlat0),
      'wgslong0': serializer.toJson<String>(wgslong0),
      'wgsdlong0': serializer.toJson<String>(wgsdlong0),
      'radius1': serializer.toJson<String>(radius1),
      'radius2': serializer.toJson<String>(radius2),
      'bearing1': serializer.toJson<String>(bearing1),
      'bearing2': serializer.toJson<String>(bearing2),
      'navident': serializer.toJson<String>(navident),
      'navtype': serializer.toJson<String>(navtype),
      'navctry': serializer.toJson<String>(navctry),
      'navkeycd': serializer.toJson<String>(navkeycd),
      'cycledate': serializer.toJson<String>(cycledate),
      'crc32': serializer.toJson<int>(crc32),
      'lat0': serializer.toJson<double>(lat0),
      'lon0': serializer.toJson<double>(lon0),
      'lat1': serializer.toJson<double>(lat1),
      'lon1': serializer.toJson<double>(lon1),
      'lat2': serializer.toJson<double>(lat2),
      'lon2': serializer.toJson<double>(lon2),
    };
  }

  dafif_special_use_airspace copyWith(
          {int id,
          String suasident,
          String sector,
          String segnbr,
          String name,
          String type,
          String icao,
          String shap,
          String derivation,
          String wgslat1,
          String wgsdlat1,
          String wgslong1,
          String wgsdlong1,
          String wgslat2,
          String wgsdlat2,
          String wgslong2,
          String wgsdlong2,
          String wgslat0,
          String wgsdlat0,
          String wgslong0,
          String wgsdlong0,
          String radius1,
          String radius2,
          String bearing1,
          String bearing2,
          String navident,
          String navtype,
          String navctry,
          String navkeycd,
          String cycledate,
          int crc32,
          double lat0,
          double lon0,
          double lat1,
          double lon1,
          double lat2,
          double lon2}) =>
      dafif_special_use_airspace(
        id: id ?? this.id,
        suasident: suasident ?? this.suasident,
        sector: sector ?? this.sector,
        segnbr: segnbr ?? this.segnbr,
        name: name ?? this.name,
        type: type ?? this.type,
        icao: icao ?? this.icao,
        shap: shap ?? this.shap,
        derivation: derivation ?? this.derivation,
        wgslat1: wgslat1 ?? this.wgslat1,
        wgsdlat1: wgsdlat1 ?? this.wgsdlat1,
        wgslong1: wgslong1 ?? this.wgslong1,
        wgsdlong1: wgsdlong1 ?? this.wgsdlong1,
        wgslat2: wgslat2 ?? this.wgslat2,
        wgsdlat2: wgsdlat2 ?? this.wgsdlat2,
        wgslong2: wgslong2 ?? this.wgslong2,
        wgsdlong2: wgsdlong2 ?? this.wgsdlong2,
        wgslat0: wgslat0 ?? this.wgslat0,
        wgsdlat0: wgsdlat0 ?? this.wgsdlat0,
        wgslong0: wgslong0 ?? this.wgslong0,
        wgsdlong0: wgsdlong0 ?? this.wgsdlong0,
        radius1: radius1 ?? this.radius1,
        radius2: radius2 ?? this.radius2,
        bearing1: bearing1 ?? this.bearing1,
        bearing2: bearing2 ?? this.bearing2,
        navident: navident ?? this.navident,
        navtype: navtype ?? this.navtype,
        navctry: navctry ?? this.navctry,
        navkeycd: navkeycd ?? this.navkeycd,
        cycledate: cycledate ?? this.cycledate,
        crc32: crc32 ?? this.crc32,
        lat0: lat0 ?? this.lat0,
        lon0: lon0 ?? this.lon0,
        lat1: lat1 ?? this.lat1,
        lon1: lon1 ?? this.lon1,
        lat2: lat2 ?? this.lat2,
        lon2: lon2 ?? this.lon2,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_special_use_airspace(')
          ..write('id: $id, ')
          ..write('suasident: $suasident, ')
          ..write('sector: $sector, ')
          ..write('segnbr: $segnbr, ')
          ..write('name: $name, ')
          ..write('type: $type, ')
          ..write('icao: $icao, ')
          ..write('shap: $shap, ')
          ..write('derivation: $derivation, ')
          ..write('wgslat1: $wgslat1, ')
          ..write('wgsdlat1: $wgsdlat1, ')
          ..write('wgslong1: $wgslong1, ')
          ..write('wgsdlong1: $wgsdlong1, ')
          ..write('wgslat2: $wgslat2, ')
          ..write('wgsdlat2: $wgsdlat2, ')
          ..write('wgslong2: $wgslong2, ')
          ..write('wgsdlong2: $wgsdlong2, ')
          ..write('wgslat0: $wgslat0, ')
          ..write('wgsdlat0: $wgsdlat0, ')
          ..write('wgslong0: $wgslong0, ')
          ..write('wgsdlong0: $wgsdlong0, ')
          ..write('radius1: $radius1, ')
          ..write('radius2: $radius2, ')
          ..write('bearing1: $bearing1, ')
          ..write('bearing2: $bearing2, ')
          ..write('navident: $navident, ')
          ..write('navtype: $navtype, ')
          ..write('navctry: $navctry, ')
          ..write('navkeycd: $navkeycd, ')
          ..write('cycledate: $cycledate, ')
          ..write('crc32: $crc32, ')
          ..write('lat0: $lat0, ')
          ..write('lon0: $lon0, ')
          ..write('lat1: $lat1, ')
          ..write('lon1: $lon1, ')
          ..write('lat2: $lat2, ')
          ..write('lon2: $lon2')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          suasident.hashCode,
          $mrjc(
              sector.hashCode,
              $mrjc(
                  segnbr.hashCode,
                  $mrjc(
                      name.hashCode,
                      $mrjc(
                          type.hashCode,
                          $mrjc(
                              icao.hashCode,
                              $mrjc(
                                  shap.hashCode,
                                  $mrjc(
                                      derivation.hashCode,
                                      $mrjc(
                                          wgslat1.hashCode,
                                          $mrjc(
                                              wgsdlat1.hashCode,
                                              $mrjc(
                                                  wgslong1.hashCode,
                                                  $mrjc(
                                                      wgsdlong1.hashCode,
                                                      $mrjc(
                                                          wgslat2.hashCode,
                                                          $mrjc(
                                                              wgsdlat2.hashCode,
                                                              $mrjc(
                                                                  wgslong2
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      wgsdlong2
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          wgslat0
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              wgsdlat0.hashCode,
                                                                              $mrjc(wgslong0.hashCode, $mrjc(wgsdlong0.hashCode, $mrjc(radius1.hashCode, $mrjc(radius2.hashCode, $mrjc(bearing1.hashCode, $mrjc(bearing2.hashCode, $mrjc(navident.hashCode, $mrjc(navtype.hashCode, $mrjc(navctry.hashCode, $mrjc(navkeycd.hashCode, $mrjc(cycledate.hashCode, $mrjc(crc32.hashCode, $mrjc(lat0.hashCode, $mrjc(lon0.hashCode, $mrjc(lat1.hashCode, $mrjc(lon1.hashCode, $mrjc(lat2.hashCode, lon2.hashCode)))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_special_use_airspace &&
          other.id == this.id &&
          other.suasident == this.suasident &&
          other.sector == this.sector &&
          other.segnbr == this.segnbr &&
          other.name == this.name &&
          other.type == this.type &&
          other.icao == this.icao &&
          other.shap == this.shap &&
          other.derivation == this.derivation &&
          other.wgslat1 == this.wgslat1 &&
          other.wgsdlat1 == this.wgsdlat1 &&
          other.wgslong1 == this.wgslong1 &&
          other.wgsdlong1 == this.wgsdlong1 &&
          other.wgslat2 == this.wgslat2 &&
          other.wgsdlat2 == this.wgsdlat2 &&
          other.wgslong2 == this.wgslong2 &&
          other.wgsdlong2 == this.wgsdlong2 &&
          other.wgslat0 == this.wgslat0 &&
          other.wgsdlat0 == this.wgsdlat0 &&
          other.wgslong0 == this.wgslong0 &&
          other.wgsdlong0 == this.wgsdlong0 &&
          other.radius1 == this.radius1 &&
          other.radius2 == this.radius2 &&
          other.bearing1 == this.bearing1 &&
          other.bearing2 == this.bearing2 &&
          other.navident == this.navident &&
          other.navtype == this.navtype &&
          other.navctry == this.navctry &&
          other.navkeycd == this.navkeycd &&
          other.cycledate == this.cycledate &&
          other.crc32 == this.crc32 &&
          other.lat0 == this.lat0 &&
          other.lon0 == this.lon0 &&
          other.lat1 == this.lat1 &&
          other.lon1 == this.lon1 &&
          other.lat2 == this.lat2 &&
          other.lon2 == this.lon2);
}

class DafifSpecialUseAirspaceCompanion
    extends UpdateCompanion<dafif_special_use_airspace> {
  final Value<int> id;
  final Value<String> suasident;
  final Value<String> sector;
  final Value<String> segnbr;
  final Value<String> name;
  final Value<String> type;
  final Value<String> icao;
  final Value<String> shap;
  final Value<String> derivation;
  final Value<String> wgslat1;
  final Value<String> wgsdlat1;
  final Value<String> wgslong1;
  final Value<String> wgsdlong1;
  final Value<String> wgslat2;
  final Value<String> wgsdlat2;
  final Value<String> wgslong2;
  final Value<String> wgsdlong2;
  final Value<String> wgslat0;
  final Value<String> wgsdlat0;
  final Value<String> wgslong0;
  final Value<String> wgsdlong0;
  final Value<String> radius1;
  final Value<String> radius2;
  final Value<String> bearing1;
  final Value<String> bearing2;
  final Value<String> navident;
  final Value<String> navtype;
  final Value<String> navctry;
  final Value<String> navkeycd;
  final Value<String> cycledate;
  final Value<int> crc32;
  final Value<double> lat0;
  final Value<double> lon0;
  final Value<double> lat1;
  final Value<double> lon1;
  final Value<double> lat2;
  final Value<double> lon2;
  const DafifSpecialUseAirspaceCompanion({
    this.id = const Value.absent(),
    this.suasident = const Value.absent(),
    this.sector = const Value.absent(),
    this.segnbr = const Value.absent(),
    this.name = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.shap = const Value.absent(),
    this.derivation = const Value.absent(),
    this.wgslat1 = const Value.absent(),
    this.wgsdlat1 = const Value.absent(),
    this.wgslong1 = const Value.absent(),
    this.wgsdlong1 = const Value.absent(),
    this.wgslat2 = const Value.absent(),
    this.wgsdlat2 = const Value.absent(),
    this.wgslong2 = const Value.absent(),
    this.wgsdlong2 = const Value.absent(),
    this.wgslat0 = const Value.absent(),
    this.wgsdlat0 = const Value.absent(),
    this.wgslong0 = const Value.absent(),
    this.wgsdlong0 = const Value.absent(),
    this.radius1 = const Value.absent(),
    this.radius2 = const Value.absent(),
    this.bearing1 = const Value.absent(),
    this.bearing2 = const Value.absent(),
    this.navident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat0 = const Value.absent(),
    this.lon0 = const Value.absent(),
    this.lat1 = const Value.absent(),
    this.lon1 = const Value.absent(),
    this.lat2 = const Value.absent(),
    this.lon2 = const Value.absent(),
  });
  DafifSpecialUseAirspaceCompanion.insert({
    this.id = const Value.absent(),
    this.suasident = const Value.absent(),
    this.sector = const Value.absent(),
    this.segnbr = const Value.absent(),
    this.name = const Value.absent(),
    this.type = const Value.absent(),
    this.icao = const Value.absent(),
    this.shap = const Value.absent(),
    this.derivation = const Value.absent(),
    this.wgslat1 = const Value.absent(),
    this.wgsdlat1 = const Value.absent(),
    this.wgslong1 = const Value.absent(),
    this.wgsdlong1 = const Value.absent(),
    this.wgslat2 = const Value.absent(),
    this.wgsdlat2 = const Value.absent(),
    this.wgslong2 = const Value.absent(),
    this.wgsdlong2 = const Value.absent(),
    this.wgslat0 = const Value.absent(),
    this.wgsdlat0 = const Value.absent(),
    this.wgslong0 = const Value.absent(),
    this.wgsdlong0 = const Value.absent(),
    this.radius1 = const Value.absent(),
    this.radius2 = const Value.absent(),
    this.bearing1 = const Value.absent(),
    this.bearing2 = const Value.absent(),
    this.navident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat0 = const Value.absent(),
    this.lon0 = const Value.absent(),
    this.lat1 = const Value.absent(),
    this.lon1 = const Value.absent(),
    this.lat2 = const Value.absent(),
    this.lon2 = const Value.absent(),
  });
  static Insertable<dafif_special_use_airspace> custom({
    Expression<int> id,
    Expression<String> suasident,
    Expression<String> sector,
    Expression<String> segnbr,
    Expression<String> name,
    Expression<String> type,
    Expression<String> icao,
    Expression<String> shap,
    Expression<String> derivation,
    Expression<String> wgslat1,
    Expression<String> wgsdlat1,
    Expression<String> wgslong1,
    Expression<String> wgsdlong1,
    Expression<String> wgslat2,
    Expression<String> wgsdlat2,
    Expression<String> wgslong2,
    Expression<String> wgsdlong2,
    Expression<String> wgslat0,
    Expression<String> wgsdlat0,
    Expression<String> wgslong0,
    Expression<String> wgsdlong0,
    Expression<String> radius1,
    Expression<String> radius2,
    Expression<String> bearing1,
    Expression<String> bearing2,
    Expression<String> navident,
    Expression<String> navtype,
    Expression<String> navctry,
    Expression<String> navkeycd,
    Expression<String> cycledate,
    Expression<int> crc32,
    Expression<double> lat0,
    Expression<double> lon0,
    Expression<double> lat1,
    Expression<double> lon1,
    Expression<double> lat2,
    Expression<double> lon2,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (suasident != null) 'suasident': suasident,
      if (sector != null) 'sector': sector,
      if (segnbr != null) 'segnbr': segnbr,
      if (name != null) 'name': name,
      if (type != null) 'type': type,
      if (icao != null) 'icao': icao,
      if (shap != null) 'shap': shap,
      if (derivation != null) 'derivation': derivation,
      if (wgslat1 != null) 'wgslat1': wgslat1,
      if (wgsdlat1 != null) 'wgsdlat1': wgsdlat1,
      if (wgslong1 != null) 'wgslong1': wgslong1,
      if (wgsdlong1 != null) 'wgsdlong1': wgsdlong1,
      if (wgslat2 != null) 'wgslat2': wgslat2,
      if (wgsdlat2 != null) 'wgsdlat2': wgsdlat2,
      if (wgslong2 != null) 'wgslong2': wgslong2,
      if (wgsdlong2 != null) 'wgsdlong2': wgsdlong2,
      if (wgslat0 != null) 'wgslat0': wgslat0,
      if (wgsdlat0 != null) 'wgsdlat0': wgsdlat0,
      if (wgslong0 != null) 'wgslong0': wgslong0,
      if (wgsdlong0 != null) 'wgsdlong0': wgsdlong0,
      if (radius1 != null) 'radius1': radius1,
      if (radius2 != null) 'radius2': radius2,
      if (bearing1 != null) 'bearing1': bearing1,
      if (bearing2 != null) 'bearing2': bearing2,
      if (navident != null) 'navident': navident,
      if (navtype != null) 'navtype': navtype,
      if (navctry != null) 'navctry': navctry,
      if (navkeycd != null) 'navkeycd': navkeycd,
      if (cycledate != null) 'cycledate': cycledate,
      if (crc32 != null) 'crc32': crc32,
      if (lat0 != null) 'lat0': lat0,
      if (lon0 != null) 'lon0': lon0,
      if (lat1 != null) 'lat1': lat1,
      if (lon1 != null) 'lon1': lon1,
      if (lat2 != null) 'lat2': lat2,
      if (lon2 != null) 'lon2': lon2,
    });
  }

  DafifSpecialUseAirspaceCompanion copyWith(
      {Value<int> id,
      Value<String> suasident,
      Value<String> sector,
      Value<String> segnbr,
      Value<String> name,
      Value<String> type,
      Value<String> icao,
      Value<String> shap,
      Value<String> derivation,
      Value<String> wgslat1,
      Value<String> wgsdlat1,
      Value<String> wgslong1,
      Value<String> wgsdlong1,
      Value<String> wgslat2,
      Value<String> wgsdlat2,
      Value<String> wgslong2,
      Value<String> wgsdlong2,
      Value<String> wgslat0,
      Value<String> wgsdlat0,
      Value<String> wgslong0,
      Value<String> wgsdlong0,
      Value<String> radius1,
      Value<String> radius2,
      Value<String> bearing1,
      Value<String> bearing2,
      Value<String> navident,
      Value<String> navtype,
      Value<String> navctry,
      Value<String> navkeycd,
      Value<String> cycledate,
      Value<int> crc32,
      Value<double> lat0,
      Value<double> lon0,
      Value<double> lat1,
      Value<double> lon1,
      Value<double> lat2,
      Value<double> lon2}) {
    return DafifSpecialUseAirspaceCompanion(
      id: id ?? this.id,
      suasident: suasident ?? this.suasident,
      sector: sector ?? this.sector,
      segnbr: segnbr ?? this.segnbr,
      name: name ?? this.name,
      type: type ?? this.type,
      icao: icao ?? this.icao,
      shap: shap ?? this.shap,
      derivation: derivation ?? this.derivation,
      wgslat1: wgslat1 ?? this.wgslat1,
      wgsdlat1: wgsdlat1 ?? this.wgsdlat1,
      wgslong1: wgslong1 ?? this.wgslong1,
      wgsdlong1: wgsdlong1 ?? this.wgsdlong1,
      wgslat2: wgslat2 ?? this.wgslat2,
      wgsdlat2: wgsdlat2 ?? this.wgsdlat2,
      wgslong2: wgslong2 ?? this.wgslong2,
      wgsdlong2: wgsdlong2 ?? this.wgsdlong2,
      wgslat0: wgslat0 ?? this.wgslat0,
      wgsdlat0: wgsdlat0 ?? this.wgsdlat0,
      wgslong0: wgslong0 ?? this.wgslong0,
      wgsdlong0: wgsdlong0 ?? this.wgsdlong0,
      radius1: radius1 ?? this.radius1,
      radius2: radius2 ?? this.radius2,
      bearing1: bearing1 ?? this.bearing1,
      bearing2: bearing2 ?? this.bearing2,
      navident: navident ?? this.navident,
      navtype: navtype ?? this.navtype,
      navctry: navctry ?? this.navctry,
      navkeycd: navkeycd ?? this.navkeycd,
      cycledate: cycledate ?? this.cycledate,
      crc32: crc32 ?? this.crc32,
      lat0: lat0 ?? this.lat0,
      lon0: lon0 ?? this.lon0,
      lat1: lat1 ?? this.lat1,
      lon1: lon1 ?? this.lon1,
      lat2: lat2 ?? this.lat2,
      lon2: lon2 ?? this.lon2,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (suasident.present) {
      map['suasident'] = Variable<String>(suasident.value);
    }
    if (sector.present) {
      map['sector'] = Variable<String>(sector.value);
    }
    if (segnbr.present) {
      map['segnbr'] = Variable<String>(segnbr.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (shap.present) {
      map['shap'] = Variable<String>(shap.value);
    }
    if (derivation.present) {
      map['derivation'] = Variable<String>(derivation.value);
    }
    if (wgslat1.present) {
      map['wgslat1'] = Variable<String>(wgslat1.value);
    }
    if (wgsdlat1.present) {
      map['wgsdlat1'] = Variable<String>(wgsdlat1.value);
    }
    if (wgslong1.present) {
      map['wgslong1'] = Variable<String>(wgslong1.value);
    }
    if (wgsdlong1.present) {
      map['wgsdlong1'] = Variable<String>(wgsdlong1.value);
    }
    if (wgslat2.present) {
      map['wgslat2'] = Variable<String>(wgslat2.value);
    }
    if (wgsdlat2.present) {
      map['wgsdlat2'] = Variable<String>(wgsdlat2.value);
    }
    if (wgslong2.present) {
      map['wgslong2'] = Variable<String>(wgslong2.value);
    }
    if (wgsdlong2.present) {
      map['wgsdlong2'] = Variable<String>(wgsdlong2.value);
    }
    if (wgslat0.present) {
      map['wgslat0'] = Variable<String>(wgslat0.value);
    }
    if (wgsdlat0.present) {
      map['wgsdlat0'] = Variable<String>(wgsdlat0.value);
    }
    if (wgslong0.present) {
      map['wgslong0'] = Variable<String>(wgslong0.value);
    }
    if (wgsdlong0.present) {
      map['wgsdlong0'] = Variable<String>(wgsdlong0.value);
    }
    if (radius1.present) {
      map['radius1'] = Variable<String>(radius1.value);
    }
    if (radius2.present) {
      map['radius2'] = Variable<String>(radius2.value);
    }
    if (bearing1.present) {
      map['bearing1'] = Variable<String>(bearing1.value);
    }
    if (bearing2.present) {
      map['bearing2'] = Variable<String>(bearing2.value);
    }
    if (navident.present) {
      map['navident'] = Variable<String>(navident.value);
    }
    if (navtype.present) {
      map['navtype'] = Variable<String>(navtype.value);
    }
    if (navctry.present) {
      map['navctry'] = Variable<String>(navctry.value);
    }
    if (navkeycd.present) {
      map['navkeycd'] = Variable<String>(navkeycd.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    if (lat0.present) {
      map['lat0'] = Variable<double>(lat0.value);
    }
    if (lon0.present) {
      map['lon0'] = Variable<double>(lon0.value);
    }
    if (lat1.present) {
      map['lat1'] = Variable<double>(lat1.value);
    }
    if (lon1.present) {
      map['lon1'] = Variable<double>(lon1.value);
    }
    if (lat2.present) {
      map['lat2'] = Variable<double>(lat2.value);
    }
    if (lon2.present) {
      map['lon2'] = Variable<double>(lon2.value);
    }
    return map;
  }
}

class $DafifSpecialUseAirspaceTable extends DafifSpecialUseAirspace
    with TableInfo<$DafifSpecialUseAirspaceTable, dafif_special_use_airspace> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifSpecialUseAirspaceTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _suasidentMeta = const VerificationMeta('suasident');
  GeneratedTextColumn _suasident;
  @override
  GeneratedTextColumn get suasident => _suasident ??= _constructSuasident();
  GeneratedTextColumn _constructSuasident() {
    return GeneratedTextColumn(
      'suasident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sectorMeta = const VerificationMeta('sector');
  GeneratedTextColumn _sector;
  @override
  GeneratedTextColumn get sector => _sector ??= _constructSector();
  GeneratedTextColumn _constructSector() {
    return GeneratedTextColumn(
      'sector',
      $tableName,
      true,
    );
  }

  final VerificationMeta _segnbrMeta = const VerificationMeta('segnbr');
  GeneratedTextColumn _segnbr;
  @override
  GeneratedTextColumn get segnbr => _segnbr ??= _constructSegnbr();
  GeneratedTextColumn _constructSegnbr() {
    return GeneratedTextColumn(
      'segnbr',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _shapMeta = const VerificationMeta('shap');
  GeneratedTextColumn _shap;
  @override
  GeneratedTextColumn get shap => _shap ??= _constructShap();
  GeneratedTextColumn _constructShap() {
    return GeneratedTextColumn(
      'shap',
      $tableName,
      true,
    );
  }

  final VerificationMeta _derivationMeta = const VerificationMeta('derivation');
  GeneratedTextColumn _derivation;
  @override
  GeneratedTextColumn get derivation => _derivation ??= _constructDerivation();
  GeneratedTextColumn _constructDerivation() {
    return GeneratedTextColumn(
      'derivation',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslat1Meta = const VerificationMeta('wgslat1');
  GeneratedTextColumn _wgslat1;
  @override
  GeneratedTextColumn get wgslat1 => _wgslat1 ??= _constructWgslat1();
  GeneratedTextColumn _constructWgslat1() {
    return GeneratedTextColumn(
      'wgslat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlat1Meta = const VerificationMeta('wgsdlat1');
  GeneratedTextColumn _wgsdlat1;
  @override
  GeneratedTextColumn get wgsdlat1 => _wgsdlat1 ??= _constructWgsdlat1();
  GeneratedTextColumn _constructWgsdlat1() {
    return GeneratedTextColumn(
      'wgsdlat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslong1Meta = const VerificationMeta('wgslong1');
  GeneratedTextColumn _wgslong1;
  @override
  GeneratedTextColumn get wgslong1 => _wgslong1 ??= _constructWgslong1();
  GeneratedTextColumn _constructWgslong1() {
    return GeneratedTextColumn(
      'wgslong1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlong1Meta = const VerificationMeta('wgsdlong1');
  GeneratedTextColumn _wgsdlong1;
  @override
  GeneratedTextColumn get wgsdlong1 => _wgsdlong1 ??= _constructWgsdlong1();
  GeneratedTextColumn _constructWgsdlong1() {
    return GeneratedTextColumn(
      'wgsdlong1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslat2Meta = const VerificationMeta('wgslat2');
  GeneratedTextColumn _wgslat2;
  @override
  GeneratedTextColumn get wgslat2 => _wgslat2 ??= _constructWgslat2();
  GeneratedTextColumn _constructWgslat2() {
    return GeneratedTextColumn(
      'wgslat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlat2Meta = const VerificationMeta('wgsdlat2');
  GeneratedTextColumn _wgsdlat2;
  @override
  GeneratedTextColumn get wgsdlat2 => _wgsdlat2 ??= _constructWgsdlat2();
  GeneratedTextColumn _constructWgsdlat2() {
    return GeneratedTextColumn(
      'wgsdlat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslong2Meta = const VerificationMeta('wgslong2');
  GeneratedTextColumn _wgslong2;
  @override
  GeneratedTextColumn get wgslong2 => _wgslong2 ??= _constructWgslong2();
  GeneratedTextColumn _constructWgslong2() {
    return GeneratedTextColumn(
      'wgslong2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlong2Meta = const VerificationMeta('wgsdlong2');
  GeneratedTextColumn _wgsdlong2;
  @override
  GeneratedTextColumn get wgsdlong2 => _wgsdlong2 ??= _constructWgsdlong2();
  GeneratedTextColumn _constructWgsdlong2() {
    return GeneratedTextColumn(
      'wgsdlong2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslat0Meta = const VerificationMeta('wgslat0');
  GeneratedTextColumn _wgslat0;
  @override
  GeneratedTextColumn get wgslat0 => _wgslat0 ??= _constructWgslat0();
  GeneratedTextColumn _constructWgslat0() {
    return GeneratedTextColumn(
      'wgslat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlat0Meta = const VerificationMeta('wgsdlat0');
  GeneratedTextColumn _wgsdlat0;
  @override
  GeneratedTextColumn get wgsdlat0 => _wgsdlat0 ??= _constructWgsdlat0();
  GeneratedTextColumn _constructWgsdlat0() {
    return GeneratedTextColumn(
      'wgsdlat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslong0Meta = const VerificationMeta('wgslong0');
  GeneratedTextColumn _wgslong0;
  @override
  GeneratedTextColumn get wgslong0 => _wgslong0 ??= _constructWgslong0();
  GeneratedTextColumn _constructWgslong0() {
    return GeneratedTextColumn(
      'wgslong0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlong0Meta = const VerificationMeta('wgsdlong0');
  GeneratedTextColumn _wgsdlong0;
  @override
  GeneratedTextColumn get wgsdlong0 => _wgsdlong0 ??= _constructWgsdlong0();
  GeneratedTextColumn _constructWgsdlong0() {
    return GeneratedTextColumn(
      'wgsdlong0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _radius1Meta = const VerificationMeta('radius1');
  GeneratedTextColumn _radius1;
  @override
  GeneratedTextColumn get radius1 => _radius1 ??= _constructRadius1();
  GeneratedTextColumn _constructRadius1() {
    return GeneratedTextColumn(
      'radius1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _radius2Meta = const VerificationMeta('radius2');
  GeneratedTextColumn _radius2;
  @override
  GeneratedTextColumn get radius2 => _radius2 ??= _constructRadius2();
  GeneratedTextColumn _constructRadius2() {
    return GeneratedTextColumn(
      'radius2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearing1Meta = const VerificationMeta('bearing1');
  GeneratedTextColumn _bearing1;
  @override
  GeneratedTextColumn get bearing1 => _bearing1 ??= _constructBearing1();
  GeneratedTextColumn _constructBearing1() {
    return GeneratedTextColumn(
      'bearing1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearing2Meta = const VerificationMeta('bearing2');
  GeneratedTextColumn _bearing2;
  @override
  GeneratedTextColumn get bearing2 => _bearing2 ??= _constructBearing2();
  GeneratedTextColumn _constructBearing2() {
    return GeneratedTextColumn(
      'bearing2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navidentMeta = const VerificationMeta('navident');
  GeneratedTextColumn _navident;
  @override
  GeneratedTextColumn get navident => _navident ??= _constructNavident();
  GeneratedTextColumn _constructNavident() {
    return GeneratedTextColumn(
      'navident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navtypeMeta = const VerificationMeta('navtype');
  GeneratedTextColumn _navtype;
  @override
  GeneratedTextColumn get navtype => _navtype ??= _constructNavtype();
  GeneratedTextColumn _constructNavtype() {
    return GeneratedTextColumn(
      'navtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navctryMeta = const VerificationMeta('navctry');
  GeneratedTextColumn _navctry;
  @override
  GeneratedTextColumn get navctry => _navctry ??= _constructNavctry();
  GeneratedTextColumn _constructNavctry() {
    return GeneratedTextColumn(
      'navctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navkeycdMeta = const VerificationMeta('navkeycd');
  GeneratedTextColumn _navkeycd;
  @override
  GeneratedTextColumn get navkeycd => _navkeycd ??= _constructNavkeycd();
  GeneratedTextColumn _constructNavkeycd() {
    return GeneratedTextColumn(
      'navkeycd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lat0Meta = const VerificationMeta('lat0');
  GeneratedRealColumn _lat0;
  @override
  GeneratedRealColumn get lat0 => _lat0 ??= _constructLat0();
  GeneratedRealColumn _constructLat0() {
    return GeneratedRealColumn(
      'lat0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lon0Meta = const VerificationMeta('lon0');
  GeneratedRealColumn _lon0;
  @override
  GeneratedRealColumn get lon0 => _lon0 ??= _constructLon0();
  GeneratedRealColumn _constructLon0() {
    return GeneratedRealColumn(
      'lon0',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lat1Meta = const VerificationMeta('lat1');
  GeneratedRealColumn _lat1;
  @override
  GeneratedRealColumn get lat1 => _lat1 ??= _constructLat1();
  GeneratedRealColumn _constructLat1() {
    return GeneratedRealColumn(
      'lat1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lon1Meta = const VerificationMeta('lon1');
  GeneratedRealColumn _lon1;
  @override
  GeneratedRealColumn get lon1 => _lon1 ??= _constructLon1();
  GeneratedRealColumn _constructLon1() {
    return GeneratedRealColumn(
      'lon1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lat2Meta = const VerificationMeta('lat2');
  GeneratedRealColumn _lat2;
  @override
  GeneratedRealColumn get lat2 => _lat2 ??= _constructLat2();
  GeneratedRealColumn _constructLat2() {
    return GeneratedRealColumn(
      'lat2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lon2Meta = const VerificationMeta('lon2');
  GeneratedRealColumn _lon2;
  @override
  GeneratedRealColumn get lon2 => _lon2 ??= _constructLon2();
  GeneratedRealColumn _constructLon2() {
    return GeneratedRealColumn(
      'lon2',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        suasident,
        sector,
        segnbr,
        name,
        type,
        icao,
        shap,
        derivation,
        wgslat1,
        wgsdlat1,
        wgslong1,
        wgsdlong1,
        wgslat2,
        wgsdlat2,
        wgslong2,
        wgsdlong2,
        wgslat0,
        wgsdlat0,
        wgslong0,
        wgsdlong0,
        radius1,
        radius2,
        bearing1,
        bearing2,
        navident,
        navtype,
        navctry,
        navkeycd,
        cycledate,
        crc32,
        lat0,
        lon0,
        lat1,
        lon1,
        lat2,
        lon2
      ];
  @override
  $DafifSpecialUseAirspaceTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_special_use_airspace';
  @override
  final String actualTableName = 'dafif_special_use_airspace';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_special_use_airspace> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('suasident')) {
      context.handle(_suasidentMeta,
          suasident.isAcceptableOrUnknown(data['suasident'], _suasidentMeta));
    }
    if (data.containsKey('sector')) {
      context.handle(_sectorMeta,
          sector.isAcceptableOrUnknown(data['sector'], _sectorMeta));
    }
    if (data.containsKey('segnbr')) {
      context.handle(_segnbrMeta,
          segnbr.isAcceptableOrUnknown(data['segnbr'], _segnbrMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('shap')) {
      context.handle(
          _shapMeta, shap.isAcceptableOrUnknown(data['shap'], _shapMeta));
    }
    if (data.containsKey('derivation')) {
      context.handle(
          _derivationMeta,
          derivation.isAcceptableOrUnknown(
              data['derivation'], _derivationMeta));
    }
    if (data.containsKey('wgslat1')) {
      context.handle(_wgslat1Meta,
          wgslat1.isAcceptableOrUnknown(data['wgslat1'], _wgslat1Meta));
    }
    if (data.containsKey('wgsdlat1')) {
      context.handle(_wgsdlat1Meta,
          wgsdlat1.isAcceptableOrUnknown(data['wgsdlat1'], _wgsdlat1Meta));
    }
    if (data.containsKey('wgslong1')) {
      context.handle(_wgslong1Meta,
          wgslong1.isAcceptableOrUnknown(data['wgslong1'], _wgslong1Meta));
    }
    if (data.containsKey('wgsdlong1')) {
      context.handle(_wgsdlong1Meta,
          wgsdlong1.isAcceptableOrUnknown(data['wgsdlong1'], _wgsdlong1Meta));
    }
    if (data.containsKey('wgslat2')) {
      context.handle(_wgslat2Meta,
          wgslat2.isAcceptableOrUnknown(data['wgslat2'], _wgslat2Meta));
    }
    if (data.containsKey('wgsdlat2')) {
      context.handle(_wgsdlat2Meta,
          wgsdlat2.isAcceptableOrUnknown(data['wgsdlat2'], _wgsdlat2Meta));
    }
    if (data.containsKey('wgslong2')) {
      context.handle(_wgslong2Meta,
          wgslong2.isAcceptableOrUnknown(data['wgslong2'], _wgslong2Meta));
    }
    if (data.containsKey('wgsdlong2')) {
      context.handle(_wgsdlong2Meta,
          wgsdlong2.isAcceptableOrUnknown(data['wgsdlong2'], _wgsdlong2Meta));
    }
    if (data.containsKey('wgslat0')) {
      context.handle(_wgslat0Meta,
          wgslat0.isAcceptableOrUnknown(data['wgslat0'], _wgslat0Meta));
    }
    if (data.containsKey('wgsdlat0')) {
      context.handle(_wgsdlat0Meta,
          wgsdlat0.isAcceptableOrUnknown(data['wgsdlat0'], _wgsdlat0Meta));
    }
    if (data.containsKey('wgslong0')) {
      context.handle(_wgslong0Meta,
          wgslong0.isAcceptableOrUnknown(data['wgslong0'], _wgslong0Meta));
    }
    if (data.containsKey('wgsdlong0')) {
      context.handle(_wgsdlong0Meta,
          wgsdlong0.isAcceptableOrUnknown(data['wgsdlong0'], _wgsdlong0Meta));
    }
    if (data.containsKey('radius1')) {
      context.handle(_radius1Meta,
          radius1.isAcceptableOrUnknown(data['radius1'], _radius1Meta));
    }
    if (data.containsKey('radius2')) {
      context.handle(_radius2Meta,
          radius2.isAcceptableOrUnknown(data['radius2'], _radius2Meta));
    }
    if (data.containsKey('bearing1')) {
      context.handle(_bearing1Meta,
          bearing1.isAcceptableOrUnknown(data['bearing1'], _bearing1Meta));
    }
    if (data.containsKey('bearing2')) {
      context.handle(_bearing2Meta,
          bearing2.isAcceptableOrUnknown(data['bearing2'], _bearing2Meta));
    }
    if (data.containsKey('navident')) {
      context.handle(_navidentMeta,
          navident.isAcceptableOrUnknown(data['navident'], _navidentMeta));
    }
    if (data.containsKey('navtype')) {
      context.handle(_navtypeMeta,
          navtype.isAcceptableOrUnknown(data['navtype'], _navtypeMeta));
    }
    if (data.containsKey('navctry')) {
      context.handle(_navctryMeta,
          navctry.isAcceptableOrUnknown(data['navctry'], _navctryMeta));
    }
    if (data.containsKey('navkeycd')) {
      context.handle(_navkeycdMeta,
          navkeycd.isAcceptableOrUnknown(data['navkeycd'], _navkeycdMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('lat0')) {
      context.handle(
          _lat0Meta, lat0.isAcceptableOrUnknown(data['lat0'], _lat0Meta));
    }
    if (data.containsKey('lon0')) {
      context.handle(
          _lon0Meta, lon0.isAcceptableOrUnknown(data['lon0'], _lon0Meta));
    }
    if (data.containsKey('lat1')) {
      context.handle(
          _lat1Meta, lat1.isAcceptableOrUnknown(data['lat1'], _lat1Meta));
    }
    if (data.containsKey('lon1')) {
      context.handle(
          _lon1Meta, lon1.isAcceptableOrUnknown(data['lon1'], _lon1Meta));
    }
    if (data.containsKey('lat2')) {
      context.handle(
          _lat2Meta, lat2.isAcceptableOrUnknown(data['lat2'], _lat2Meta));
    }
    if (data.containsKey('lon2')) {
      context.handle(
          _lon2Meta, lon2.isAcceptableOrUnknown(data['lon2'], _lon2Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_special_use_airspace map(Map<String, dynamic> data,
      {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_special_use_airspace.fromData(data, _db,
        prefix: effectivePrefix);
  }

  @override
  $DafifSpecialUseAirspaceTable createAlias(String alias) {
    return $DafifSpecialUseAirspaceTable(_db, alias);
  }
}

class dafif_special_use_airspace_par extends DataClass
    implements Insertable<dafif_special_use_airspace_par> {
  final int id;
  final String suasident;
  final String sector;
  final String type;
  final String name;
  final String icao;
  final String conagcy;
  final String lochdatum;
  final String wgsdatum;
  final String commname;
  final String freq1;
  final String freq2;
  final String levelinfo;
  final String upperalt;
  final String loweralt;
  final String efftimes;
  final String wx;
  final String cycledate;
  final String effdate;
  final int crc32;
  dafif_special_use_airspace_par(
      {@required this.id,
      this.suasident,
      this.sector,
      this.type,
      this.name,
      this.icao,
      this.conagcy,
      this.lochdatum,
      this.wgsdatum,
      this.commname,
      this.freq1,
      this.freq2,
      this.levelinfo,
      this.upperalt,
      this.loweralt,
      this.efftimes,
      this.wx,
      this.cycledate,
      this.effdate,
      this.crc32});
  factory dafif_special_use_airspace_par.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_special_use_airspace_par(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      suasident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}suasident']),
      sector:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}sector']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      name: stringType.mapFromDatabaseResponse(data['${effectivePrefix}name']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      conagcy:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}conagcy']),
      lochdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lochdatum']),
      wgsdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdatum']),
      commname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}commname']),
      freq1:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}freq1']),
      freq2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}freq2']),
      levelinfo: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}levelinfo']),
      upperalt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}upperalt']),
      loweralt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}loweralt']),
      efftimes: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}efftimes']),
      wx: stringType.mapFromDatabaseResponse(data['${effectivePrefix}wx']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      effdate:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}effdate']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || suasident != null) {
      map['suasident'] = Variable<String>(suasident);
    }
    if (!nullToAbsent || sector != null) {
      map['sector'] = Variable<String>(sector);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || conagcy != null) {
      map['conagcy'] = Variable<String>(conagcy);
    }
    if (!nullToAbsent || lochdatum != null) {
      map['lochdatum'] = Variable<String>(lochdatum);
    }
    if (!nullToAbsent || wgsdatum != null) {
      map['wgsdatum'] = Variable<String>(wgsdatum);
    }
    if (!nullToAbsent || commname != null) {
      map['commname'] = Variable<String>(commname);
    }
    if (!nullToAbsent || freq1 != null) {
      map['freq1'] = Variable<String>(freq1);
    }
    if (!nullToAbsent || freq2 != null) {
      map['freq2'] = Variable<String>(freq2);
    }
    if (!nullToAbsent || levelinfo != null) {
      map['levelinfo'] = Variable<String>(levelinfo);
    }
    if (!nullToAbsent || upperalt != null) {
      map['upperalt'] = Variable<String>(upperalt);
    }
    if (!nullToAbsent || loweralt != null) {
      map['loweralt'] = Variable<String>(loweralt);
    }
    if (!nullToAbsent || efftimes != null) {
      map['efftimes'] = Variable<String>(efftimes);
    }
    if (!nullToAbsent || wx != null) {
      map['wx'] = Variable<String>(wx);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || effdate != null) {
      map['effdate'] = Variable<String>(effdate);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    return map;
  }

  factory dafif_special_use_airspace_par.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_special_use_airspace_par(
      id: serializer.fromJson<int>(json['id']),
      suasident: serializer.fromJson<String>(json['suasident']),
      sector: serializer.fromJson<String>(json['sector']),
      type: serializer.fromJson<String>(json['type']),
      name: serializer.fromJson<String>(json['name']),
      icao: serializer.fromJson<String>(json['icao']),
      conagcy: serializer.fromJson<String>(json['conagcy']),
      lochdatum: serializer.fromJson<String>(json['lochdatum']),
      wgsdatum: serializer.fromJson<String>(json['wgsdatum']),
      commname: serializer.fromJson<String>(json['commname']),
      freq1: serializer.fromJson<String>(json['freq1']),
      freq2: serializer.fromJson<String>(json['freq2']),
      levelinfo: serializer.fromJson<String>(json['levelinfo']),
      upperalt: serializer.fromJson<String>(json['upperalt']),
      loweralt: serializer.fromJson<String>(json['loweralt']),
      efftimes: serializer.fromJson<String>(json['efftimes']),
      wx: serializer.fromJson<String>(json['wx']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      effdate: serializer.fromJson<String>(json['effdate']),
      crc32: serializer.fromJson<int>(json['crc32']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'suasident': serializer.toJson<String>(suasident),
      'sector': serializer.toJson<String>(sector),
      'type': serializer.toJson<String>(type),
      'name': serializer.toJson<String>(name),
      'icao': serializer.toJson<String>(icao),
      'conagcy': serializer.toJson<String>(conagcy),
      'lochdatum': serializer.toJson<String>(lochdatum),
      'wgsdatum': serializer.toJson<String>(wgsdatum),
      'commname': serializer.toJson<String>(commname),
      'freq1': serializer.toJson<String>(freq1),
      'freq2': serializer.toJson<String>(freq2),
      'levelinfo': serializer.toJson<String>(levelinfo),
      'upperalt': serializer.toJson<String>(upperalt),
      'loweralt': serializer.toJson<String>(loweralt),
      'efftimes': serializer.toJson<String>(efftimes),
      'wx': serializer.toJson<String>(wx),
      'cycledate': serializer.toJson<String>(cycledate),
      'effdate': serializer.toJson<String>(effdate),
      'crc32': serializer.toJson<int>(crc32),
    };
  }

  dafif_special_use_airspace_par copyWith(
          {int id,
          String suasident,
          String sector,
          String type,
          String name,
          String icao,
          String conagcy,
          String lochdatum,
          String wgsdatum,
          String commname,
          String freq1,
          String freq2,
          String levelinfo,
          String upperalt,
          String loweralt,
          String efftimes,
          String wx,
          String cycledate,
          String effdate,
          int crc32}) =>
      dafif_special_use_airspace_par(
        id: id ?? this.id,
        suasident: suasident ?? this.suasident,
        sector: sector ?? this.sector,
        type: type ?? this.type,
        name: name ?? this.name,
        icao: icao ?? this.icao,
        conagcy: conagcy ?? this.conagcy,
        lochdatum: lochdatum ?? this.lochdatum,
        wgsdatum: wgsdatum ?? this.wgsdatum,
        commname: commname ?? this.commname,
        freq1: freq1 ?? this.freq1,
        freq2: freq2 ?? this.freq2,
        levelinfo: levelinfo ?? this.levelinfo,
        upperalt: upperalt ?? this.upperalt,
        loweralt: loweralt ?? this.loweralt,
        efftimes: efftimes ?? this.efftimes,
        wx: wx ?? this.wx,
        cycledate: cycledate ?? this.cycledate,
        effdate: effdate ?? this.effdate,
        crc32: crc32 ?? this.crc32,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_special_use_airspace_par(')
          ..write('id: $id, ')
          ..write('suasident: $suasident, ')
          ..write('sector: $sector, ')
          ..write('type: $type, ')
          ..write('name: $name, ')
          ..write('icao: $icao, ')
          ..write('conagcy: $conagcy, ')
          ..write('lochdatum: $lochdatum, ')
          ..write('wgsdatum: $wgsdatum, ')
          ..write('commname: $commname, ')
          ..write('freq1: $freq1, ')
          ..write('freq2: $freq2, ')
          ..write('levelinfo: $levelinfo, ')
          ..write('upperalt: $upperalt, ')
          ..write('loweralt: $loweralt, ')
          ..write('efftimes: $efftimes, ')
          ..write('wx: $wx, ')
          ..write('cycledate: $cycledate, ')
          ..write('effdate: $effdate, ')
          ..write('crc32: $crc32')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          suasident.hashCode,
          $mrjc(
              sector.hashCode,
              $mrjc(
                  type.hashCode,
                  $mrjc(
                      name.hashCode,
                      $mrjc(
                          icao.hashCode,
                          $mrjc(
                              conagcy.hashCode,
                              $mrjc(
                                  lochdatum.hashCode,
                                  $mrjc(
                                      wgsdatum.hashCode,
                                      $mrjc(
                                          commname.hashCode,
                                          $mrjc(
                                              freq1.hashCode,
                                              $mrjc(
                                                  freq2.hashCode,
                                                  $mrjc(
                                                      levelinfo.hashCode,
                                                      $mrjc(
                                                          upperalt.hashCode,
                                                          $mrjc(
                                                              loweralt.hashCode,
                                                              $mrjc(
                                                                  efftimes
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      wx
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          cycledate
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              effdate.hashCode,
                                                                              crc32.hashCode))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_special_use_airspace_par &&
          other.id == this.id &&
          other.suasident == this.suasident &&
          other.sector == this.sector &&
          other.type == this.type &&
          other.name == this.name &&
          other.icao == this.icao &&
          other.conagcy == this.conagcy &&
          other.lochdatum == this.lochdatum &&
          other.wgsdatum == this.wgsdatum &&
          other.commname == this.commname &&
          other.freq1 == this.freq1 &&
          other.freq2 == this.freq2 &&
          other.levelinfo == this.levelinfo &&
          other.upperalt == this.upperalt &&
          other.loweralt == this.loweralt &&
          other.efftimes == this.efftimes &&
          other.wx == this.wx &&
          other.cycledate == this.cycledate &&
          other.effdate == this.effdate &&
          other.crc32 == this.crc32);
}

class DafifSpecialUseAirspaceParCompanion
    extends UpdateCompanion<dafif_special_use_airspace_par> {
  final Value<int> id;
  final Value<String> suasident;
  final Value<String> sector;
  final Value<String> type;
  final Value<String> name;
  final Value<String> icao;
  final Value<String> conagcy;
  final Value<String> lochdatum;
  final Value<String> wgsdatum;
  final Value<String> commname;
  final Value<String> freq1;
  final Value<String> freq2;
  final Value<String> levelinfo;
  final Value<String> upperalt;
  final Value<String> loweralt;
  final Value<String> efftimes;
  final Value<String> wx;
  final Value<String> cycledate;
  final Value<String> effdate;
  final Value<int> crc32;
  const DafifSpecialUseAirspaceParCompanion({
    this.id = const Value.absent(),
    this.suasident = const Value.absent(),
    this.sector = const Value.absent(),
    this.type = const Value.absent(),
    this.name = const Value.absent(),
    this.icao = const Value.absent(),
    this.conagcy = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.commname = const Value.absent(),
    this.freq1 = const Value.absent(),
    this.freq2 = const Value.absent(),
    this.levelinfo = const Value.absent(),
    this.upperalt = const Value.absent(),
    this.loweralt = const Value.absent(),
    this.efftimes = const Value.absent(),
    this.wx = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.effdate = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  DafifSpecialUseAirspaceParCompanion.insert({
    this.id = const Value.absent(),
    this.suasident = const Value.absent(),
    this.sector = const Value.absent(),
    this.type = const Value.absent(),
    this.name = const Value.absent(),
    this.icao = const Value.absent(),
    this.conagcy = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.commname = const Value.absent(),
    this.freq1 = const Value.absent(),
    this.freq2 = const Value.absent(),
    this.levelinfo = const Value.absent(),
    this.upperalt = const Value.absent(),
    this.loweralt = const Value.absent(),
    this.efftimes = const Value.absent(),
    this.wx = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.effdate = const Value.absent(),
    this.crc32 = const Value.absent(),
  });
  static Insertable<dafif_special_use_airspace_par> custom({
    Expression<int> id,
    Expression<String> suasident,
    Expression<String> sector,
    Expression<String> type,
    Expression<String> name,
    Expression<String> icao,
    Expression<String> conagcy,
    Expression<String> lochdatum,
    Expression<String> wgsdatum,
    Expression<String> commname,
    Expression<String> freq1,
    Expression<String> freq2,
    Expression<String> levelinfo,
    Expression<String> upperalt,
    Expression<String> loweralt,
    Expression<String> efftimes,
    Expression<String> wx,
    Expression<String> cycledate,
    Expression<String> effdate,
    Expression<int> crc32,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (suasident != null) 'suasident': suasident,
      if (sector != null) 'sector': sector,
      if (type != null) 'type': type,
      if (name != null) 'name': name,
      if (icao != null) 'icao': icao,
      if (conagcy != null) 'conagcy': conagcy,
      if (lochdatum != null) 'lochdatum': lochdatum,
      if (wgsdatum != null) 'wgsdatum': wgsdatum,
      if (commname != null) 'commname': commname,
      if (freq1 != null) 'freq1': freq1,
      if (freq2 != null) 'freq2': freq2,
      if (levelinfo != null) 'levelinfo': levelinfo,
      if (upperalt != null) 'upperalt': upperalt,
      if (loweralt != null) 'loweralt': loweralt,
      if (efftimes != null) 'efftimes': efftimes,
      if (wx != null) 'wx': wx,
      if (cycledate != null) 'cycledate': cycledate,
      if (effdate != null) 'effdate': effdate,
      if (crc32 != null) 'crc32': crc32,
    });
  }

  DafifSpecialUseAirspaceParCompanion copyWith(
      {Value<int> id,
      Value<String> suasident,
      Value<String> sector,
      Value<String> type,
      Value<String> name,
      Value<String> icao,
      Value<String> conagcy,
      Value<String> lochdatum,
      Value<String> wgsdatum,
      Value<String> commname,
      Value<String> freq1,
      Value<String> freq2,
      Value<String> levelinfo,
      Value<String> upperalt,
      Value<String> loweralt,
      Value<String> efftimes,
      Value<String> wx,
      Value<String> cycledate,
      Value<String> effdate,
      Value<int> crc32}) {
    return DafifSpecialUseAirspaceParCompanion(
      id: id ?? this.id,
      suasident: suasident ?? this.suasident,
      sector: sector ?? this.sector,
      type: type ?? this.type,
      name: name ?? this.name,
      icao: icao ?? this.icao,
      conagcy: conagcy ?? this.conagcy,
      lochdatum: lochdatum ?? this.lochdatum,
      wgsdatum: wgsdatum ?? this.wgsdatum,
      commname: commname ?? this.commname,
      freq1: freq1 ?? this.freq1,
      freq2: freq2 ?? this.freq2,
      levelinfo: levelinfo ?? this.levelinfo,
      upperalt: upperalt ?? this.upperalt,
      loweralt: loweralt ?? this.loweralt,
      efftimes: efftimes ?? this.efftimes,
      wx: wx ?? this.wx,
      cycledate: cycledate ?? this.cycledate,
      effdate: effdate ?? this.effdate,
      crc32: crc32 ?? this.crc32,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (suasident.present) {
      map['suasident'] = Variable<String>(suasident.value);
    }
    if (sector.present) {
      map['sector'] = Variable<String>(sector.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (conagcy.present) {
      map['conagcy'] = Variable<String>(conagcy.value);
    }
    if (lochdatum.present) {
      map['lochdatum'] = Variable<String>(lochdatum.value);
    }
    if (wgsdatum.present) {
      map['wgsdatum'] = Variable<String>(wgsdatum.value);
    }
    if (commname.present) {
      map['commname'] = Variable<String>(commname.value);
    }
    if (freq1.present) {
      map['freq1'] = Variable<String>(freq1.value);
    }
    if (freq2.present) {
      map['freq2'] = Variable<String>(freq2.value);
    }
    if (levelinfo.present) {
      map['levelinfo'] = Variable<String>(levelinfo.value);
    }
    if (upperalt.present) {
      map['upperalt'] = Variable<String>(upperalt.value);
    }
    if (loweralt.present) {
      map['loweralt'] = Variable<String>(loweralt.value);
    }
    if (efftimes.present) {
      map['efftimes'] = Variable<String>(efftimes.value);
    }
    if (wx.present) {
      map['wx'] = Variable<String>(wx.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (effdate.present) {
      map['effdate'] = Variable<String>(effdate.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    return map;
  }
}

class $DafifSpecialUseAirspaceParTable extends DafifSpecialUseAirspacePar
    with
        TableInfo<$DafifSpecialUseAirspaceParTable,
            dafif_special_use_airspace_par> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifSpecialUseAirspaceParTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _suasidentMeta = const VerificationMeta('suasident');
  GeneratedTextColumn _suasident;
  @override
  GeneratedTextColumn get suasident => _suasident ??= _constructSuasident();
  GeneratedTextColumn _constructSuasident() {
    return GeneratedTextColumn(
      'suasident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sectorMeta = const VerificationMeta('sector');
  GeneratedTextColumn _sector;
  @override
  GeneratedTextColumn get sector => _sector ??= _constructSector();
  GeneratedTextColumn _constructSector() {
    return GeneratedTextColumn(
      'sector',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedTextColumn _name;
  @override
  GeneratedTextColumn get name => _name ??= _constructName();
  GeneratedTextColumn _constructName() {
    return GeneratedTextColumn(
      'name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _conagcyMeta = const VerificationMeta('conagcy');
  GeneratedTextColumn _conagcy;
  @override
  GeneratedTextColumn get conagcy => _conagcy ??= _constructConagcy();
  GeneratedTextColumn _constructConagcy() {
    return GeneratedTextColumn(
      'conagcy',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lochdatumMeta = const VerificationMeta('lochdatum');
  GeneratedTextColumn _lochdatum;
  @override
  GeneratedTextColumn get lochdatum => _lochdatum ??= _constructLochdatum();
  GeneratedTextColumn _constructLochdatum() {
    return GeneratedTextColumn(
      'lochdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdatumMeta = const VerificationMeta('wgsdatum');
  GeneratedTextColumn _wgsdatum;
  @override
  GeneratedTextColumn get wgsdatum => _wgsdatum ??= _constructWgsdatum();
  GeneratedTextColumn _constructWgsdatum() {
    return GeneratedTextColumn(
      'wgsdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _commnameMeta = const VerificationMeta('commname');
  GeneratedTextColumn _commname;
  @override
  GeneratedTextColumn get commname => _commname ??= _constructCommname();
  GeneratedTextColumn _constructCommname() {
    return GeneratedTextColumn(
      'commname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freq1Meta = const VerificationMeta('freq1');
  GeneratedTextColumn _freq1;
  @override
  GeneratedTextColumn get freq1 => _freq1 ??= _constructFreq1();
  GeneratedTextColumn _constructFreq1() {
    return GeneratedTextColumn(
      'freq1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _freq2Meta = const VerificationMeta('freq2');
  GeneratedTextColumn _freq2;
  @override
  GeneratedTextColumn get freq2 => _freq2 ??= _constructFreq2();
  GeneratedTextColumn _constructFreq2() {
    return GeneratedTextColumn(
      'freq2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _levelinfoMeta = const VerificationMeta('levelinfo');
  GeneratedTextColumn _levelinfo;
  @override
  GeneratedTextColumn get levelinfo => _levelinfo ??= _constructLevelinfo();
  GeneratedTextColumn _constructLevelinfo() {
    return GeneratedTextColumn(
      'levelinfo',
      $tableName,
      true,
    );
  }

  final VerificationMeta _upperaltMeta = const VerificationMeta('upperalt');
  GeneratedTextColumn _upperalt;
  @override
  GeneratedTextColumn get upperalt => _upperalt ??= _constructUpperalt();
  GeneratedTextColumn _constructUpperalt() {
    return GeneratedTextColumn(
      'upperalt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _loweraltMeta = const VerificationMeta('loweralt');
  GeneratedTextColumn _loweralt;
  @override
  GeneratedTextColumn get loweralt => _loweralt ??= _constructLoweralt();
  GeneratedTextColumn _constructLoweralt() {
    return GeneratedTextColumn(
      'loweralt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _efftimesMeta = const VerificationMeta('efftimes');
  GeneratedTextColumn _efftimes;
  @override
  GeneratedTextColumn get efftimes => _efftimes ??= _constructEfftimes();
  GeneratedTextColumn _constructEfftimes() {
    return GeneratedTextColumn(
      'efftimes',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wxMeta = const VerificationMeta('wx');
  GeneratedTextColumn _wx;
  @override
  GeneratedTextColumn get wx => _wx ??= _constructWx();
  GeneratedTextColumn _constructWx() {
    return GeneratedTextColumn(
      'wx',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _effdateMeta = const VerificationMeta('effdate');
  GeneratedTextColumn _effdate;
  @override
  GeneratedTextColumn get effdate => _effdate ??= _constructEffdate();
  GeneratedTextColumn _constructEffdate() {
    return GeneratedTextColumn(
      'effdate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        suasident,
        sector,
        type,
        name,
        icao,
        conagcy,
        lochdatum,
        wgsdatum,
        commname,
        freq1,
        freq2,
        levelinfo,
        upperalt,
        loweralt,
        efftimes,
        wx,
        cycledate,
        effdate,
        crc32
      ];
  @override
  $DafifSpecialUseAirspaceParTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_special_use_airspace_par';
  @override
  final String actualTableName = 'dafif_special_use_airspace_par';
  @override
  VerificationContext validateIntegrity(
      Insertable<dafif_special_use_airspace_par> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('suasident')) {
      context.handle(_suasidentMeta,
          suasident.isAcceptableOrUnknown(data['suasident'], _suasidentMeta));
    }
    if (data.containsKey('sector')) {
      context.handle(_sectorMeta,
          sector.isAcceptableOrUnknown(data['sector'], _sectorMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('conagcy')) {
      context.handle(_conagcyMeta,
          conagcy.isAcceptableOrUnknown(data['conagcy'], _conagcyMeta));
    }
    if (data.containsKey('lochdatum')) {
      context.handle(_lochdatumMeta,
          lochdatum.isAcceptableOrUnknown(data['lochdatum'], _lochdatumMeta));
    }
    if (data.containsKey('wgsdatum')) {
      context.handle(_wgsdatumMeta,
          wgsdatum.isAcceptableOrUnknown(data['wgsdatum'], _wgsdatumMeta));
    }
    if (data.containsKey('commname')) {
      context.handle(_commnameMeta,
          commname.isAcceptableOrUnknown(data['commname'], _commnameMeta));
    }
    if (data.containsKey('freq1')) {
      context.handle(
          _freq1Meta, freq1.isAcceptableOrUnknown(data['freq1'], _freq1Meta));
    }
    if (data.containsKey('freq2')) {
      context.handle(
          _freq2Meta, freq2.isAcceptableOrUnknown(data['freq2'], _freq2Meta));
    }
    if (data.containsKey('levelinfo')) {
      context.handle(_levelinfoMeta,
          levelinfo.isAcceptableOrUnknown(data['levelinfo'], _levelinfoMeta));
    }
    if (data.containsKey('upperalt')) {
      context.handle(_upperaltMeta,
          upperalt.isAcceptableOrUnknown(data['upperalt'], _upperaltMeta));
    }
    if (data.containsKey('loweralt')) {
      context.handle(_loweraltMeta,
          loweralt.isAcceptableOrUnknown(data['loweralt'], _loweraltMeta));
    }
    if (data.containsKey('efftimes')) {
      context.handle(_efftimesMeta,
          efftimes.isAcceptableOrUnknown(data['efftimes'], _efftimesMeta));
    }
    if (data.containsKey('wx')) {
      context.handle(_wxMeta, wx.isAcceptableOrUnknown(data['wx'], _wxMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('effdate')) {
      context.handle(_effdateMeta,
          effdate.isAcceptableOrUnknown(data['effdate'], _effdateMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_special_use_airspace_par map(Map<String, dynamic> data,
      {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_special_use_airspace_par.fromData(data, _db,
        prefix: effectivePrefix);
  }

  @override
  $DafifSpecialUseAirspaceParTable createAlias(String alias) {
    return $DafifSpecialUseAirspaceParTable(_db, alias);
  }
}

class dafif_trm_msa extends DataClass implements Insertable<dafif_trm_msa> {
  final int id;
  final String arpt_ident;
  final String proc;
  final String trm_ident;
  final String seq_nbr;
  final String seq_alt;
  final String icao;
  final String nav_ident;
  final String nav_type;
  final String nav_ctry;
  final String nav_key_cd;
  final String sec_bear1;
  final String sec_bear2;
  final String wpt_ident;
  final String wpt_ctry;
  final String sec_mile1;
  final String sec_mile2;
  final String wgs_lat;
  final String wgs_dlat;
  final String wgs_lon;
  final String wgs_dlon;
  final String cycledate;
  final int crc32;
  final double lat;
  final double lon;
  dafif_trm_msa(
      {@required this.id,
      this.arpt_ident,
      this.proc,
      this.trm_ident,
      this.seq_nbr,
      this.seq_alt,
      this.icao,
      this.nav_ident,
      this.nav_type,
      this.nav_ctry,
      this.nav_key_cd,
      this.sec_bear1,
      this.sec_bear2,
      this.wpt_ident,
      this.wpt_ctry,
      this.sec_mile1,
      this.sec_mile2,
      this.wgs_lat,
      this.wgs_dlat,
      this.wgs_lon,
      this.wgs_dlon,
      this.cycledate,
      this.crc32,
      this.lat,
      this.lon});
  factory dafif_trm_msa.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_trm_msa(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arpt_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arpt_ident']),
      proc: stringType.mapFromDatabaseResponse(data['${effectivePrefix}proc']),
      trm_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}trm_ident']),
      seq_nbr:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}seq_nbr']),
      seq_alt:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}seq_alt']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      nav_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_ident']),
      nav_type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_type']),
      nav_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_ctry']),
      nav_key_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav_key_cd']),
      sec_bear1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}sec_bear1']),
      sec_bear2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}sec_bear2']),
      wpt_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_ident']),
      wpt_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_ctry']),
      sec_mile1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}sec_mile1']),
      sec_mile2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}sec_mile2']),
      wgs_lat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgs_lat']),
      wgs_dlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlat']),
      wgs_lon:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgs_lon']),
      wgs_dlon: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgs_dlon']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      lat: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lat']),
      lon: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}lon']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arpt_ident != null) {
      map['arpt_ident'] = Variable<String>(arpt_ident);
    }
    if (!nullToAbsent || proc != null) {
      map['proc'] = Variable<String>(proc);
    }
    if (!nullToAbsent || trm_ident != null) {
      map['trm_ident'] = Variable<String>(trm_ident);
    }
    if (!nullToAbsent || seq_nbr != null) {
      map['seq_nbr'] = Variable<String>(seq_nbr);
    }
    if (!nullToAbsent || seq_alt != null) {
      map['seq_alt'] = Variable<String>(seq_alt);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || nav_ident != null) {
      map['nav_ident'] = Variable<String>(nav_ident);
    }
    if (!nullToAbsent || nav_type != null) {
      map['nav_type'] = Variable<String>(nav_type);
    }
    if (!nullToAbsent || nav_ctry != null) {
      map['nav_ctry'] = Variable<String>(nav_ctry);
    }
    if (!nullToAbsent || nav_key_cd != null) {
      map['nav_key_cd'] = Variable<String>(nav_key_cd);
    }
    if (!nullToAbsent || sec_bear1 != null) {
      map['sec_bear1'] = Variable<String>(sec_bear1);
    }
    if (!nullToAbsent || sec_bear2 != null) {
      map['sec_bear2'] = Variable<String>(sec_bear2);
    }
    if (!nullToAbsent || wpt_ident != null) {
      map['wpt_ident'] = Variable<String>(wpt_ident);
    }
    if (!nullToAbsent || wpt_ctry != null) {
      map['wpt_ctry'] = Variable<String>(wpt_ctry);
    }
    if (!nullToAbsent || sec_mile1 != null) {
      map['sec_mile1'] = Variable<String>(sec_mile1);
    }
    if (!nullToAbsent || sec_mile2 != null) {
      map['sec_mile2'] = Variable<String>(sec_mile2);
    }
    if (!nullToAbsent || wgs_lat != null) {
      map['wgs_lat'] = Variable<String>(wgs_lat);
    }
    if (!nullToAbsent || wgs_dlat != null) {
      map['wgs_dlat'] = Variable<String>(wgs_dlat);
    }
    if (!nullToAbsent || wgs_lon != null) {
      map['wgs_lon'] = Variable<String>(wgs_lon);
    }
    if (!nullToAbsent || wgs_dlon != null) {
      map['wgs_dlon'] = Variable<String>(wgs_dlon);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    if (!nullToAbsent || lat != null) {
      map['lat'] = Variable<double>(lat);
    }
    if (!nullToAbsent || lon != null) {
      map['lon'] = Variable<double>(lon);
    }
    return map;
  }

  factory dafif_trm_msa.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_trm_msa(
      id: serializer.fromJson<int>(json['id']),
      arpt_ident: serializer.fromJson<String>(json['arpt_ident']),
      proc: serializer.fromJson<String>(json['proc']),
      trm_ident: serializer.fromJson<String>(json['trm_ident']),
      seq_nbr: serializer.fromJson<String>(json['seq_nbr']),
      seq_alt: serializer.fromJson<String>(json['seq_alt']),
      icao: serializer.fromJson<String>(json['icao']),
      nav_ident: serializer.fromJson<String>(json['nav_ident']),
      nav_type: serializer.fromJson<String>(json['nav_type']),
      nav_ctry: serializer.fromJson<String>(json['nav_ctry']),
      nav_key_cd: serializer.fromJson<String>(json['nav_key_cd']),
      sec_bear1: serializer.fromJson<String>(json['sec_bear1']),
      sec_bear2: serializer.fromJson<String>(json['sec_bear2']),
      wpt_ident: serializer.fromJson<String>(json['wpt_ident']),
      wpt_ctry: serializer.fromJson<String>(json['wpt_ctry']),
      sec_mile1: serializer.fromJson<String>(json['sec_mile1']),
      sec_mile2: serializer.fromJson<String>(json['sec_mile2']),
      wgs_lat: serializer.fromJson<String>(json['wgs_lat']),
      wgs_dlat: serializer.fromJson<String>(json['wgs_dlat']),
      wgs_lon: serializer.fromJson<String>(json['wgs_lon']),
      wgs_dlon: serializer.fromJson<String>(json['wgs_dlon']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      crc32: serializer.fromJson<int>(json['crc32']),
      lat: serializer.fromJson<double>(json['lat']),
      lon: serializer.fromJson<double>(json['lon']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arpt_ident': serializer.toJson<String>(arpt_ident),
      'proc': serializer.toJson<String>(proc),
      'trm_ident': serializer.toJson<String>(trm_ident),
      'seq_nbr': serializer.toJson<String>(seq_nbr),
      'seq_alt': serializer.toJson<String>(seq_alt),
      'icao': serializer.toJson<String>(icao),
      'nav_ident': serializer.toJson<String>(nav_ident),
      'nav_type': serializer.toJson<String>(nav_type),
      'nav_ctry': serializer.toJson<String>(nav_ctry),
      'nav_key_cd': serializer.toJson<String>(nav_key_cd),
      'sec_bear1': serializer.toJson<String>(sec_bear1),
      'sec_bear2': serializer.toJson<String>(sec_bear2),
      'wpt_ident': serializer.toJson<String>(wpt_ident),
      'wpt_ctry': serializer.toJson<String>(wpt_ctry),
      'sec_mile1': serializer.toJson<String>(sec_mile1),
      'sec_mile2': serializer.toJson<String>(sec_mile2),
      'wgs_lat': serializer.toJson<String>(wgs_lat),
      'wgs_dlat': serializer.toJson<String>(wgs_dlat),
      'wgs_lon': serializer.toJson<String>(wgs_lon),
      'wgs_dlon': serializer.toJson<String>(wgs_dlon),
      'cycledate': serializer.toJson<String>(cycledate),
      'crc32': serializer.toJson<int>(crc32),
      'lat': serializer.toJson<double>(lat),
      'lon': serializer.toJson<double>(lon),
    };
  }

  dafif_trm_msa copyWith(
          {int id,
          String arpt_ident,
          String proc,
          String trm_ident,
          String seq_nbr,
          String seq_alt,
          String icao,
          String nav_ident,
          String nav_type,
          String nav_ctry,
          String nav_key_cd,
          String sec_bear1,
          String sec_bear2,
          String wpt_ident,
          String wpt_ctry,
          String sec_mile1,
          String sec_mile2,
          String wgs_lat,
          String wgs_dlat,
          String wgs_lon,
          String wgs_dlon,
          String cycledate,
          int crc32,
          double lat,
          double lon}) =>
      dafif_trm_msa(
        id: id ?? this.id,
        arpt_ident: arpt_ident ?? this.arpt_ident,
        proc: proc ?? this.proc,
        trm_ident: trm_ident ?? this.trm_ident,
        seq_nbr: seq_nbr ?? this.seq_nbr,
        seq_alt: seq_alt ?? this.seq_alt,
        icao: icao ?? this.icao,
        nav_ident: nav_ident ?? this.nav_ident,
        nav_type: nav_type ?? this.nav_type,
        nav_ctry: nav_ctry ?? this.nav_ctry,
        nav_key_cd: nav_key_cd ?? this.nav_key_cd,
        sec_bear1: sec_bear1 ?? this.sec_bear1,
        sec_bear2: sec_bear2 ?? this.sec_bear2,
        wpt_ident: wpt_ident ?? this.wpt_ident,
        wpt_ctry: wpt_ctry ?? this.wpt_ctry,
        sec_mile1: sec_mile1 ?? this.sec_mile1,
        sec_mile2: sec_mile2 ?? this.sec_mile2,
        wgs_lat: wgs_lat ?? this.wgs_lat,
        wgs_dlat: wgs_dlat ?? this.wgs_dlat,
        wgs_lon: wgs_lon ?? this.wgs_lon,
        wgs_dlon: wgs_dlon ?? this.wgs_dlon,
        cycledate: cycledate ?? this.cycledate,
        crc32: crc32 ?? this.crc32,
        lat: lat ?? this.lat,
        lon: lon ?? this.lon,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_trm_msa(')
          ..write('id: $id, ')
          ..write('arpt_ident: $arpt_ident, ')
          ..write('proc: $proc, ')
          ..write('trm_ident: $trm_ident, ')
          ..write('seq_nbr: $seq_nbr, ')
          ..write('seq_alt: $seq_alt, ')
          ..write('icao: $icao, ')
          ..write('nav_ident: $nav_ident, ')
          ..write('nav_type: $nav_type, ')
          ..write('nav_ctry: $nav_ctry, ')
          ..write('nav_key_cd: $nav_key_cd, ')
          ..write('sec_bear1: $sec_bear1, ')
          ..write('sec_bear2: $sec_bear2, ')
          ..write('wpt_ident: $wpt_ident, ')
          ..write('wpt_ctry: $wpt_ctry, ')
          ..write('sec_mile1: $sec_mile1, ')
          ..write('sec_mile2: $sec_mile2, ')
          ..write('wgs_lat: $wgs_lat, ')
          ..write('wgs_dlat: $wgs_dlat, ')
          ..write('wgs_lon: $wgs_lon, ')
          ..write('wgs_dlon: $wgs_dlon, ')
          ..write('cycledate: $cycledate, ')
          ..write('crc32: $crc32, ')
          ..write('lat: $lat, ')
          ..write('lon: $lon')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arpt_ident.hashCode,
          $mrjc(
              proc.hashCode,
              $mrjc(
                  trm_ident.hashCode,
                  $mrjc(
                      seq_nbr.hashCode,
                      $mrjc(
                          seq_alt.hashCode,
                          $mrjc(
                              icao.hashCode,
                              $mrjc(
                                  nav_ident.hashCode,
                                  $mrjc(
                                      nav_type.hashCode,
                                      $mrjc(
                                          nav_ctry.hashCode,
                                          $mrjc(
                                              nav_key_cd.hashCode,
                                              $mrjc(
                                                  sec_bear1.hashCode,
                                                  $mrjc(
                                                      sec_bear2.hashCode,
                                                      $mrjc(
                                                          wpt_ident.hashCode,
                                                          $mrjc(
                                                              wpt_ctry.hashCode,
                                                              $mrjc(
                                                                  sec_mile1
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      sec_mile2
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          wgs_lat
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              wgs_dlat.hashCode,
                                                                              $mrjc(wgs_lon.hashCode, $mrjc(wgs_dlon.hashCode, $mrjc(cycledate.hashCode, $mrjc(crc32.hashCode, $mrjc(lat.hashCode, lon.hashCode)))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_trm_msa &&
          other.id == this.id &&
          other.arpt_ident == this.arpt_ident &&
          other.proc == this.proc &&
          other.trm_ident == this.trm_ident &&
          other.seq_nbr == this.seq_nbr &&
          other.seq_alt == this.seq_alt &&
          other.icao == this.icao &&
          other.nav_ident == this.nav_ident &&
          other.nav_type == this.nav_type &&
          other.nav_ctry == this.nav_ctry &&
          other.nav_key_cd == this.nav_key_cd &&
          other.sec_bear1 == this.sec_bear1 &&
          other.sec_bear2 == this.sec_bear2 &&
          other.wpt_ident == this.wpt_ident &&
          other.wpt_ctry == this.wpt_ctry &&
          other.sec_mile1 == this.sec_mile1 &&
          other.sec_mile2 == this.sec_mile2 &&
          other.wgs_lat == this.wgs_lat &&
          other.wgs_dlat == this.wgs_dlat &&
          other.wgs_lon == this.wgs_lon &&
          other.wgs_dlon == this.wgs_dlon &&
          other.cycledate == this.cycledate &&
          other.crc32 == this.crc32 &&
          other.lat == this.lat &&
          other.lon == this.lon);
}

class DafifTrmMsaCompanion extends UpdateCompanion<dafif_trm_msa> {
  final Value<int> id;
  final Value<String> arpt_ident;
  final Value<String> proc;
  final Value<String> trm_ident;
  final Value<String> seq_nbr;
  final Value<String> seq_alt;
  final Value<String> icao;
  final Value<String> nav_ident;
  final Value<String> nav_type;
  final Value<String> nav_ctry;
  final Value<String> nav_key_cd;
  final Value<String> sec_bear1;
  final Value<String> sec_bear2;
  final Value<String> wpt_ident;
  final Value<String> wpt_ctry;
  final Value<String> sec_mile1;
  final Value<String> sec_mile2;
  final Value<String> wgs_lat;
  final Value<String> wgs_dlat;
  final Value<String> wgs_lon;
  final Value<String> wgs_dlon;
  final Value<String> cycledate;
  final Value<int> crc32;
  final Value<double> lat;
  final Value<double> lon;
  const DafifTrmMsaCompanion({
    this.id = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.proc = const Value.absent(),
    this.trm_ident = const Value.absent(),
    this.seq_nbr = const Value.absent(),
    this.seq_alt = const Value.absent(),
    this.icao = const Value.absent(),
    this.nav_ident = const Value.absent(),
    this.nav_type = const Value.absent(),
    this.nav_ctry = const Value.absent(),
    this.nav_key_cd = const Value.absent(),
    this.sec_bear1 = const Value.absent(),
    this.sec_bear2 = const Value.absent(),
    this.wpt_ident = const Value.absent(),
    this.wpt_ctry = const Value.absent(),
    this.sec_mile1 = const Value.absent(),
    this.sec_mile2 = const Value.absent(),
    this.wgs_lat = const Value.absent(),
    this.wgs_dlat = const Value.absent(),
    this.wgs_lon = const Value.absent(),
    this.wgs_dlon = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat = const Value.absent(),
    this.lon = const Value.absent(),
  });
  DafifTrmMsaCompanion.insert({
    this.id = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.proc = const Value.absent(),
    this.trm_ident = const Value.absent(),
    this.seq_nbr = const Value.absent(),
    this.seq_alt = const Value.absent(),
    this.icao = const Value.absent(),
    this.nav_ident = const Value.absent(),
    this.nav_type = const Value.absent(),
    this.nav_ctry = const Value.absent(),
    this.nav_key_cd = const Value.absent(),
    this.sec_bear1 = const Value.absent(),
    this.sec_bear2 = const Value.absent(),
    this.wpt_ident = const Value.absent(),
    this.wpt_ctry = const Value.absent(),
    this.sec_mile1 = const Value.absent(),
    this.sec_mile2 = const Value.absent(),
    this.wgs_lat = const Value.absent(),
    this.wgs_dlat = const Value.absent(),
    this.wgs_lon = const Value.absent(),
    this.wgs_dlon = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.lat = const Value.absent(),
    this.lon = const Value.absent(),
  });
  static Insertable<dafif_trm_msa> custom({
    Expression<int> id,
    Expression<String> arpt_ident,
    Expression<String> proc,
    Expression<String> trm_ident,
    Expression<String> seq_nbr,
    Expression<String> seq_alt,
    Expression<String> icao,
    Expression<String> nav_ident,
    Expression<String> nav_type,
    Expression<String> nav_ctry,
    Expression<String> nav_key_cd,
    Expression<String> sec_bear1,
    Expression<String> sec_bear2,
    Expression<String> wpt_ident,
    Expression<String> wpt_ctry,
    Expression<String> sec_mile1,
    Expression<String> sec_mile2,
    Expression<String> wgs_lat,
    Expression<String> wgs_dlat,
    Expression<String> wgs_lon,
    Expression<String> wgs_dlon,
    Expression<String> cycledate,
    Expression<int> crc32,
    Expression<double> lat,
    Expression<double> lon,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arpt_ident != null) 'arpt_ident': arpt_ident,
      if (proc != null) 'proc': proc,
      if (trm_ident != null) 'trm_ident': trm_ident,
      if (seq_nbr != null) 'seq_nbr': seq_nbr,
      if (seq_alt != null) 'seq_alt': seq_alt,
      if (icao != null) 'icao': icao,
      if (nav_ident != null) 'nav_ident': nav_ident,
      if (nav_type != null) 'nav_type': nav_type,
      if (nav_ctry != null) 'nav_ctry': nav_ctry,
      if (nav_key_cd != null) 'nav_key_cd': nav_key_cd,
      if (sec_bear1 != null) 'sec_bear1': sec_bear1,
      if (sec_bear2 != null) 'sec_bear2': sec_bear2,
      if (wpt_ident != null) 'wpt_ident': wpt_ident,
      if (wpt_ctry != null) 'wpt_ctry': wpt_ctry,
      if (sec_mile1 != null) 'sec_mile1': sec_mile1,
      if (sec_mile2 != null) 'sec_mile2': sec_mile2,
      if (wgs_lat != null) 'wgs_lat': wgs_lat,
      if (wgs_dlat != null) 'wgs_dlat': wgs_dlat,
      if (wgs_lon != null) 'wgs_lon': wgs_lon,
      if (wgs_dlon != null) 'wgs_dlon': wgs_dlon,
      if (cycledate != null) 'cycledate': cycledate,
      if (crc32 != null) 'crc32': crc32,
      if (lat != null) 'lat': lat,
      if (lon != null) 'lon': lon,
    });
  }

  DafifTrmMsaCompanion copyWith(
      {Value<int> id,
      Value<String> arpt_ident,
      Value<String> proc,
      Value<String> trm_ident,
      Value<String> seq_nbr,
      Value<String> seq_alt,
      Value<String> icao,
      Value<String> nav_ident,
      Value<String> nav_type,
      Value<String> nav_ctry,
      Value<String> nav_key_cd,
      Value<String> sec_bear1,
      Value<String> sec_bear2,
      Value<String> wpt_ident,
      Value<String> wpt_ctry,
      Value<String> sec_mile1,
      Value<String> sec_mile2,
      Value<String> wgs_lat,
      Value<String> wgs_dlat,
      Value<String> wgs_lon,
      Value<String> wgs_dlon,
      Value<String> cycledate,
      Value<int> crc32,
      Value<double> lat,
      Value<double> lon}) {
    return DafifTrmMsaCompanion(
      id: id ?? this.id,
      arpt_ident: arpt_ident ?? this.arpt_ident,
      proc: proc ?? this.proc,
      trm_ident: trm_ident ?? this.trm_ident,
      seq_nbr: seq_nbr ?? this.seq_nbr,
      seq_alt: seq_alt ?? this.seq_alt,
      icao: icao ?? this.icao,
      nav_ident: nav_ident ?? this.nav_ident,
      nav_type: nav_type ?? this.nav_type,
      nav_ctry: nav_ctry ?? this.nav_ctry,
      nav_key_cd: nav_key_cd ?? this.nav_key_cd,
      sec_bear1: sec_bear1 ?? this.sec_bear1,
      sec_bear2: sec_bear2 ?? this.sec_bear2,
      wpt_ident: wpt_ident ?? this.wpt_ident,
      wpt_ctry: wpt_ctry ?? this.wpt_ctry,
      sec_mile1: sec_mile1 ?? this.sec_mile1,
      sec_mile2: sec_mile2 ?? this.sec_mile2,
      wgs_lat: wgs_lat ?? this.wgs_lat,
      wgs_dlat: wgs_dlat ?? this.wgs_dlat,
      wgs_lon: wgs_lon ?? this.wgs_lon,
      wgs_dlon: wgs_dlon ?? this.wgs_dlon,
      cycledate: cycledate ?? this.cycledate,
      crc32: crc32 ?? this.crc32,
      lat: lat ?? this.lat,
      lon: lon ?? this.lon,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arpt_ident.present) {
      map['arpt_ident'] = Variable<String>(arpt_ident.value);
    }
    if (proc.present) {
      map['proc'] = Variable<String>(proc.value);
    }
    if (trm_ident.present) {
      map['trm_ident'] = Variable<String>(trm_ident.value);
    }
    if (seq_nbr.present) {
      map['seq_nbr'] = Variable<String>(seq_nbr.value);
    }
    if (seq_alt.present) {
      map['seq_alt'] = Variable<String>(seq_alt.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (nav_ident.present) {
      map['nav_ident'] = Variable<String>(nav_ident.value);
    }
    if (nav_type.present) {
      map['nav_type'] = Variable<String>(nav_type.value);
    }
    if (nav_ctry.present) {
      map['nav_ctry'] = Variable<String>(nav_ctry.value);
    }
    if (nav_key_cd.present) {
      map['nav_key_cd'] = Variable<String>(nav_key_cd.value);
    }
    if (sec_bear1.present) {
      map['sec_bear1'] = Variable<String>(sec_bear1.value);
    }
    if (sec_bear2.present) {
      map['sec_bear2'] = Variable<String>(sec_bear2.value);
    }
    if (wpt_ident.present) {
      map['wpt_ident'] = Variable<String>(wpt_ident.value);
    }
    if (wpt_ctry.present) {
      map['wpt_ctry'] = Variable<String>(wpt_ctry.value);
    }
    if (sec_mile1.present) {
      map['sec_mile1'] = Variable<String>(sec_mile1.value);
    }
    if (sec_mile2.present) {
      map['sec_mile2'] = Variable<String>(sec_mile2.value);
    }
    if (wgs_lat.present) {
      map['wgs_lat'] = Variable<String>(wgs_lat.value);
    }
    if (wgs_dlat.present) {
      map['wgs_dlat'] = Variable<String>(wgs_dlat.value);
    }
    if (wgs_lon.present) {
      map['wgs_lon'] = Variable<String>(wgs_lon.value);
    }
    if (wgs_dlon.present) {
      map['wgs_dlon'] = Variable<String>(wgs_dlon.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    if (lat.present) {
      map['lat'] = Variable<double>(lat.value);
    }
    if (lon.present) {
      map['lon'] = Variable<double>(lon.value);
    }
    return map;
  }
}

class $DafifTrmMsaTable extends DafifTrmMsa
    with TableInfo<$DafifTrmMsaTable, dafif_trm_msa> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifTrmMsaTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arpt_identMeta = const VerificationMeta('arpt_ident');
  GeneratedTextColumn _arpt_ident;
  @override
  GeneratedTextColumn get arpt_ident => _arpt_ident ??= _constructArptIdent();
  GeneratedTextColumn _constructArptIdent() {
    return GeneratedTextColumn(
      'arpt_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _procMeta = const VerificationMeta('proc');
  GeneratedTextColumn _proc;
  @override
  GeneratedTextColumn get proc => _proc ??= _constructProc();
  GeneratedTextColumn _constructProc() {
    return GeneratedTextColumn(
      'proc',
      $tableName,
      true,
    );
  }

  final VerificationMeta _trm_identMeta = const VerificationMeta('trm_ident');
  GeneratedTextColumn _trm_ident;
  @override
  GeneratedTextColumn get trm_ident => _trm_ident ??= _constructTrmIdent();
  GeneratedTextColumn _constructTrmIdent() {
    return GeneratedTextColumn(
      'trm_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _seq_nbrMeta = const VerificationMeta('seq_nbr');
  GeneratedTextColumn _seq_nbr;
  @override
  GeneratedTextColumn get seq_nbr => _seq_nbr ??= _constructSeqNbr();
  GeneratedTextColumn _constructSeqNbr() {
    return GeneratedTextColumn(
      'seq_nbr',
      $tableName,
      true,
    );
  }

  final VerificationMeta _seq_altMeta = const VerificationMeta('seq_alt');
  GeneratedTextColumn _seq_alt;
  @override
  GeneratedTextColumn get seq_alt => _seq_alt ??= _constructSeqAlt();
  GeneratedTextColumn _constructSeqAlt() {
    return GeneratedTextColumn(
      'seq_alt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_identMeta = const VerificationMeta('nav_ident');
  GeneratedTextColumn _nav_ident;
  @override
  GeneratedTextColumn get nav_ident => _nav_ident ??= _constructNavIdent();
  GeneratedTextColumn _constructNavIdent() {
    return GeneratedTextColumn(
      'nav_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_typeMeta = const VerificationMeta('nav_type');
  GeneratedTextColumn _nav_type;
  @override
  GeneratedTextColumn get nav_type => _nav_type ??= _constructNavType();
  GeneratedTextColumn _constructNavType() {
    return GeneratedTextColumn(
      'nav_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_ctryMeta = const VerificationMeta('nav_ctry');
  GeneratedTextColumn _nav_ctry;
  @override
  GeneratedTextColumn get nav_ctry => _nav_ctry ??= _constructNavCtry();
  GeneratedTextColumn _constructNavCtry() {
    return GeneratedTextColumn(
      'nav_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav_key_cdMeta = const VerificationMeta('nav_key_cd');
  GeneratedTextColumn _nav_key_cd;
  @override
  GeneratedTextColumn get nav_key_cd => _nav_key_cd ??= _constructNavKeyCd();
  GeneratedTextColumn _constructNavKeyCd() {
    return GeneratedTextColumn(
      'nav_key_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sec_bear1Meta = const VerificationMeta('sec_bear1');
  GeneratedTextColumn _sec_bear1;
  @override
  GeneratedTextColumn get sec_bear1 => _sec_bear1 ??= _constructSecBear1();
  GeneratedTextColumn _constructSecBear1() {
    return GeneratedTextColumn(
      'sec_bear1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sec_bear2Meta = const VerificationMeta('sec_bear2');
  GeneratedTextColumn _sec_bear2;
  @override
  GeneratedTextColumn get sec_bear2 => _sec_bear2 ??= _constructSecBear2();
  GeneratedTextColumn _constructSecBear2() {
    return GeneratedTextColumn(
      'sec_bear2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_identMeta = const VerificationMeta('wpt_ident');
  GeneratedTextColumn _wpt_ident;
  @override
  GeneratedTextColumn get wpt_ident => _wpt_ident ??= _constructWptIdent();
  GeneratedTextColumn _constructWptIdent() {
    return GeneratedTextColumn(
      'wpt_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_ctryMeta = const VerificationMeta('wpt_ctry');
  GeneratedTextColumn _wpt_ctry;
  @override
  GeneratedTextColumn get wpt_ctry => _wpt_ctry ??= _constructWptCtry();
  GeneratedTextColumn _constructWptCtry() {
    return GeneratedTextColumn(
      'wpt_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sec_mile1Meta = const VerificationMeta('sec_mile1');
  GeneratedTextColumn _sec_mile1;
  @override
  GeneratedTextColumn get sec_mile1 => _sec_mile1 ??= _constructSecMile1();
  GeneratedTextColumn _constructSecMile1() {
    return GeneratedTextColumn(
      'sec_mile1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sec_mile2Meta = const VerificationMeta('sec_mile2');
  GeneratedTextColumn _sec_mile2;
  @override
  GeneratedTextColumn get sec_mile2 => _sec_mile2 ??= _constructSecMile2();
  GeneratedTextColumn _constructSecMile2() {
    return GeneratedTextColumn(
      'sec_mile2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_latMeta = const VerificationMeta('wgs_lat');
  GeneratedTextColumn _wgs_lat;
  @override
  GeneratedTextColumn get wgs_lat => _wgs_lat ??= _constructWgsLat();
  GeneratedTextColumn _constructWgsLat() {
    return GeneratedTextColumn(
      'wgs_lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlatMeta = const VerificationMeta('wgs_dlat');
  GeneratedTextColumn _wgs_dlat;
  @override
  GeneratedTextColumn get wgs_dlat => _wgs_dlat ??= _constructWgsDlat();
  GeneratedTextColumn _constructWgsDlat() {
    return GeneratedTextColumn(
      'wgs_dlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_lonMeta = const VerificationMeta('wgs_lon');
  GeneratedTextColumn _wgs_lon;
  @override
  GeneratedTextColumn get wgs_lon => _wgs_lon ??= _constructWgsLon();
  GeneratedTextColumn _constructWgsLon() {
    return GeneratedTextColumn(
      'wgs_lon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgs_dlonMeta = const VerificationMeta('wgs_dlon');
  GeneratedTextColumn _wgs_dlon;
  @override
  GeneratedTextColumn get wgs_dlon => _wgs_dlon ??= _constructWgsDlon();
  GeneratedTextColumn _constructWgsDlon() {
    return GeneratedTextColumn(
      'wgs_dlon',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _latMeta = const VerificationMeta('lat');
  GeneratedRealColumn _lat;
  @override
  GeneratedRealColumn get lat => _lat ??= _constructLat();
  GeneratedRealColumn _constructLat() {
    return GeneratedRealColumn(
      'lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lonMeta = const VerificationMeta('lon');
  GeneratedRealColumn _lon;
  @override
  GeneratedRealColumn get lon => _lon ??= _constructLon();
  GeneratedRealColumn _constructLon() {
    return GeneratedRealColumn(
      'lon',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arpt_ident,
        proc,
        trm_ident,
        seq_nbr,
        seq_alt,
        icao,
        nav_ident,
        nav_type,
        nav_ctry,
        nav_key_cd,
        sec_bear1,
        sec_bear2,
        wpt_ident,
        wpt_ctry,
        sec_mile1,
        sec_mile2,
        wgs_lat,
        wgs_dlat,
        wgs_lon,
        wgs_dlon,
        cycledate,
        crc32,
        lat,
        lon
      ];
  @override
  $DafifTrmMsaTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_trm_msa';
  @override
  final String actualTableName = 'dafif_trm_msa';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_trm_msa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arpt_ident')) {
      context.handle(
          _arpt_identMeta,
          arpt_ident.isAcceptableOrUnknown(
              data['arpt_ident'], _arpt_identMeta));
    }
    if (data.containsKey('proc')) {
      context.handle(
          _procMeta, proc.isAcceptableOrUnknown(data['proc'], _procMeta));
    }
    if (data.containsKey('trm_ident')) {
      context.handle(_trm_identMeta,
          trm_ident.isAcceptableOrUnknown(data['trm_ident'], _trm_identMeta));
    }
    if (data.containsKey('seq_nbr')) {
      context.handle(_seq_nbrMeta,
          seq_nbr.isAcceptableOrUnknown(data['seq_nbr'], _seq_nbrMeta));
    }
    if (data.containsKey('seq_alt')) {
      context.handle(_seq_altMeta,
          seq_alt.isAcceptableOrUnknown(data['seq_alt'], _seq_altMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('nav_ident')) {
      context.handle(_nav_identMeta,
          nav_ident.isAcceptableOrUnknown(data['nav_ident'], _nav_identMeta));
    }
    if (data.containsKey('nav_type')) {
      context.handle(_nav_typeMeta,
          nav_type.isAcceptableOrUnknown(data['nav_type'], _nav_typeMeta));
    }
    if (data.containsKey('nav_ctry')) {
      context.handle(_nav_ctryMeta,
          nav_ctry.isAcceptableOrUnknown(data['nav_ctry'], _nav_ctryMeta));
    }
    if (data.containsKey('nav_key_cd')) {
      context.handle(
          _nav_key_cdMeta,
          nav_key_cd.isAcceptableOrUnknown(
              data['nav_key_cd'], _nav_key_cdMeta));
    }
    if (data.containsKey('sec_bear1')) {
      context.handle(_sec_bear1Meta,
          sec_bear1.isAcceptableOrUnknown(data['sec_bear1'], _sec_bear1Meta));
    }
    if (data.containsKey('sec_bear2')) {
      context.handle(_sec_bear2Meta,
          sec_bear2.isAcceptableOrUnknown(data['sec_bear2'], _sec_bear2Meta));
    }
    if (data.containsKey('wpt_ident')) {
      context.handle(_wpt_identMeta,
          wpt_ident.isAcceptableOrUnknown(data['wpt_ident'], _wpt_identMeta));
    }
    if (data.containsKey('wpt_ctry')) {
      context.handle(_wpt_ctryMeta,
          wpt_ctry.isAcceptableOrUnknown(data['wpt_ctry'], _wpt_ctryMeta));
    }
    if (data.containsKey('sec_mile1')) {
      context.handle(_sec_mile1Meta,
          sec_mile1.isAcceptableOrUnknown(data['sec_mile1'], _sec_mile1Meta));
    }
    if (data.containsKey('sec_mile2')) {
      context.handle(_sec_mile2Meta,
          sec_mile2.isAcceptableOrUnknown(data['sec_mile2'], _sec_mile2Meta));
    }
    if (data.containsKey('wgs_lat')) {
      context.handle(_wgs_latMeta,
          wgs_lat.isAcceptableOrUnknown(data['wgs_lat'], _wgs_latMeta));
    }
    if (data.containsKey('wgs_dlat')) {
      context.handle(_wgs_dlatMeta,
          wgs_dlat.isAcceptableOrUnknown(data['wgs_dlat'], _wgs_dlatMeta));
    }
    if (data.containsKey('wgs_lon')) {
      context.handle(_wgs_lonMeta,
          wgs_lon.isAcceptableOrUnknown(data['wgs_lon'], _wgs_lonMeta));
    }
    if (data.containsKey('wgs_dlon')) {
      context.handle(_wgs_dlonMeta,
          wgs_dlon.isAcceptableOrUnknown(data['wgs_dlon'], _wgs_dlonMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('lat')) {
      context.handle(
          _latMeta, lat.isAcceptableOrUnknown(data['lat'], _latMeta));
    }
    if (data.containsKey('lon')) {
      context.handle(
          _lonMeta, lon.isAcceptableOrUnknown(data['lon'], _lonMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_trm_msa map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_trm_msa.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifTrmMsaTable createAlias(String alias) {
    return $DafifTrmMsaTable(_db, alias);
  }
}

class dafif_trm_seg extends DataClass implements Insertable<dafif_trm_seg> {
  final int id;
  final String arpt_ident;
  final String proc;
  final String trm_ident;
  final String seq_nbr;
  final String type;
  final String transition;
  final String icao;
  final String track_cd;
  final String wpt_id;
  final String wpt_ctry;
  final String wpt_desc1;
  final String wpt_desc2;
  final String wpt_desc3;
  final String wpt_desc4;
  final String turn_dir;
  final String nav1_ident;
  final String nav1_type;
  final String nav1_ctry;
  final String nav1_key_cd;
  final String nav1_bear;
  final String nav1_dist;
  final String nav2_ident;
  final String nav2_type;
  final String nav2_ctry;
  final String nav2_key_cd;
  final String nav2_bear;
  final String nav2_dist;
  final String mag_crs;
  final String distance;
  final String alt_desc;
  final String alt_one;
  final String alt_two;
  final String rnp;
  final String cycle_date;
  final String wpt_wgs_lat;
  final String wpt_wgs_dlat;
  final String wpt_wgs_long;
  final String wpt_wgs_dlong;
  final String wpt_mvar;
  final String nav1_wgs_lat;
  final String nav1_wgs_dlat;
  final String nav1_wgs_long;
  final String nav1_wgs_dlong;
  final String nav1_mvar;
  final String nav1_dme_wgs_lat;
  final String nav1_dme_wgs_dlat;
  final String nav1_dme_wgs_long;
  final String nav1_dme_wgs_dlong;
  final String nav2_wgs_lat;
  final String nav2_wgs_dlat;
  final String nav2_wgs_long;
  final String nav2_wgs_dlong;
  final String nav2_mvar;
  final String nav2_dime_wgs_lat;
  final String nav2_dime_wgs_dlat;
  final String nav2_dime_wgs_long;
  final String nav2_dime_wgs_dlong;
  final String speed;
  final String speed_ac;
  final String speed_alt;
  final String speed_2;
  final String speed_alt_2;
  final String speed_ac_2;
  final String vnav;
  final String tch;
  dafif_trm_seg(
      {@required this.id,
      this.arpt_ident,
      this.proc,
      this.trm_ident,
      this.seq_nbr,
      this.type,
      this.transition,
      this.icao,
      this.track_cd,
      this.wpt_id,
      this.wpt_ctry,
      this.wpt_desc1,
      this.wpt_desc2,
      this.wpt_desc3,
      this.wpt_desc4,
      this.turn_dir,
      this.nav1_ident,
      this.nav1_type,
      this.nav1_ctry,
      this.nav1_key_cd,
      this.nav1_bear,
      this.nav1_dist,
      this.nav2_ident,
      this.nav2_type,
      this.nav2_ctry,
      this.nav2_key_cd,
      this.nav2_bear,
      this.nav2_dist,
      this.mag_crs,
      this.distance,
      this.alt_desc,
      this.alt_one,
      this.alt_two,
      this.rnp,
      this.cycle_date,
      this.wpt_wgs_lat,
      this.wpt_wgs_dlat,
      this.wpt_wgs_long,
      this.wpt_wgs_dlong,
      this.wpt_mvar,
      this.nav1_wgs_lat,
      this.nav1_wgs_dlat,
      this.nav1_wgs_long,
      this.nav1_wgs_dlong,
      this.nav1_mvar,
      this.nav1_dme_wgs_lat,
      this.nav1_dme_wgs_dlat,
      this.nav1_dme_wgs_long,
      this.nav1_dme_wgs_dlong,
      this.nav2_wgs_lat,
      this.nav2_wgs_dlat,
      this.nav2_wgs_long,
      this.nav2_wgs_dlong,
      this.nav2_mvar,
      this.nav2_dime_wgs_lat,
      this.nav2_dime_wgs_dlat,
      this.nav2_dime_wgs_long,
      this.nav2_dime_wgs_dlong,
      this.speed,
      this.speed_ac,
      this.speed_alt,
      this.speed_2,
      this.speed_alt_2,
      this.speed_ac_2,
      this.vnav,
      this.tch});
  factory dafif_trm_seg.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_trm_seg(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      arpt_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}arpt_ident']),
      proc: stringType.mapFromDatabaseResponse(data['${effectivePrefix}proc']),
      trm_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}trm_ident']),
      seq_nbr:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}seq_nbr']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      transition: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}transition']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      track_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}track_cd']),
      wpt_id:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wpt_id']),
      wpt_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_ctry']),
      wpt_desc1: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_desc1']),
      wpt_desc2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_desc2']),
      wpt_desc3: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_desc3']),
      wpt_desc4: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_desc4']),
      turn_dir: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}turn_dir']),
      nav1_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_ident']),
      nav1_type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_type']),
      nav1_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_ctry']),
      nav1_key_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_key_cd']),
      nav1_bear: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_bear']),
      nav1_dist: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_dist']),
      nav2_ident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_ident']),
      nav2_type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_type']),
      nav2_ctry: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_ctry']),
      nav2_key_cd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_key_cd']),
      nav2_bear: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_bear']),
      nav2_dist: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_dist']),
      mag_crs:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}mag_crs']),
      distance: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}distance']),
      alt_desc: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}alt_desc']),
      alt_one:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}alt_one']),
      alt_two:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}alt_two']),
      rnp: stringType.mapFromDatabaseResponse(data['${effectivePrefix}rnp']),
      cycle_date: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycle_date']),
      wpt_wgs_lat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_wgs_lat']),
      wpt_wgs_dlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_wgs_dlat']),
      wpt_wgs_long: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_wgs_long']),
      wpt_wgs_dlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_wgs_dlong']),
      wpt_mvar: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wpt_mvar']),
      nav1_wgs_lat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_wgs_lat']),
      nav1_wgs_dlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_wgs_dlat']),
      nav1_wgs_long: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_wgs_long']),
      nav1_wgs_dlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_wgs_dlong']),
      nav1_mvar: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_mvar']),
      nav1_dme_wgs_lat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_dme_wgs_lat']),
      nav1_dme_wgs_dlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_dme_wgs_dlat']),
      nav1_dme_wgs_long: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav1_dme_wgs_long']),
      nav1_dme_wgs_dlong: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}nav1_dme_wgs_dlong']),
      nav2_wgs_lat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_wgs_lat']),
      nav2_wgs_dlat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_wgs_dlat']),
      nav2_wgs_long: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_wgs_long']),
      nav2_wgs_dlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_wgs_dlong']),
      nav2_mvar: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_mvar']),
      nav2_dime_wgs_lat: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nav2_dime_wgs_lat']),
      nav2_dime_wgs_dlat: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}nav2_dime_wgs_dlat']),
      nav2_dime_wgs_long: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}nav2_dime_wgs_long']),
      nav2_dime_wgs_dlong: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}nav2_dime_wgs_dlong']),
      speed:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}speed']),
      speed_ac: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}speed_ac']),
      speed_alt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}speed_alt']),
      speed_2:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}speed_2']),
      speed_alt_2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}speed_alt_2']),
      speed_ac_2: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}speed_ac_2']),
      vnav: stringType.mapFromDatabaseResponse(data['${effectivePrefix}vnav']),
      tch: stringType.mapFromDatabaseResponse(data['${effectivePrefix}tch']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || arpt_ident != null) {
      map['arpt_ident'] = Variable<String>(arpt_ident);
    }
    if (!nullToAbsent || proc != null) {
      map['proc'] = Variable<String>(proc);
    }
    if (!nullToAbsent || trm_ident != null) {
      map['trm_ident'] = Variable<String>(trm_ident);
    }
    if (!nullToAbsent || seq_nbr != null) {
      map['seq_nbr'] = Variable<String>(seq_nbr);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || transition != null) {
      map['transition'] = Variable<String>(transition);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || track_cd != null) {
      map['track_cd'] = Variable<String>(track_cd);
    }
    if (!nullToAbsent || wpt_id != null) {
      map['wpt_id'] = Variable<String>(wpt_id);
    }
    if (!nullToAbsent || wpt_ctry != null) {
      map['wpt_ctry'] = Variable<String>(wpt_ctry);
    }
    if (!nullToAbsent || wpt_desc1 != null) {
      map['wpt_desc1'] = Variable<String>(wpt_desc1);
    }
    if (!nullToAbsent || wpt_desc2 != null) {
      map['wpt_desc2'] = Variable<String>(wpt_desc2);
    }
    if (!nullToAbsent || wpt_desc3 != null) {
      map['wpt_desc3'] = Variable<String>(wpt_desc3);
    }
    if (!nullToAbsent || wpt_desc4 != null) {
      map['wpt_desc4'] = Variable<String>(wpt_desc4);
    }
    if (!nullToAbsent || turn_dir != null) {
      map['turn_dir'] = Variable<String>(turn_dir);
    }
    if (!nullToAbsent || nav1_ident != null) {
      map['nav1_ident'] = Variable<String>(nav1_ident);
    }
    if (!nullToAbsent || nav1_type != null) {
      map['nav1_type'] = Variable<String>(nav1_type);
    }
    if (!nullToAbsent || nav1_ctry != null) {
      map['nav1_ctry'] = Variable<String>(nav1_ctry);
    }
    if (!nullToAbsent || nav1_key_cd != null) {
      map['nav1_key_cd'] = Variable<String>(nav1_key_cd);
    }
    if (!nullToAbsent || nav1_bear != null) {
      map['nav1_bear'] = Variable<String>(nav1_bear);
    }
    if (!nullToAbsent || nav1_dist != null) {
      map['nav1_dist'] = Variable<String>(nav1_dist);
    }
    if (!nullToAbsent || nav2_ident != null) {
      map['nav2_ident'] = Variable<String>(nav2_ident);
    }
    if (!nullToAbsent || nav2_type != null) {
      map['nav2_type'] = Variable<String>(nav2_type);
    }
    if (!nullToAbsent || nav2_ctry != null) {
      map['nav2_ctry'] = Variable<String>(nav2_ctry);
    }
    if (!nullToAbsent || nav2_key_cd != null) {
      map['nav2_key_cd'] = Variable<String>(nav2_key_cd);
    }
    if (!nullToAbsent || nav2_bear != null) {
      map['nav2_bear'] = Variable<String>(nav2_bear);
    }
    if (!nullToAbsent || nav2_dist != null) {
      map['nav2_dist'] = Variable<String>(nav2_dist);
    }
    if (!nullToAbsent || mag_crs != null) {
      map['mag_crs'] = Variable<String>(mag_crs);
    }
    if (!nullToAbsent || distance != null) {
      map['distance'] = Variable<String>(distance);
    }
    if (!nullToAbsent || alt_desc != null) {
      map['alt_desc'] = Variable<String>(alt_desc);
    }
    if (!nullToAbsent || alt_one != null) {
      map['alt_one'] = Variable<String>(alt_one);
    }
    if (!nullToAbsent || alt_two != null) {
      map['alt_two'] = Variable<String>(alt_two);
    }
    if (!nullToAbsent || rnp != null) {
      map['rnp'] = Variable<String>(rnp);
    }
    if (!nullToAbsent || cycle_date != null) {
      map['cycle_date'] = Variable<String>(cycle_date);
    }
    if (!nullToAbsent || wpt_wgs_lat != null) {
      map['wpt_wgs_lat'] = Variable<String>(wpt_wgs_lat);
    }
    if (!nullToAbsent || wpt_wgs_dlat != null) {
      map['wpt_wgs_dlat'] = Variable<String>(wpt_wgs_dlat);
    }
    if (!nullToAbsent || wpt_wgs_long != null) {
      map['wpt_wgs_long'] = Variable<String>(wpt_wgs_long);
    }
    if (!nullToAbsent || wpt_wgs_dlong != null) {
      map['wpt_wgs_dlong'] = Variable<String>(wpt_wgs_dlong);
    }
    if (!nullToAbsent || wpt_mvar != null) {
      map['wpt_mvar'] = Variable<String>(wpt_mvar);
    }
    if (!nullToAbsent || nav1_wgs_lat != null) {
      map['nav1_wgs_lat'] = Variable<String>(nav1_wgs_lat);
    }
    if (!nullToAbsent || nav1_wgs_dlat != null) {
      map['nav1_wgs_dlat'] = Variable<String>(nav1_wgs_dlat);
    }
    if (!nullToAbsent || nav1_wgs_long != null) {
      map['nav1_wgs_long'] = Variable<String>(nav1_wgs_long);
    }
    if (!nullToAbsent || nav1_wgs_dlong != null) {
      map['nav1_wgs_dlong'] = Variable<String>(nav1_wgs_dlong);
    }
    if (!nullToAbsent || nav1_mvar != null) {
      map['nav1_mvar'] = Variable<String>(nav1_mvar);
    }
    if (!nullToAbsent || nav1_dme_wgs_lat != null) {
      map['nav1_dme_wgs_lat'] = Variable<String>(nav1_dme_wgs_lat);
    }
    if (!nullToAbsent || nav1_dme_wgs_dlat != null) {
      map['nav1_dme_wgs_dlat'] = Variable<String>(nav1_dme_wgs_dlat);
    }
    if (!nullToAbsent || nav1_dme_wgs_long != null) {
      map['nav1_dme_wgs_long'] = Variable<String>(nav1_dme_wgs_long);
    }
    if (!nullToAbsent || nav1_dme_wgs_dlong != null) {
      map['nav1_dme_wgs_dlong'] = Variable<String>(nav1_dme_wgs_dlong);
    }
    if (!nullToAbsent || nav2_wgs_lat != null) {
      map['nav2_wgs_lat'] = Variable<String>(nav2_wgs_lat);
    }
    if (!nullToAbsent || nav2_wgs_dlat != null) {
      map['nav2_wgs_dlat'] = Variable<String>(nav2_wgs_dlat);
    }
    if (!nullToAbsent || nav2_wgs_long != null) {
      map['nav2_wgs_long'] = Variable<String>(nav2_wgs_long);
    }
    if (!nullToAbsent || nav2_wgs_dlong != null) {
      map['nav2_wgs_dlong'] = Variable<String>(nav2_wgs_dlong);
    }
    if (!nullToAbsent || nav2_mvar != null) {
      map['nav2_mvar'] = Variable<String>(nav2_mvar);
    }
    if (!nullToAbsent || nav2_dime_wgs_lat != null) {
      map['nav2_dime_wgs_lat'] = Variable<String>(nav2_dime_wgs_lat);
    }
    if (!nullToAbsent || nav2_dime_wgs_dlat != null) {
      map['nav2_dime_wgs_dlat'] = Variable<String>(nav2_dime_wgs_dlat);
    }
    if (!nullToAbsent || nav2_dime_wgs_long != null) {
      map['nav2_dime_wgs_long'] = Variable<String>(nav2_dime_wgs_long);
    }
    if (!nullToAbsent || nav2_dime_wgs_dlong != null) {
      map['nav2_dime_wgs_dlong'] = Variable<String>(nav2_dime_wgs_dlong);
    }
    if (!nullToAbsent || speed != null) {
      map['speed'] = Variable<String>(speed);
    }
    if (!nullToAbsent || speed_ac != null) {
      map['speed_ac'] = Variable<String>(speed_ac);
    }
    if (!nullToAbsent || speed_alt != null) {
      map['speed_alt'] = Variable<String>(speed_alt);
    }
    if (!nullToAbsent || speed_2 != null) {
      map['speed_2'] = Variable<String>(speed_2);
    }
    if (!nullToAbsent || speed_alt_2 != null) {
      map['speed_alt_2'] = Variable<String>(speed_alt_2);
    }
    if (!nullToAbsent || speed_ac_2 != null) {
      map['speed_ac_2'] = Variable<String>(speed_ac_2);
    }
    if (!nullToAbsent || vnav != null) {
      map['vnav'] = Variable<String>(vnav);
    }
    if (!nullToAbsent || tch != null) {
      map['tch'] = Variable<String>(tch);
    }
    return map;
  }

  factory dafif_trm_seg.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_trm_seg(
      id: serializer.fromJson<int>(json['id']),
      arpt_ident: serializer.fromJson<String>(json['arpt_ident']),
      proc: serializer.fromJson<String>(json['proc']),
      trm_ident: serializer.fromJson<String>(json['trm_ident']),
      seq_nbr: serializer.fromJson<String>(json['seq_nbr']),
      type: serializer.fromJson<String>(json['type']),
      transition: serializer.fromJson<String>(json['transition']),
      icao: serializer.fromJson<String>(json['icao']),
      track_cd: serializer.fromJson<String>(json['track_cd']),
      wpt_id: serializer.fromJson<String>(json['wpt_id']),
      wpt_ctry: serializer.fromJson<String>(json['wpt_ctry']),
      wpt_desc1: serializer.fromJson<String>(json['wpt_desc1']),
      wpt_desc2: serializer.fromJson<String>(json['wpt_desc2']),
      wpt_desc3: serializer.fromJson<String>(json['wpt_desc3']),
      wpt_desc4: serializer.fromJson<String>(json['wpt_desc4']),
      turn_dir: serializer.fromJson<String>(json['turn_dir']),
      nav1_ident: serializer.fromJson<String>(json['nav1_ident']),
      nav1_type: serializer.fromJson<String>(json['nav1_type']),
      nav1_ctry: serializer.fromJson<String>(json['nav1_ctry']),
      nav1_key_cd: serializer.fromJson<String>(json['nav1_key_cd']),
      nav1_bear: serializer.fromJson<String>(json['nav1_bear']),
      nav1_dist: serializer.fromJson<String>(json['nav1_dist']),
      nav2_ident: serializer.fromJson<String>(json['nav2_ident']),
      nav2_type: serializer.fromJson<String>(json['nav2_type']),
      nav2_ctry: serializer.fromJson<String>(json['nav2_ctry']),
      nav2_key_cd: serializer.fromJson<String>(json['nav2_key_cd']),
      nav2_bear: serializer.fromJson<String>(json['nav2_bear']),
      nav2_dist: serializer.fromJson<String>(json['nav2_dist']),
      mag_crs: serializer.fromJson<String>(json['mag_crs']),
      distance: serializer.fromJson<String>(json['distance']),
      alt_desc: serializer.fromJson<String>(json['alt_desc']),
      alt_one: serializer.fromJson<String>(json['alt_one']),
      alt_two: serializer.fromJson<String>(json['alt_two']),
      rnp: serializer.fromJson<String>(json['rnp']),
      cycle_date: serializer.fromJson<String>(json['cycle_date']),
      wpt_wgs_lat: serializer.fromJson<String>(json['wpt_wgs_lat']),
      wpt_wgs_dlat: serializer.fromJson<String>(json['wpt_wgs_dlat']),
      wpt_wgs_long: serializer.fromJson<String>(json['wpt_wgs_long']),
      wpt_wgs_dlong: serializer.fromJson<String>(json['wpt_wgs_dlong']),
      wpt_mvar: serializer.fromJson<String>(json['wpt_mvar']),
      nav1_wgs_lat: serializer.fromJson<String>(json['nav1_wgs_lat']),
      nav1_wgs_dlat: serializer.fromJson<String>(json['nav1_wgs_dlat']),
      nav1_wgs_long: serializer.fromJson<String>(json['nav1_wgs_long']),
      nav1_wgs_dlong: serializer.fromJson<String>(json['nav1_wgs_dlong']),
      nav1_mvar: serializer.fromJson<String>(json['nav1_mvar']),
      nav1_dme_wgs_lat: serializer.fromJson<String>(json['nav1_dme_wgs_lat']),
      nav1_dme_wgs_dlat: serializer.fromJson<String>(json['nav1_dme_wgs_dlat']),
      nav1_dme_wgs_long: serializer.fromJson<String>(json['nav1_dme_wgs_long']),
      nav1_dme_wgs_dlong:
          serializer.fromJson<String>(json['nav1_dme_wgs_dlong']),
      nav2_wgs_lat: serializer.fromJson<String>(json['nav2_wgs_lat']),
      nav2_wgs_dlat: serializer.fromJson<String>(json['nav2_wgs_dlat']),
      nav2_wgs_long: serializer.fromJson<String>(json['nav2_wgs_long']),
      nav2_wgs_dlong: serializer.fromJson<String>(json['nav2_wgs_dlong']),
      nav2_mvar: serializer.fromJson<String>(json['nav2_mvar']),
      nav2_dime_wgs_lat: serializer.fromJson<String>(json['nav2_dime_wgs_lat']),
      nav2_dime_wgs_dlat:
          serializer.fromJson<String>(json['nav2_dime_wgs_dlat']),
      nav2_dime_wgs_long:
          serializer.fromJson<String>(json['nav2_dime_wgs_long']),
      nav2_dime_wgs_dlong:
          serializer.fromJson<String>(json['nav2_dime_wgs_dlong']),
      speed: serializer.fromJson<String>(json['speed']),
      speed_ac: serializer.fromJson<String>(json['speed_ac']),
      speed_alt: serializer.fromJson<String>(json['speed_alt']),
      speed_2: serializer.fromJson<String>(json['speed_2']),
      speed_alt_2: serializer.fromJson<String>(json['speed_alt_2']),
      speed_ac_2: serializer.fromJson<String>(json['speed_ac_2']),
      vnav: serializer.fromJson<String>(json['vnav']),
      tch: serializer.fromJson<String>(json['tch']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'arpt_ident': serializer.toJson<String>(arpt_ident),
      'proc': serializer.toJson<String>(proc),
      'trm_ident': serializer.toJson<String>(trm_ident),
      'seq_nbr': serializer.toJson<String>(seq_nbr),
      'type': serializer.toJson<String>(type),
      'transition': serializer.toJson<String>(transition),
      'icao': serializer.toJson<String>(icao),
      'track_cd': serializer.toJson<String>(track_cd),
      'wpt_id': serializer.toJson<String>(wpt_id),
      'wpt_ctry': serializer.toJson<String>(wpt_ctry),
      'wpt_desc1': serializer.toJson<String>(wpt_desc1),
      'wpt_desc2': serializer.toJson<String>(wpt_desc2),
      'wpt_desc3': serializer.toJson<String>(wpt_desc3),
      'wpt_desc4': serializer.toJson<String>(wpt_desc4),
      'turn_dir': serializer.toJson<String>(turn_dir),
      'nav1_ident': serializer.toJson<String>(nav1_ident),
      'nav1_type': serializer.toJson<String>(nav1_type),
      'nav1_ctry': serializer.toJson<String>(nav1_ctry),
      'nav1_key_cd': serializer.toJson<String>(nav1_key_cd),
      'nav1_bear': serializer.toJson<String>(nav1_bear),
      'nav1_dist': serializer.toJson<String>(nav1_dist),
      'nav2_ident': serializer.toJson<String>(nav2_ident),
      'nav2_type': serializer.toJson<String>(nav2_type),
      'nav2_ctry': serializer.toJson<String>(nav2_ctry),
      'nav2_key_cd': serializer.toJson<String>(nav2_key_cd),
      'nav2_bear': serializer.toJson<String>(nav2_bear),
      'nav2_dist': serializer.toJson<String>(nav2_dist),
      'mag_crs': serializer.toJson<String>(mag_crs),
      'distance': serializer.toJson<String>(distance),
      'alt_desc': serializer.toJson<String>(alt_desc),
      'alt_one': serializer.toJson<String>(alt_one),
      'alt_two': serializer.toJson<String>(alt_two),
      'rnp': serializer.toJson<String>(rnp),
      'cycle_date': serializer.toJson<String>(cycle_date),
      'wpt_wgs_lat': serializer.toJson<String>(wpt_wgs_lat),
      'wpt_wgs_dlat': serializer.toJson<String>(wpt_wgs_dlat),
      'wpt_wgs_long': serializer.toJson<String>(wpt_wgs_long),
      'wpt_wgs_dlong': serializer.toJson<String>(wpt_wgs_dlong),
      'wpt_mvar': serializer.toJson<String>(wpt_mvar),
      'nav1_wgs_lat': serializer.toJson<String>(nav1_wgs_lat),
      'nav1_wgs_dlat': serializer.toJson<String>(nav1_wgs_dlat),
      'nav1_wgs_long': serializer.toJson<String>(nav1_wgs_long),
      'nav1_wgs_dlong': serializer.toJson<String>(nav1_wgs_dlong),
      'nav1_mvar': serializer.toJson<String>(nav1_mvar),
      'nav1_dme_wgs_lat': serializer.toJson<String>(nav1_dme_wgs_lat),
      'nav1_dme_wgs_dlat': serializer.toJson<String>(nav1_dme_wgs_dlat),
      'nav1_dme_wgs_long': serializer.toJson<String>(nav1_dme_wgs_long),
      'nav1_dme_wgs_dlong': serializer.toJson<String>(nav1_dme_wgs_dlong),
      'nav2_wgs_lat': serializer.toJson<String>(nav2_wgs_lat),
      'nav2_wgs_dlat': serializer.toJson<String>(nav2_wgs_dlat),
      'nav2_wgs_long': serializer.toJson<String>(nav2_wgs_long),
      'nav2_wgs_dlong': serializer.toJson<String>(nav2_wgs_dlong),
      'nav2_mvar': serializer.toJson<String>(nav2_mvar),
      'nav2_dime_wgs_lat': serializer.toJson<String>(nav2_dime_wgs_lat),
      'nav2_dime_wgs_dlat': serializer.toJson<String>(nav2_dime_wgs_dlat),
      'nav2_dime_wgs_long': serializer.toJson<String>(nav2_dime_wgs_long),
      'nav2_dime_wgs_dlong': serializer.toJson<String>(nav2_dime_wgs_dlong),
      'speed': serializer.toJson<String>(speed),
      'speed_ac': serializer.toJson<String>(speed_ac),
      'speed_alt': serializer.toJson<String>(speed_alt),
      'speed_2': serializer.toJson<String>(speed_2),
      'speed_alt_2': serializer.toJson<String>(speed_alt_2),
      'speed_ac_2': serializer.toJson<String>(speed_ac_2),
      'vnav': serializer.toJson<String>(vnav),
      'tch': serializer.toJson<String>(tch),
    };
  }

  dafif_trm_seg copyWith(
          {int id,
          String arpt_ident,
          String proc,
          String trm_ident,
          String seq_nbr,
          String type,
          String transition,
          String icao,
          String track_cd,
          String wpt_id,
          String wpt_ctry,
          String wpt_desc1,
          String wpt_desc2,
          String wpt_desc3,
          String wpt_desc4,
          String turn_dir,
          String nav1_ident,
          String nav1_type,
          String nav1_ctry,
          String nav1_key_cd,
          String nav1_bear,
          String nav1_dist,
          String nav2_ident,
          String nav2_type,
          String nav2_ctry,
          String nav2_key_cd,
          String nav2_bear,
          String nav2_dist,
          String mag_crs,
          String distance,
          String alt_desc,
          String alt_one,
          String alt_two,
          String rnp,
          String cycle_date,
          String wpt_wgs_lat,
          String wpt_wgs_dlat,
          String wpt_wgs_long,
          String wpt_wgs_dlong,
          String wpt_mvar,
          String nav1_wgs_lat,
          String nav1_wgs_dlat,
          String nav1_wgs_long,
          String nav1_wgs_dlong,
          String nav1_mvar,
          String nav1_dme_wgs_lat,
          String nav1_dme_wgs_dlat,
          String nav1_dme_wgs_long,
          String nav1_dme_wgs_dlong,
          String nav2_wgs_lat,
          String nav2_wgs_dlat,
          String nav2_wgs_long,
          String nav2_wgs_dlong,
          String nav2_mvar,
          String nav2_dime_wgs_lat,
          String nav2_dime_wgs_dlat,
          String nav2_dime_wgs_long,
          String nav2_dime_wgs_dlong,
          String speed,
          String speed_ac,
          String speed_alt,
          String speed_2,
          String speed_alt_2,
          String speed_ac_2,
          String vnav,
          String tch}) =>
      dafif_trm_seg(
        id: id ?? this.id,
        arpt_ident: arpt_ident ?? this.arpt_ident,
        proc: proc ?? this.proc,
        trm_ident: trm_ident ?? this.trm_ident,
        seq_nbr: seq_nbr ?? this.seq_nbr,
        type: type ?? this.type,
        transition: transition ?? this.transition,
        icao: icao ?? this.icao,
        track_cd: track_cd ?? this.track_cd,
        wpt_id: wpt_id ?? this.wpt_id,
        wpt_ctry: wpt_ctry ?? this.wpt_ctry,
        wpt_desc1: wpt_desc1 ?? this.wpt_desc1,
        wpt_desc2: wpt_desc2 ?? this.wpt_desc2,
        wpt_desc3: wpt_desc3 ?? this.wpt_desc3,
        wpt_desc4: wpt_desc4 ?? this.wpt_desc4,
        turn_dir: turn_dir ?? this.turn_dir,
        nav1_ident: nav1_ident ?? this.nav1_ident,
        nav1_type: nav1_type ?? this.nav1_type,
        nav1_ctry: nav1_ctry ?? this.nav1_ctry,
        nav1_key_cd: nav1_key_cd ?? this.nav1_key_cd,
        nav1_bear: nav1_bear ?? this.nav1_bear,
        nav1_dist: nav1_dist ?? this.nav1_dist,
        nav2_ident: nav2_ident ?? this.nav2_ident,
        nav2_type: nav2_type ?? this.nav2_type,
        nav2_ctry: nav2_ctry ?? this.nav2_ctry,
        nav2_key_cd: nav2_key_cd ?? this.nav2_key_cd,
        nav2_bear: nav2_bear ?? this.nav2_bear,
        nav2_dist: nav2_dist ?? this.nav2_dist,
        mag_crs: mag_crs ?? this.mag_crs,
        distance: distance ?? this.distance,
        alt_desc: alt_desc ?? this.alt_desc,
        alt_one: alt_one ?? this.alt_one,
        alt_two: alt_two ?? this.alt_two,
        rnp: rnp ?? this.rnp,
        cycle_date: cycle_date ?? this.cycle_date,
        wpt_wgs_lat: wpt_wgs_lat ?? this.wpt_wgs_lat,
        wpt_wgs_dlat: wpt_wgs_dlat ?? this.wpt_wgs_dlat,
        wpt_wgs_long: wpt_wgs_long ?? this.wpt_wgs_long,
        wpt_wgs_dlong: wpt_wgs_dlong ?? this.wpt_wgs_dlong,
        wpt_mvar: wpt_mvar ?? this.wpt_mvar,
        nav1_wgs_lat: nav1_wgs_lat ?? this.nav1_wgs_lat,
        nav1_wgs_dlat: nav1_wgs_dlat ?? this.nav1_wgs_dlat,
        nav1_wgs_long: nav1_wgs_long ?? this.nav1_wgs_long,
        nav1_wgs_dlong: nav1_wgs_dlong ?? this.nav1_wgs_dlong,
        nav1_mvar: nav1_mvar ?? this.nav1_mvar,
        nav1_dme_wgs_lat: nav1_dme_wgs_lat ?? this.nav1_dme_wgs_lat,
        nav1_dme_wgs_dlat: nav1_dme_wgs_dlat ?? this.nav1_dme_wgs_dlat,
        nav1_dme_wgs_long: nav1_dme_wgs_long ?? this.nav1_dme_wgs_long,
        nav1_dme_wgs_dlong: nav1_dme_wgs_dlong ?? this.nav1_dme_wgs_dlong,
        nav2_wgs_lat: nav2_wgs_lat ?? this.nav2_wgs_lat,
        nav2_wgs_dlat: nav2_wgs_dlat ?? this.nav2_wgs_dlat,
        nav2_wgs_long: nav2_wgs_long ?? this.nav2_wgs_long,
        nav2_wgs_dlong: nav2_wgs_dlong ?? this.nav2_wgs_dlong,
        nav2_mvar: nav2_mvar ?? this.nav2_mvar,
        nav2_dime_wgs_lat: nav2_dime_wgs_lat ?? this.nav2_dime_wgs_lat,
        nav2_dime_wgs_dlat: nav2_dime_wgs_dlat ?? this.nav2_dime_wgs_dlat,
        nav2_dime_wgs_long: nav2_dime_wgs_long ?? this.nav2_dime_wgs_long,
        nav2_dime_wgs_dlong: nav2_dime_wgs_dlong ?? this.nav2_dime_wgs_dlong,
        speed: speed ?? this.speed,
        speed_ac: speed_ac ?? this.speed_ac,
        speed_alt: speed_alt ?? this.speed_alt,
        speed_2: speed_2 ?? this.speed_2,
        speed_alt_2: speed_alt_2 ?? this.speed_alt_2,
        speed_ac_2: speed_ac_2 ?? this.speed_ac_2,
        vnav: vnav ?? this.vnav,
        tch: tch ?? this.tch,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_trm_seg(')
          ..write('id: $id, ')
          ..write('arpt_ident: $arpt_ident, ')
          ..write('proc: $proc, ')
          ..write('trm_ident: $trm_ident, ')
          ..write('seq_nbr: $seq_nbr, ')
          ..write('type: $type, ')
          ..write('transition: $transition, ')
          ..write('icao: $icao, ')
          ..write('track_cd: $track_cd, ')
          ..write('wpt_id: $wpt_id, ')
          ..write('wpt_ctry: $wpt_ctry, ')
          ..write('wpt_desc1: $wpt_desc1, ')
          ..write('wpt_desc2: $wpt_desc2, ')
          ..write('wpt_desc3: $wpt_desc3, ')
          ..write('wpt_desc4: $wpt_desc4, ')
          ..write('turn_dir: $turn_dir, ')
          ..write('nav1_ident: $nav1_ident, ')
          ..write('nav1_type: $nav1_type, ')
          ..write('nav1_ctry: $nav1_ctry, ')
          ..write('nav1_key_cd: $nav1_key_cd, ')
          ..write('nav1_bear: $nav1_bear, ')
          ..write('nav1_dist: $nav1_dist, ')
          ..write('nav2_ident: $nav2_ident, ')
          ..write('nav2_type: $nav2_type, ')
          ..write('nav2_ctry: $nav2_ctry, ')
          ..write('nav2_key_cd: $nav2_key_cd, ')
          ..write('nav2_bear: $nav2_bear, ')
          ..write('nav2_dist: $nav2_dist, ')
          ..write('mag_crs: $mag_crs, ')
          ..write('distance: $distance, ')
          ..write('alt_desc: $alt_desc, ')
          ..write('alt_one: $alt_one, ')
          ..write('alt_two: $alt_two, ')
          ..write('rnp: $rnp, ')
          ..write('cycle_date: $cycle_date, ')
          ..write('wpt_wgs_lat: $wpt_wgs_lat, ')
          ..write('wpt_wgs_dlat: $wpt_wgs_dlat, ')
          ..write('wpt_wgs_long: $wpt_wgs_long, ')
          ..write('wpt_wgs_dlong: $wpt_wgs_dlong, ')
          ..write('wpt_mvar: $wpt_mvar, ')
          ..write('nav1_wgs_lat: $nav1_wgs_lat, ')
          ..write('nav1_wgs_dlat: $nav1_wgs_dlat, ')
          ..write('nav1_wgs_long: $nav1_wgs_long, ')
          ..write('nav1_wgs_dlong: $nav1_wgs_dlong, ')
          ..write('nav1_mvar: $nav1_mvar, ')
          ..write('nav1_dme_wgs_lat: $nav1_dme_wgs_lat, ')
          ..write('nav1_dme_wgs_dlat: $nav1_dme_wgs_dlat, ')
          ..write('nav1_dme_wgs_long: $nav1_dme_wgs_long, ')
          ..write('nav1_dme_wgs_dlong: $nav1_dme_wgs_dlong, ')
          ..write('nav2_wgs_lat: $nav2_wgs_lat, ')
          ..write('nav2_wgs_dlat: $nav2_wgs_dlat, ')
          ..write('nav2_wgs_long: $nav2_wgs_long, ')
          ..write('nav2_wgs_dlong: $nav2_wgs_dlong, ')
          ..write('nav2_mvar: $nav2_mvar, ')
          ..write('nav2_dime_wgs_lat: $nav2_dime_wgs_lat, ')
          ..write('nav2_dime_wgs_dlat: $nav2_dime_wgs_dlat, ')
          ..write('nav2_dime_wgs_long: $nav2_dime_wgs_long, ')
          ..write('nav2_dime_wgs_dlong: $nav2_dime_wgs_dlong, ')
          ..write('speed: $speed, ')
          ..write('speed_ac: $speed_ac, ')
          ..write('speed_alt: $speed_alt, ')
          ..write('speed_2: $speed_2, ')
          ..write('speed_alt_2: $speed_alt_2, ')
          ..write('speed_ac_2: $speed_ac_2, ')
          ..write('vnav: $vnav, ')
          ..write('tch: $tch')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          arpt_ident.hashCode,
          $mrjc(
              proc.hashCode,
              $mrjc(
                  trm_ident.hashCode,
                  $mrjc(
                      seq_nbr.hashCode,
                      $mrjc(
                          type.hashCode,
                          $mrjc(
                              transition.hashCode,
                              $mrjc(
                                  icao.hashCode,
                                  $mrjc(
                                      track_cd.hashCode,
                                      $mrjc(
                                          wpt_id.hashCode,
                                          $mrjc(
                                              wpt_ctry.hashCode,
                                              $mrjc(
                                                  wpt_desc1.hashCode,
                                                  $mrjc(
                                                      wpt_desc2.hashCode,
                                                      $mrjc(
                                                          wpt_desc3.hashCode,
                                                          $mrjc(
                                                              wpt_desc4
                                                                  .hashCode,
                                                              $mrjc(
                                                                  turn_dir
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      nav1_ident
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          nav1_type
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              nav1_ctry.hashCode,
                                                                              $mrjc(nav1_key_cd.hashCode, $mrjc(nav1_bear.hashCode, $mrjc(nav1_dist.hashCode, $mrjc(nav2_ident.hashCode, $mrjc(nav2_type.hashCode, $mrjc(nav2_ctry.hashCode, $mrjc(nav2_key_cd.hashCode, $mrjc(nav2_bear.hashCode, $mrjc(nav2_dist.hashCode, $mrjc(mag_crs.hashCode, $mrjc(distance.hashCode, $mrjc(alt_desc.hashCode, $mrjc(alt_one.hashCode, $mrjc(alt_two.hashCode, $mrjc(rnp.hashCode, $mrjc(cycle_date.hashCode, $mrjc(wpt_wgs_lat.hashCode, $mrjc(wpt_wgs_dlat.hashCode, $mrjc(wpt_wgs_long.hashCode, $mrjc(wpt_wgs_dlong.hashCode, $mrjc(wpt_mvar.hashCode, $mrjc(nav1_wgs_lat.hashCode, $mrjc(nav1_wgs_dlat.hashCode, $mrjc(nav1_wgs_long.hashCode, $mrjc(nav1_wgs_dlong.hashCode, $mrjc(nav1_mvar.hashCode, $mrjc(nav1_dme_wgs_lat.hashCode, $mrjc(nav1_dme_wgs_dlat.hashCode, $mrjc(nav1_dme_wgs_long.hashCode, $mrjc(nav1_dme_wgs_dlong.hashCode, $mrjc(nav2_wgs_lat.hashCode, $mrjc(nav2_wgs_dlat.hashCode, $mrjc(nav2_wgs_long.hashCode, $mrjc(nav2_wgs_dlong.hashCode, $mrjc(nav2_mvar.hashCode, $mrjc(nav2_dime_wgs_lat.hashCode, $mrjc(nav2_dime_wgs_dlat.hashCode, $mrjc(nav2_dime_wgs_long.hashCode, $mrjc(nav2_dime_wgs_dlong.hashCode, $mrjc(speed.hashCode, $mrjc(speed_ac.hashCode, $mrjc(speed_alt.hashCode, $mrjc(speed_2.hashCode, $mrjc(speed_alt_2.hashCode, $mrjc(speed_ac_2.hashCode, $mrjc(vnav.hashCode, tch.hashCode))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_trm_seg &&
          other.id == this.id &&
          other.arpt_ident == this.arpt_ident &&
          other.proc == this.proc &&
          other.trm_ident == this.trm_ident &&
          other.seq_nbr == this.seq_nbr &&
          other.type == this.type &&
          other.transition == this.transition &&
          other.icao == this.icao &&
          other.track_cd == this.track_cd &&
          other.wpt_id == this.wpt_id &&
          other.wpt_ctry == this.wpt_ctry &&
          other.wpt_desc1 == this.wpt_desc1 &&
          other.wpt_desc2 == this.wpt_desc2 &&
          other.wpt_desc3 == this.wpt_desc3 &&
          other.wpt_desc4 == this.wpt_desc4 &&
          other.turn_dir == this.turn_dir &&
          other.nav1_ident == this.nav1_ident &&
          other.nav1_type == this.nav1_type &&
          other.nav1_ctry == this.nav1_ctry &&
          other.nav1_key_cd == this.nav1_key_cd &&
          other.nav1_bear == this.nav1_bear &&
          other.nav1_dist == this.nav1_dist &&
          other.nav2_ident == this.nav2_ident &&
          other.nav2_type == this.nav2_type &&
          other.nav2_ctry == this.nav2_ctry &&
          other.nav2_key_cd == this.nav2_key_cd &&
          other.nav2_bear == this.nav2_bear &&
          other.nav2_dist == this.nav2_dist &&
          other.mag_crs == this.mag_crs &&
          other.distance == this.distance &&
          other.alt_desc == this.alt_desc &&
          other.alt_one == this.alt_one &&
          other.alt_two == this.alt_two &&
          other.rnp == this.rnp &&
          other.cycle_date == this.cycle_date &&
          other.wpt_wgs_lat == this.wpt_wgs_lat &&
          other.wpt_wgs_dlat == this.wpt_wgs_dlat &&
          other.wpt_wgs_long == this.wpt_wgs_long &&
          other.wpt_wgs_dlong == this.wpt_wgs_dlong &&
          other.wpt_mvar == this.wpt_mvar &&
          other.nav1_wgs_lat == this.nav1_wgs_lat &&
          other.nav1_wgs_dlat == this.nav1_wgs_dlat &&
          other.nav1_wgs_long == this.nav1_wgs_long &&
          other.nav1_wgs_dlong == this.nav1_wgs_dlong &&
          other.nav1_mvar == this.nav1_mvar &&
          other.nav1_dme_wgs_lat == this.nav1_dme_wgs_lat &&
          other.nav1_dme_wgs_dlat == this.nav1_dme_wgs_dlat &&
          other.nav1_dme_wgs_long == this.nav1_dme_wgs_long &&
          other.nav1_dme_wgs_dlong == this.nav1_dme_wgs_dlong &&
          other.nav2_wgs_lat == this.nav2_wgs_lat &&
          other.nav2_wgs_dlat == this.nav2_wgs_dlat &&
          other.nav2_wgs_long == this.nav2_wgs_long &&
          other.nav2_wgs_dlong == this.nav2_wgs_dlong &&
          other.nav2_mvar == this.nav2_mvar &&
          other.nav2_dime_wgs_lat == this.nav2_dime_wgs_lat &&
          other.nav2_dime_wgs_dlat == this.nav2_dime_wgs_dlat &&
          other.nav2_dime_wgs_long == this.nav2_dime_wgs_long &&
          other.nav2_dime_wgs_dlong == this.nav2_dime_wgs_dlong &&
          other.speed == this.speed &&
          other.speed_ac == this.speed_ac &&
          other.speed_alt == this.speed_alt &&
          other.speed_2 == this.speed_2 &&
          other.speed_alt_2 == this.speed_alt_2 &&
          other.speed_ac_2 == this.speed_ac_2 &&
          other.vnav == this.vnav &&
          other.tch == this.tch);
}

class DafifTrmSegCompanion extends UpdateCompanion<dafif_trm_seg> {
  final Value<int> id;
  final Value<String> arpt_ident;
  final Value<String> proc;
  final Value<String> trm_ident;
  final Value<String> seq_nbr;
  final Value<String> type;
  final Value<String> transition;
  final Value<String> icao;
  final Value<String> track_cd;
  final Value<String> wpt_id;
  final Value<String> wpt_ctry;
  final Value<String> wpt_desc1;
  final Value<String> wpt_desc2;
  final Value<String> wpt_desc3;
  final Value<String> wpt_desc4;
  final Value<String> turn_dir;
  final Value<String> nav1_ident;
  final Value<String> nav1_type;
  final Value<String> nav1_ctry;
  final Value<String> nav1_key_cd;
  final Value<String> nav1_bear;
  final Value<String> nav1_dist;
  final Value<String> nav2_ident;
  final Value<String> nav2_type;
  final Value<String> nav2_ctry;
  final Value<String> nav2_key_cd;
  final Value<String> nav2_bear;
  final Value<String> nav2_dist;
  final Value<String> mag_crs;
  final Value<String> distance;
  final Value<String> alt_desc;
  final Value<String> alt_one;
  final Value<String> alt_two;
  final Value<String> rnp;
  final Value<String> cycle_date;
  final Value<String> wpt_wgs_lat;
  final Value<String> wpt_wgs_dlat;
  final Value<String> wpt_wgs_long;
  final Value<String> wpt_wgs_dlong;
  final Value<String> wpt_mvar;
  final Value<String> nav1_wgs_lat;
  final Value<String> nav1_wgs_dlat;
  final Value<String> nav1_wgs_long;
  final Value<String> nav1_wgs_dlong;
  final Value<String> nav1_mvar;
  final Value<String> nav1_dme_wgs_lat;
  final Value<String> nav1_dme_wgs_dlat;
  final Value<String> nav1_dme_wgs_long;
  final Value<String> nav1_dme_wgs_dlong;
  final Value<String> nav2_wgs_lat;
  final Value<String> nav2_wgs_dlat;
  final Value<String> nav2_wgs_long;
  final Value<String> nav2_wgs_dlong;
  final Value<String> nav2_mvar;
  final Value<String> nav2_dime_wgs_lat;
  final Value<String> nav2_dime_wgs_dlat;
  final Value<String> nav2_dime_wgs_long;
  final Value<String> nav2_dime_wgs_dlong;
  final Value<String> speed;
  final Value<String> speed_ac;
  final Value<String> speed_alt;
  final Value<String> speed_2;
  final Value<String> speed_alt_2;
  final Value<String> speed_ac_2;
  final Value<String> vnav;
  final Value<String> tch;
  const DafifTrmSegCompanion({
    this.id = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.proc = const Value.absent(),
    this.trm_ident = const Value.absent(),
    this.seq_nbr = const Value.absent(),
    this.type = const Value.absent(),
    this.transition = const Value.absent(),
    this.icao = const Value.absent(),
    this.track_cd = const Value.absent(),
    this.wpt_id = const Value.absent(),
    this.wpt_ctry = const Value.absent(),
    this.wpt_desc1 = const Value.absent(),
    this.wpt_desc2 = const Value.absent(),
    this.wpt_desc3 = const Value.absent(),
    this.wpt_desc4 = const Value.absent(),
    this.turn_dir = const Value.absent(),
    this.nav1_ident = const Value.absent(),
    this.nav1_type = const Value.absent(),
    this.nav1_ctry = const Value.absent(),
    this.nav1_key_cd = const Value.absent(),
    this.nav1_bear = const Value.absent(),
    this.nav1_dist = const Value.absent(),
    this.nav2_ident = const Value.absent(),
    this.nav2_type = const Value.absent(),
    this.nav2_ctry = const Value.absent(),
    this.nav2_key_cd = const Value.absent(),
    this.nav2_bear = const Value.absent(),
    this.nav2_dist = const Value.absent(),
    this.mag_crs = const Value.absent(),
    this.distance = const Value.absent(),
    this.alt_desc = const Value.absent(),
    this.alt_one = const Value.absent(),
    this.alt_two = const Value.absent(),
    this.rnp = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.wpt_wgs_lat = const Value.absent(),
    this.wpt_wgs_dlat = const Value.absent(),
    this.wpt_wgs_long = const Value.absent(),
    this.wpt_wgs_dlong = const Value.absent(),
    this.wpt_mvar = const Value.absent(),
    this.nav1_wgs_lat = const Value.absent(),
    this.nav1_wgs_dlat = const Value.absent(),
    this.nav1_wgs_long = const Value.absent(),
    this.nav1_wgs_dlong = const Value.absent(),
    this.nav1_mvar = const Value.absent(),
    this.nav1_dme_wgs_lat = const Value.absent(),
    this.nav1_dme_wgs_dlat = const Value.absent(),
    this.nav1_dme_wgs_long = const Value.absent(),
    this.nav1_dme_wgs_dlong = const Value.absent(),
    this.nav2_wgs_lat = const Value.absent(),
    this.nav2_wgs_dlat = const Value.absent(),
    this.nav2_wgs_long = const Value.absent(),
    this.nav2_wgs_dlong = const Value.absent(),
    this.nav2_mvar = const Value.absent(),
    this.nav2_dime_wgs_lat = const Value.absent(),
    this.nav2_dime_wgs_dlat = const Value.absent(),
    this.nav2_dime_wgs_long = const Value.absent(),
    this.nav2_dime_wgs_dlong = const Value.absent(),
    this.speed = const Value.absent(),
    this.speed_ac = const Value.absent(),
    this.speed_alt = const Value.absent(),
    this.speed_2 = const Value.absent(),
    this.speed_alt_2 = const Value.absent(),
    this.speed_ac_2 = const Value.absent(),
    this.vnav = const Value.absent(),
    this.tch = const Value.absent(),
  });
  DafifTrmSegCompanion.insert({
    this.id = const Value.absent(),
    this.arpt_ident = const Value.absent(),
    this.proc = const Value.absent(),
    this.trm_ident = const Value.absent(),
    this.seq_nbr = const Value.absent(),
    this.type = const Value.absent(),
    this.transition = const Value.absent(),
    this.icao = const Value.absent(),
    this.track_cd = const Value.absent(),
    this.wpt_id = const Value.absent(),
    this.wpt_ctry = const Value.absent(),
    this.wpt_desc1 = const Value.absent(),
    this.wpt_desc2 = const Value.absent(),
    this.wpt_desc3 = const Value.absent(),
    this.wpt_desc4 = const Value.absent(),
    this.turn_dir = const Value.absent(),
    this.nav1_ident = const Value.absent(),
    this.nav1_type = const Value.absent(),
    this.nav1_ctry = const Value.absent(),
    this.nav1_key_cd = const Value.absent(),
    this.nav1_bear = const Value.absent(),
    this.nav1_dist = const Value.absent(),
    this.nav2_ident = const Value.absent(),
    this.nav2_type = const Value.absent(),
    this.nav2_ctry = const Value.absent(),
    this.nav2_key_cd = const Value.absent(),
    this.nav2_bear = const Value.absent(),
    this.nav2_dist = const Value.absent(),
    this.mag_crs = const Value.absent(),
    this.distance = const Value.absent(),
    this.alt_desc = const Value.absent(),
    this.alt_one = const Value.absent(),
    this.alt_two = const Value.absent(),
    this.rnp = const Value.absent(),
    this.cycle_date = const Value.absent(),
    this.wpt_wgs_lat = const Value.absent(),
    this.wpt_wgs_dlat = const Value.absent(),
    this.wpt_wgs_long = const Value.absent(),
    this.wpt_wgs_dlong = const Value.absent(),
    this.wpt_mvar = const Value.absent(),
    this.nav1_wgs_lat = const Value.absent(),
    this.nav1_wgs_dlat = const Value.absent(),
    this.nav1_wgs_long = const Value.absent(),
    this.nav1_wgs_dlong = const Value.absent(),
    this.nav1_mvar = const Value.absent(),
    this.nav1_dme_wgs_lat = const Value.absent(),
    this.nav1_dme_wgs_dlat = const Value.absent(),
    this.nav1_dme_wgs_long = const Value.absent(),
    this.nav1_dme_wgs_dlong = const Value.absent(),
    this.nav2_wgs_lat = const Value.absent(),
    this.nav2_wgs_dlat = const Value.absent(),
    this.nav2_wgs_long = const Value.absent(),
    this.nav2_wgs_dlong = const Value.absent(),
    this.nav2_mvar = const Value.absent(),
    this.nav2_dime_wgs_lat = const Value.absent(),
    this.nav2_dime_wgs_dlat = const Value.absent(),
    this.nav2_dime_wgs_long = const Value.absent(),
    this.nav2_dime_wgs_dlong = const Value.absent(),
    this.speed = const Value.absent(),
    this.speed_ac = const Value.absent(),
    this.speed_alt = const Value.absent(),
    this.speed_2 = const Value.absent(),
    this.speed_alt_2 = const Value.absent(),
    this.speed_ac_2 = const Value.absent(),
    this.vnav = const Value.absent(),
    this.tch = const Value.absent(),
  });
  static Insertable<dafif_trm_seg> custom({
    Expression<int> id,
    Expression<String> arpt_ident,
    Expression<String> proc,
    Expression<String> trm_ident,
    Expression<String> seq_nbr,
    Expression<String> type,
    Expression<String> transition,
    Expression<String> icao,
    Expression<String> track_cd,
    Expression<String> wpt_id,
    Expression<String> wpt_ctry,
    Expression<String> wpt_desc1,
    Expression<String> wpt_desc2,
    Expression<String> wpt_desc3,
    Expression<String> wpt_desc4,
    Expression<String> turn_dir,
    Expression<String> nav1_ident,
    Expression<String> nav1_type,
    Expression<String> nav1_ctry,
    Expression<String> nav1_key_cd,
    Expression<String> nav1_bear,
    Expression<String> nav1_dist,
    Expression<String> nav2_ident,
    Expression<String> nav2_type,
    Expression<String> nav2_ctry,
    Expression<String> nav2_key_cd,
    Expression<String> nav2_bear,
    Expression<String> nav2_dist,
    Expression<String> mag_crs,
    Expression<String> distance,
    Expression<String> alt_desc,
    Expression<String> alt_one,
    Expression<String> alt_two,
    Expression<String> rnp,
    Expression<String> cycle_date,
    Expression<String> wpt_wgs_lat,
    Expression<String> wpt_wgs_dlat,
    Expression<String> wpt_wgs_long,
    Expression<String> wpt_wgs_dlong,
    Expression<String> wpt_mvar,
    Expression<String> nav1_wgs_lat,
    Expression<String> nav1_wgs_dlat,
    Expression<String> nav1_wgs_long,
    Expression<String> nav1_wgs_dlong,
    Expression<String> nav1_mvar,
    Expression<String> nav1_dme_wgs_lat,
    Expression<String> nav1_dme_wgs_dlat,
    Expression<String> nav1_dme_wgs_long,
    Expression<String> nav1_dme_wgs_dlong,
    Expression<String> nav2_wgs_lat,
    Expression<String> nav2_wgs_dlat,
    Expression<String> nav2_wgs_long,
    Expression<String> nav2_wgs_dlong,
    Expression<String> nav2_mvar,
    Expression<String> nav2_dime_wgs_lat,
    Expression<String> nav2_dime_wgs_dlat,
    Expression<String> nav2_dime_wgs_long,
    Expression<String> nav2_dime_wgs_dlong,
    Expression<String> speed,
    Expression<String> speed_ac,
    Expression<String> speed_alt,
    Expression<String> speed_2,
    Expression<String> speed_alt_2,
    Expression<String> speed_ac_2,
    Expression<String> vnav,
    Expression<String> tch,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (arpt_ident != null) 'arpt_ident': arpt_ident,
      if (proc != null) 'proc': proc,
      if (trm_ident != null) 'trm_ident': trm_ident,
      if (seq_nbr != null) 'seq_nbr': seq_nbr,
      if (type != null) 'type': type,
      if (transition != null) 'transition': transition,
      if (icao != null) 'icao': icao,
      if (track_cd != null) 'track_cd': track_cd,
      if (wpt_id != null) 'wpt_id': wpt_id,
      if (wpt_ctry != null) 'wpt_ctry': wpt_ctry,
      if (wpt_desc1 != null) 'wpt_desc1': wpt_desc1,
      if (wpt_desc2 != null) 'wpt_desc2': wpt_desc2,
      if (wpt_desc3 != null) 'wpt_desc3': wpt_desc3,
      if (wpt_desc4 != null) 'wpt_desc4': wpt_desc4,
      if (turn_dir != null) 'turn_dir': turn_dir,
      if (nav1_ident != null) 'nav1_ident': nav1_ident,
      if (nav1_type != null) 'nav1_type': nav1_type,
      if (nav1_ctry != null) 'nav1_ctry': nav1_ctry,
      if (nav1_key_cd != null) 'nav1_key_cd': nav1_key_cd,
      if (nav1_bear != null) 'nav1_bear': nav1_bear,
      if (nav1_dist != null) 'nav1_dist': nav1_dist,
      if (nav2_ident != null) 'nav2_ident': nav2_ident,
      if (nav2_type != null) 'nav2_type': nav2_type,
      if (nav2_ctry != null) 'nav2_ctry': nav2_ctry,
      if (nav2_key_cd != null) 'nav2_key_cd': nav2_key_cd,
      if (nav2_bear != null) 'nav2_bear': nav2_bear,
      if (nav2_dist != null) 'nav2_dist': nav2_dist,
      if (mag_crs != null) 'mag_crs': mag_crs,
      if (distance != null) 'distance': distance,
      if (alt_desc != null) 'alt_desc': alt_desc,
      if (alt_one != null) 'alt_one': alt_one,
      if (alt_two != null) 'alt_two': alt_two,
      if (rnp != null) 'rnp': rnp,
      if (cycle_date != null) 'cycle_date': cycle_date,
      if (wpt_wgs_lat != null) 'wpt_wgs_lat': wpt_wgs_lat,
      if (wpt_wgs_dlat != null) 'wpt_wgs_dlat': wpt_wgs_dlat,
      if (wpt_wgs_long != null) 'wpt_wgs_long': wpt_wgs_long,
      if (wpt_wgs_dlong != null) 'wpt_wgs_dlong': wpt_wgs_dlong,
      if (wpt_mvar != null) 'wpt_mvar': wpt_mvar,
      if (nav1_wgs_lat != null) 'nav1_wgs_lat': nav1_wgs_lat,
      if (nav1_wgs_dlat != null) 'nav1_wgs_dlat': nav1_wgs_dlat,
      if (nav1_wgs_long != null) 'nav1_wgs_long': nav1_wgs_long,
      if (nav1_wgs_dlong != null) 'nav1_wgs_dlong': nav1_wgs_dlong,
      if (nav1_mvar != null) 'nav1_mvar': nav1_mvar,
      if (nav1_dme_wgs_lat != null) 'nav1_dme_wgs_lat': nav1_dme_wgs_lat,
      if (nav1_dme_wgs_dlat != null) 'nav1_dme_wgs_dlat': nav1_dme_wgs_dlat,
      if (nav1_dme_wgs_long != null) 'nav1_dme_wgs_long': nav1_dme_wgs_long,
      if (nav1_dme_wgs_dlong != null) 'nav1_dme_wgs_dlong': nav1_dme_wgs_dlong,
      if (nav2_wgs_lat != null) 'nav2_wgs_lat': nav2_wgs_lat,
      if (nav2_wgs_dlat != null) 'nav2_wgs_dlat': nav2_wgs_dlat,
      if (nav2_wgs_long != null) 'nav2_wgs_long': nav2_wgs_long,
      if (nav2_wgs_dlong != null) 'nav2_wgs_dlong': nav2_wgs_dlong,
      if (nav2_mvar != null) 'nav2_mvar': nav2_mvar,
      if (nav2_dime_wgs_lat != null) 'nav2_dime_wgs_lat': nav2_dime_wgs_lat,
      if (nav2_dime_wgs_dlat != null) 'nav2_dime_wgs_dlat': nav2_dime_wgs_dlat,
      if (nav2_dime_wgs_long != null) 'nav2_dime_wgs_long': nav2_dime_wgs_long,
      if (nav2_dime_wgs_dlong != null)
        'nav2_dime_wgs_dlong': nav2_dime_wgs_dlong,
      if (speed != null) 'speed': speed,
      if (speed_ac != null) 'speed_ac': speed_ac,
      if (speed_alt != null) 'speed_alt': speed_alt,
      if (speed_2 != null) 'speed_2': speed_2,
      if (speed_alt_2 != null) 'speed_alt_2': speed_alt_2,
      if (speed_ac_2 != null) 'speed_ac_2': speed_ac_2,
      if (vnav != null) 'vnav': vnav,
      if (tch != null) 'tch': tch,
    });
  }

  DafifTrmSegCompanion copyWith(
      {Value<int> id,
      Value<String> arpt_ident,
      Value<String> proc,
      Value<String> trm_ident,
      Value<String> seq_nbr,
      Value<String> type,
      Value<String> transition,
      Value<String> icao,
      Value<String> track_cd,
      Value<String> wpt_id,
      Value<String> wpt_ctry,
      Value<String> wpt_desc1,
      Value<String> wpt_desc2,
      Value<String> wpt_desc3,
      Value<String> wpt_desc4,
      Value<String> turn_dir,
      Value<String> nav1_ident,
      Value<String> nav1_type,
      Value<String> nav1_ctry,
      Value<String> nav1_key_cd,
      Value<String> nav1_bear,
      Value<String> nav1_dist,
      Value<String> nav2_ident,
      Value<String> nav2_type,
      Value<String> nav2_ctry,
      Value<String> nav2_key_cd,
      Value<String> nav2_bear,
      Value<String> nav2_dist,
      Value<String> mag_crs,
      Value<String> distance,
      Value<String> alt_desc,
      Value<String> alt_one,
      Value<String> alt_two,
      Value<String> rnp,
      Value<String> cycle_date,
      Value<String> wpt_wgs_lat,
      Value<String> wpt_wgs_dlat,
      Value<String> wpt_wgs_long,
      Value<String> wpt_wgs_dlong,
      Value<String> wpt_mvar,
      Value<String> nav1_wgs_lat,
      Value<String> nav1_wgs_dlat,
      Value<String> nav1_wgs_long,
      Value<String> nav1_wgs_dlong,
      Value<String> nav1_mvar,
      Value<String> nav1_dme_wgs_lat,
      Value<String> nav1_dme_wgs_dlat,
      Value<String> nav1_dme_wgs_long,
      Value<String> nav1_dme_wgs_dlong,
      Value<String> nav2_wgs_lat,
      Value<String> nav2_wgs_dlat,
      Value<String> nav2_wgs_long,
      Value<String> nav2_wgs_dlong,
      Value<String> nav2_mvar,
      Value<String> nav2_dime_wgs_lat,
      Value<String> nav2_dime_wgs_dlat,
      Value<String> nav2_dime_wgs_long,
      Value<String> nav2_dime_wgs_dlong,
      Value<String> speed,
      Value<String> speed_ac,
      Value<String> speed_alt,
      Value<String> speed_2,
      Value<String> speed_alt_2,
      Value<String> speed_ac_2,
      Value<String> vnav,
      Value<String> tch}) {
    return DafifTrmSegCompanion(
      id: id ?? this.id,
      arpt_ident: arpt_ident ?? this.arpt_ident,
      proc: proc ?? this.proc,
      trm_ident: trm_ident ?? this.trm_ident,
      seq_nbr: seq_nbr ?? this.seq_nbr,
      type: type ?? this.type,
      transition: transition ?? this.transition,
      icao: icao ?? this.icao,
      track_cd: track_cd ?? this.track_cd,
      wpt_id: wpt_id ?? this.wpt_id,
      wpt_ctry: wpt_ctry ?? this.wpt_ctry,
      wpt_desc1: wpt_desc1 ?? this.wpt_desc1,
      wpt_desc2: wpt_desc2 ?? this.wpt_desc2,
      wpt_desc3: wpt_desc3 ?? this.wpt_desc3,
      wpt_desc4: wpt_desc4 ?? this.wpt_desc4,
      turn_dir: turn_dir ?? this.turn_dir,
      nav1_ident: nav1_ident ?? this.nav1_ident,
      nav1_type: nav1_type ?? this.nav1_type,
      nav1_ctry: nav1_ctry ?? this.nav1_ctry,
      nav1_key_cd: nav1_key_cd ?? this.nav1_key_cd,
      nav1_bear: nav1_bear ?? this.nav1_bear,
      nav1_dist: nav1_dist ?? this.nav1_dist,
      nav2_ident: nav2_ident ?? this.nav2_ident,
      nav2_type: nav2_type ?? this.nav2_type,
      nav2_ctry: nav2_ctry ?? this.nav2_ctry,
      nav2_key_cd: nav2_key_cd ?? this.nav2_key_cd,
      nav2_bear: nav2_bear ?? this.nav2_bear,
      nav2_dist: nav2_dist ?? this.nav2_dist,
      mag_crs: mag_crs ?? this.mag_crs,
      distance: distance ?? this.distance,
      alt_desc: alt_desc ?? this.alt_desc,
      alt_one: alt_one ?? this.alt_one,
      alt_two: alt_two ?? this.alt_two,
      rnp: rnp ?? this.rnp,
      cycle_date: cycle_date ?? this.cycle_date,
      wpt_wgs_lat: wpt_wgs_lat ?? this.wpt_wgs_lat,
      wpt_wgs_dlat: wpt_wgs_dlat ?? this.wpt_wgs_dlat,
      wpt_wgs_long: wpt_wgs_long ?? this.wpt_wgs_long,
      wpt_wgs_dlong: wpt_wgs_dlong ?? this.wpt_wgs_dlong,
      wpt_mvar: wpt_mvar ?? this.wpt_mvar,
      nav1_wgs_lat: nav1_wgs_lat ?? this.nav1_wgs_lat,
      nav1_wgs_dlat: nav1_wgs_dlat ?? this.nav1_wgs_dlat,
      nav1_wgs_long: nav1_wgs_long ?? this.nav1_wgs_long,
      nav1_wgs_dlong: nav1_wgs_dlong ?? this.nav1_wgs_dlong,
      nav1_mvar: nav1_mvar ?? this.nav1_mvar,
      nav1_dme_wgs_lat: nav1_dme_wgs_lat ?? this.nav1_dme_wgs_lat,
      nav1_dme_wgs_dlat: nav1_dme_wgs_dlat ?? this.nav1_dme_wgs_dlat,
      nav1_dme_wgs_long: nav1_dme_wgs_long ?? this.nav1_dme_wgs_long,
      nav1_dme_wgs_dlong: nav1_dme_wgs_dlong ?? this.nav1_dme_wgs_dlong,
      nav2_wgs_lat: nav2_wgs_lat ?? this.nav2_wgs_lat,
      nav2_wgs_dlat: nav2_wgs_dlat ?? this.nav2_wgs_dlat,
      nav2_wgs_long: nav2_wgs_long ?? this.nav2_wgs_long,
      nav2_wgs_dlong: nav2_wgs_dlong ?? this.nav2_wgs_dlong,
      nav2_mvar: nav2_mvar ?? this.nav2_mvar,
      nav2_dime_wgs_lat: nav2_dime_wgs_lat ?? this.nav2_dime_wgs_lat,
      nav2_dime_wgs_dlat: nav2_dime_wgs_dlat ?? this.nav2_dime_wgs_dlat,
      nav2_dime_wgs_long: nav2_dime_wgs_long ?? this.nav2_dime_wgs_long,
      nav2_dime_wgs_dlong: nav2_dime_wgs_dlong ?? this.nav2_dime_wgs_dlong,
      speed: speed ?? this.speed,
      speed_ac: speed_ac ?? this.speed_ac,
      speed_alt: speed_alt ?? this.speed_alt,
      speed_2: speed_2 ?? this.speed_2,
      speed_alt_2: speed_alt_2 ?? this.speed_alt_2,
      speed_ac_2: speed_ac_2 ?? this.speed_ac_2,
      vnav: vnav ?? this.vnav,
      tch: tch ?? this.tch,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (arpt_ident.present) {
      map['arpt_ident'] = Variable<String>(arpt_ident.value);
    }
    if (proc.present) {
      map['proc'] = Variable<String>(proc.value);
    }
    if (trm_ident.present) {
      map['trm_ident'] = Variable<String>(trm_ident.value);
    }
    if (seq_nbr.present) {
      map['seq_nbr'] = Variable<String>(seq_nbr.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (transition.present) {
      map['transition'] = Variable<String>(transition.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (track_cd.present) {
      map['track_cd'] = Variable<String>(track_cd.value);
    }
    if (wpt_id.present) {
      map['wpt_id'] = Variable<String>(wpt_id.value);
    }
    if (wpt_ctry.present) {
      map['wpt_ctry'] = Variable<String>(wpt_ctry.value);
    }
    if (wpt_desc1.present) {
      map['wpt_desc1'] = Variable<String>(wpt_desc1.value);
    }
    if (wpt_desc2.present) {
      map['wpt_desc2'] = Variable<String>(wpt_desc2.value);
    }
    if (wpt_desc3.present) {
      map['wpt_desc3'] = Variable<String>(wpt_desc3.value);
    }
    if (wpt_desc4.present) {
      map['wpt_desc4'] = Variable<String>(wpt_desc4.value);
    }
    if (turn_dir.present) {
      map['turn_dir'] = Variable<String>(turn_dir.value);
    }
    if (nav1_ident.present) {
      map['nav1_ident'] = Variable<String>(nav1_ident.value);
    }
    if (nav1_type.present) {
      map['nav1_type'] = Variable<String>(nav1_type.value);
    }
    if (nav1_ctry.present) {
      map['nav1_ctry'] = Variable<String>(nav1_ctry.value);
    }
    if (nav1_key_cd.present) {
      map['nav1_key_cd'] = Variable<String>(nav1_key_cd.value);
    }
    if (nav1_bear.present) {
      map['nav1_bear'] = Variable<String>(nav1_bear.value);
    }
    if (nav1_dist.present) {
      map['nav1_dist'] = Variable<String>(nav1_dist.value);
    }
    if (nav2_ident.present) {
      map['nav2_ident'] = Variable<String>(nav2_ident.value);
    }
    if (nav2_type.present) {
      map['nav2_type'] = Variable<String>(nav2_type.value);
    }
    if (nav2_ctry.present) {
      map['nav2_ctry'] = Variable<String>(nav2_ctry.value);
    }
    if (nav2_key_cd.present) {
      map['nav2_key_cd'] = Variable<String>(nav2_key_cd.value);
    }
    if (nav2_bear.present) {
      map['nav2_bear'] = Variable<String>(nav2_bear.value);
    }
    if (nav2_dist.present) {
      map['nav2_dist'] = Variable<String>(nav2_dist.value);
    }
    if (mag_crs.present) {
      map['mag_crs'] = Variable<String>(mag_crs.value);
    }
    if (distance.present) {
      map['distance'] = Variable<String>(distance.value);
    }
    if (alt_desc.present) {
      map['alt_desc'] = Variable<String>(alt_desc.value);
    }
    if (alt_one.present) {
      map['alt_one'] = Variable<String>(alt_one.value);
    }
    if (alt_two.present) {
      map['alt_two'] = Variable<String>(alt_two.value);
    }
    if (rnp.present) {
      map['rnp'] = Variable<String>(rnp.value);
    }
    if (cycle_date.present) {
      map['cycle_date'] = Variable<String>(cycle_date.value);
    }
    if (wpt_wgs_lat.present) {
      map['wpt_wgs_lat'] = Variable<String>(wpt_wgs_lat.value);
    }
    if (wpt_wgs_dlat.present) {
      map['wpt_wgs_dlat'] = Variable<String>(wpt_wgs_dlat.value);
    }
    if (wpt_wgs_long.present) {
      map['wpt_wgs_long'] = Variable<String>(wpt_wgs_long.value);
    }
    if (wpt_wgs_dlong.present) {
      map['wpt_wgs_dlong'] = Variable<String>(wpt_wgs_dlong.value);
    }
    if (wpt_mvar.present) {
      map['wpt_mvar'] = Variable<String>(wpt_mvar.value);
    }
    if (nav1_wgs_lat.present) {
      map['nav1_wgs_lat'] = Variable<String>(nav1_wgs_lat.value);
    }
    if (nav1_wgs_dlat.present) {
      map['nav1_wgs_dlat'] = Variable<String>(nav1_wgs_dlat.value);
    }
    if (nav1_wgs_long.present) {
      map['nav1_wgs_long'] = Variable<String>(nav1_wgs_long.value);
    }
    if (nav1_wgs_dlong.present) {
      map['nav1_wgs_dlong'] = Variable<String>(nav1_wgs_dlong.value);
    }
    if (nav1_mvar.present) {
      map['nav1_mvar'] = Variable<String>(nav1_mvar.value);
    }
    if (nav1_dme_wgs_lat.present) {
      map['nav1_dme_wgs_lat'] = Variable<String>(nav1_dme_wgs_lat.value);
    }
    if (nav1_dme_wgs_dlat.present) {
      map['nav1_dme_wgs_dlat'] = Variable<String>(nav1_dme_wgs_dlat.value);
    }
    if (nav1_dme_wgs_long.present) {
      map['nav1_dme_wgs_long'] = Variable<String>(nav1_dme_wgs_long.value);
    }
    if (nav1_dme_wgs_dlong.present) {
      map['nav1_dme_wgs_dlong'] = Variable<String>(nav1_dme_wgs_dlong.value);
    }
    if (nav2_wgs_lat.present) {
      map['nav2_wgs_lat'] = Variable<String>(nav2_wgs_lat.value);
    }
    if (nav2_wgs_dlat.present) {
      map['nav2_wgs_dlat'] = Variable<String>(nav2_wgs_dlat.value);
    }
    if (nav2_wgs_long.present) {
      map['nav2_wgs_long'] = Variable<String>(nav2_wgs_long.value);
    }
    if (nav2_wgs_dlong.present) {
      map['nav2_wgs_dlong'] = Variable<String>(nav2_wgs_dlong.value);
    }
    if (nav2_mvar.present) {
      map['nav2_mvar'] = Variable<String>(nav2_mvar.value);
    }
    if (nav2_dime_wgs_lat.present) {
      map['nav2_dime_wgs_lat'] = Variable<String>(nav2_dime_wgs_lat.value);
    }
    if (nav2_dime_wgs_dlat.present) {
      map['nav2_dime_wgs_dlat'] = Variable<String>(nav2_dime_wgs_dlat.value);
    }
    if (nav2_dime_wgs_long.present) {
      map['nav2_dime_wgs_long'] = Variable<String>(nav2_dime_wgs_long.value);
    }
    if (nav2_dime_wgs_dlong.present) {
      map['nav2_dime_wgs_dlong'] = Variable<String>(nav2_dime_wgs_dlong.value);
    }
    if (speed.present) {
      map['speed'] = Variable<String>(speed.value);
    }
    if (speed_ac.present) {
      map['speed_ac'] = Variable<String>(speed_ac.value);
    }
    if (speed_alt.present) {
      map['speed_alt'] = Variable<String>(speed_alt.value);
    }
    if (speed_2.present) {
      map['speed_2'] = Variable<String>(speed_2.value);
    }
    if (speed_alt_2.present) {
      map['speed_alt_2'] = Variable<String>(speed_alt_2.value);
    }
    if (speed_ac_2.present) {
      map['speed_ac_2'] = Variable<String>(speed_ac_2.value);
    }
    if (vnav.present) {
      map['vnav'] = Variable<String>(vnav.value);
    }
    if (tch.present) {
      map['tch'] = Variable<String>(tch.value);
    }
    return map;
  }
}

class $DafifTrmSegTable extends DafifTrmSeg
    with TableInfo<$DafifTrmSegTable, dafif_trm_seg> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifTrmSegTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _arpt_identMeta = const VerificationMeta('arpt_ident');
  GeneratedTextColumn _arpt_ident;
  @override
  GeneratedTextColumn get arpt_ident => _arpt_ident ??= _constructArptIdent();
  GeneratedTextColumn _constructArptIdent() {
    return GeneratedTextColumn(
      'arpt_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _procMeta = const VerificationMeta('proc');
  GeneratedTextColumn _proc;
  @override
  GeneratedTextColumn get proc => _proc ??= _constructProc();
  GeneratedTextColumn _constructProc() {
    return GeneratedTextColumn(
      'proc',
      $tableName,
      true,
    );
  }

  final VerificationMeta _trm_identMeta = const VerificationMeta('trm_ident');
  GeneratedTextColumn _trm_ident;
  @override
  GeneratedTextColumn get trm_ident => _trm_ident ??= _constructTrmIdent();
  GeneratedTextColumn _constructTrmIdent() {
    return GeneratedTextColumn(
      'trm_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _seq_nbrMeta = const VerificationMeta('seq_nbr');
  GeneratedTextColumn _seq_nbr;
  @override
  GeneratedTextColumn get seq_nbr => _seq_nbr ??= _constructSeqNbr();
  GeneratedTextColumn _constructSeqNbr() {
    return GeneratedTextColumn(
      'seq_nbr',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _transitionMeta = const VerificationMeta('transition');
  GeneratedTextColumn _transition;
  @override
  GeneratedTextColumn get transition => _transition ??= _constructTransition();
  GeneratedTextColumn _constructTransition() {
    return GeneratedTextColumn(
      'transition',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _track_cdMeta = const VerificationMeta('track_cd');
  GeneratedTextColumn _track_cd;
  @override
  GeneratedTextColumn get track_cd => _track_cd ??= _constructTrackCd();
  GeneratedTextColumn _constructTrackCd() {
    return GeneratedTextColumn(
      'track_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_idMeta = const VerificationMeta('wpt_id');
  GeneratedTextColumn _wpt_id;
  @override
  GeneratedTextColumn get wpt_id => _wpt_id ??= _constructWptId();
  GeneratedTextColumn _constructWptId() {
    return GeneratedTextColumn(
      'wpt_id',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_ctryMeta = const VerificationMeta('wpt_ctry');
  GeneratedTextColumn _wpt_ctry;
  @override
  GeneratedTextColumn get wpt_ctry => _wpt_ctry ??= _constructWptCtry();
  GeneratedTextColumn _constructWptCtry() {
    return GeneratedTextColumn(
      'wpt_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_desc1Meta = const VerificationMeta('wpt_desc1');
  GeneratedTextColumn _wpt_desc1;
  @override
  GeneratedTextColumn get wpt_desc1 => _wpt_desc1 ??= _constructWptDesc1();
  GeneratedTextColumn _constructWptDesc1() {
    return GeneratedTextColumn(
      'wpt_desc1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_desc2Meta = const VerificationMeta('wpt_desc2');
  GeneratedTextColumn _wpt_desc2;
  @override
  GeneratedTextColumn get wpt_desc2 => _wpt_desc2 ??= _constructWptDesc2();
  GeneratedTextColumn _constructWptDesc2() {
    return GeneratedTextColumn(
      'wpt_desc2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_desc3Meta = const VerificationMeta('wpt_desc3');
  GeneratedTextColumn _wpt_desc3;
  @override
  GeneratedTextColumn get wpt_desc3 => _wpt_desc3 ??= _constructWptDesc3();
  GeneratedTextColumn _constructWptDesc3() {
    return GeneratedTextColumn(
      'wpt_desc3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_desc4Meta = const VerificationMeta('wpt_desc4');
  GeneratedTextColumn _wpt_desc4;
  @override
  GeneratedTextColumn get wpt_desc4 => _wpt_desc4 ??= _constructWptDesc4();
  GeneratedTextColumn _constructWptDesc4() {
    return GeneratedTextColumn(
      'wpt_desc4',
      $tableName,
      true,
    );
  }

  final VerificationMeta _turn_dirMeta = const VerificationMeta('turn_dir');
  GeneratedTextColumn _turn_dir;
  @override
  GeneratedTextColumn get turn_dir => _turn_dir ??= _constructTurnDir();
  GeneratedTextColumn _constructTurnDir() {
    return GeneratedTextColumn(
      'turn_dir',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_identMeta = const VerificationMeta('nav1_ident');
  GeneratedTextColumn _nav1_ident;
  @override
  GeneratedTextColumn get nav1_ident => _nav1_ident ??= _constructNav1Ident();
  GeneratedTextColumn _constructNav1Ident() {
    return GeneratedTextColumn(
      'nav1_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_typeMeta = const VerificationMeta('nav1_type');
  GeneratedTextColumn _nav1_type;
  @override
  GeneratedTextColumn get nav1_type => _nav1_type ??= _constructNav1Type();
  GeneratedTextColumn _constructNav1Type() {
    return GeneratedTextColumn(
      'nav1_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_ctryMeta = const VerificationMeta('nav1_ctry');
  GeneratedTextColumn _nav1_ctry;
  @override
  GeneratedTextColumn get nav1_ctry => _nav1_ctry ??= _constructNav1Ctry();
  GeneratedTextColumn _constructNav1Ctry() {
    return GeneratedTextColumn(
      'nav1_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_key_cdMeta =
      const VerificationMeta('nav1_key_cd');
  GeneratedTextColumn _nav1_key_cd;
  @override
  GeneratedTextColumn get nav1_key_cd => _nav1_key_cd ??= _constructNav1KeyCd();
  GeneratedTextColumn _constructNav1KeyCd() {
    return GeneratedTextColumn(
      'nav1_key_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_bearMeta = const VerificationMeta('nav1_bear');
  GeneratedTextColumn _nav1_bear;
  @override
  GeneratedTextColumn get nav1_bear => _nav1_bear ??= _constructNav1Bear();
  GeneratedTextColumn _constructNav1Bear() {
    return GeneratedTextColumn(
      'nav1_bear',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_distMeta = const VerificationMeta('nav1_dist');
  GeneratedTextColumn _nav1_dist;
  @override
  GeneratedTextColumn get nav1_dist => _nav1_dist ??= _constructNav1Dist();
  GeneratedTextColumn _constructNav1Dist() {
    return GeneratedTextColumn(
      'nav1_dist',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_identMeta = const VerificationMeta('nav2_ident');
  GeneratedTextColumn _nav2_ident;
  @override
  GeneratedTextColumn get nav2_ident => _nav2_ident ??= _constructNav2Ident();
  GeneratedTextColumn _constructNav2Ident() {
    return GeneratedTextColumn(
      'nav2_ident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_typeMeta = const VerificationMeta('nav2_type');
  GeneratedTextColumn _nav2_type;
  @override
  GeneratedTextColumn get nav2_type => _nav2_type ??= _constructNav2Type();
  GeneratedTextColumn _constructNav2Type() {
    return GeneratedTextColumn(
      'nav2_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_ctryMeta = const VerificationMeta('nav2_ctry');
  GeneratedTextColumn _nav2_ctry;
  @override
  GeneratedTextColumn get nav2_ctry => _nav2_ctry ??= _constructNav2Ctry();
  GeneratedTextColumn _constructNav2Ctry() {
    return GeneratedTextColumn(
      'nav2_ctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_key_cdMeta =
      const VerificationMeta('nav2_key_cd');
  GeneratedTextColumn _nav2_key_cd;
  @override
  GeneratedTextColumn get nav2_key_cd => _nav2_key_cd ??= _constructNav2KeyCd();
  GeneratedTextColumn _constructNav2KeyCd() {
    return GeneratedTextColumn(
      'nav2_key_cd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_bearMeta = const VerificationMeta('nav2_bear');
  GeneratedTextColumn _nav2_bear;
  @override
  GeneratedTextColumn get nav2_bear => _nav2_bear ??= _constructNav2Bear();
  GeneratedTextColumn _constructNav2Bear() {
    return GeneratedTextColumn(
      'nav2_bear',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_distMeta = const VerificationMeta('nav2_dist');
  GeneratedTextColumn _nav2_dist;
  @override
  GeneratedTextColumn get nav2_dist => _nav2_dist ??= _constructNav2Dist();
  GeneratedTextColumn _constructNav2Dist() {
    return GeneratedTextColumn(
      'nav2_dist',
      $tableName,
      true,
    );
  }

  final VerificationMeta _mag_crsMeta = const VerificationMeta('mag_crs');
  GeneratedTextColumn _mag_crs;
  @override
  GeneratedTextColumn get mag_crs => _mag_crs ??= _constructMagCrs();
  GeneratedTextColumn _constructMagCrs() {
    return GeneratedTextColumn(
      'mag_crs',
      $tableName,
      true,
    );
  }

  final VerificationMeta _distanceMeta = const VerificationMeta('distance');
  GeneratedTextColumn _distance;
  @override
  GeneratedTextColumn get distance => _distance ??= _constructDistance();
  GeneratedTextColumn _constructDistance() {
    return GeneratedTextColumn(
      'distance',
      $tableName,
      true,
    );
  }

  final VerificationMeta _alt_descMeta = const VerificationMeta('alt_desc');
  GeneratedTextColumn _alt_desc;
  @override
  GeneratedTextColumn get alt_desc => _alt_desc ??= _constructAltDesc();
  GeneratedTextColumn _constructAltDesc() {
    return GeneratedTextColumn(
      'alt_desc',
      $tableName,
      true,
    );
  }

  final VerificationMeta _alt_oneMeta = const VerificationMeta('alt_one');
  GeneratedTextColumn _alt_one;
  @override
  GeneratedTextColumn get alt_one => _alt_one ??= _constructAltOne();
  GeneratedTextColumn _constructAltOne() {
    return GeneratedTextColumn(
      'alt_one',
      $tableName,
      true,
    );
  }

  final VerificationMeta _alt_twoMeta = const VerificationMeta('alt_two');
  GeneratedTextColumn _alt_two;
  @override
  GeneratedTextColumn get alt_two => _alt_two ??= _constructAltTwo();
  GeneratedTextColumn _constructAltTwo() {
    return GeneratedTextColumn(
      'alt_two',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rnpMeta = const VerificationMeta('rnp');
  GeneratedTextColumn _rnp;
  @override
  GeneratedTextColumn get rnp => _rnp ??= _constructRnp();
  GeneratedTextColumn _constructRnp() {
    return GeneratedTextColumn(
      'rnp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycle_dateMeta = const VerificationMeta('cycle_date');
  GeneratedTextColumn _cycle_date;
  @override
  GeneratedTextColumn get cycle_date => _cycle_date ??= _constructCycleDate();
  GeneratedTextColumn _constructCycleDate() {
    return GeneratedTextColumn(
      'cycle_date',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_wgs_latMeta =
      const VerificationMeta('wpt_wgs_lat');
  GeneratedTextColumn _wpt_wgs_lat;
  @override
  GeneratedTextColumn get wpt_wgs_lat => _wpt_wgs_lat ??= _constructWptWgsLat();
  GeneratedTextColumn _constructWptWgsLat() {
    return GeneratedTextColumn(
      'wpt_wgs_lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_wgs_dlatMeta =
      const VerificationMeta('wpt_wgs_dlat');
  GeneratedTextColumn _wpt_wgs_dlat;
  @override
  GeneratedTextColumn get wpt_wgs_dlat =>
      _wpt_wgs_dlat ??= _constructWptWgsDlat();
  GeneratedTextColumn _constructWptWgsDlat() {
    return GeneratedTextColumn(
      'wpt_wgs_dlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_wgs_longMeta =
      const VerificationMeta('wpt_wgs_long');
  GeneratedTextColumn _wpt_wgs_long;
  @override
  GeneratedTextColumn get wpt_wgs_long =>
      _wpt_wgs_long ??= _constructWptWgsLong();
  GeneratedTextColumn _constructWptWgsLong() {
    return GeneratedTextColumn(
      'wpt_wgs_long',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_wgs_dlongMeta =
      const VerificationMeta('wpt_wgs_dlong');
  GeneratedTextColumn _wpt_wgs_dlong;
  @override
  GeneratedTextColumn get wpt_wgs_dlong =>
      _wpt_wgs_dlong ??= _constructWptWgsDlong();
  GeneratedTextColumn _constructWptWgsDlong() {
    return GeneratedTextColumn(
      'wpt_wgs_dlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wpt_mvarMeta = const VerificationMeta('wpt_mvar');
  GeneratedTextColumn _wpt_mvar;
  @override
  GeneratedTextColumn get wpt_mvar => _wpt_mvar ??= _constructWptMvar();
  GeneratedTextColumn _constructWptMvar() {
    return GeneratedTextColumn(
      'wpt_mvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_wgs_latMeta =
      const VerificationMeta('nav1_wgs_lat');
  GeneratedTextColumn _nav1_wgs_lat;
  @override
  GeneratedTextColumn get nav1_wgs_lat =>
      _nav1_wgs_lat ??= _constructNav1WgsLat();
  GeneratedTextColumn _constructNav1WgsLat() {
    return GeneratedTextColumn(
      'nav1_wgs_lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_wgs_dlatMeta =
      const VerificationMeta('nav1_wgs_dlat');
  GeneratedTextColumn _nav1_wgs_dlat;
  @override
  GeneratedTextColumn get nav1_wgs_dlat =>
      _nav1_wgs_dlat ??= _constructNav1WgsDlat();
  GeneratedTextColumn _constructNav1WgsDlat() {
    return GeneratedTextColumn(
      'nav1_wgs_dlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_wgs_longMeta =
      const VerificationMeta('nav1_wgs_long');
  GeneratedTextColumn _nav1_wgs_long;
  @override
  GeneratedTextColumn get nav1_wgs_long =>
      _nav1_wgs_long ??= _constructNav1WgsLong();
  GeneratedTextColumn _constructNav1WgsLong() {
    return GeneratedTextColumn(
      'nav1_wgs_long',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_wgs_dlongMeta =
      const VerificationMeta('nav1_wgs_dlong');
  GeneratedTextColumn _nav1_wgs_dlong;
  @override
  GeneratedTextColumn get nav1_wgs_dlong =>
      _nav1_wgs_dlong ??= _constructNav1WgsDlong();
  GeneratedTextColumn _constructNav1WgsDlong() {
    return GeneratedTextColumn(
      'nav1_wgs_dlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_mvarMeta = const VerificationMeta('nav1_mvar');
  GeneratedTextColumn _nav1_mvar;
  @override
  GeneratedTextColumn get nav1_mvar => _nav1_mvar ??= _constructNav1Mvar();
  GeneratedTextColumn _constructNav1Mvar() {
    return GeneratedTextColumn(
      'nav1_mvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_dme_wgs_latMeta =
      const VerificationMeta('nav1_dme_wgs_lat');
  GeneratedTextColumn _nav1_dme_wgs_lat;
  @override
  GeneratedTextColumn get nav1_dme_wgs_lat =>
      _nav1_dme_wgs_lat ??= _constructNav1DmeWgsLat();
  GeneratedTextColumn _constructNav1DmeWgsLat() {
    return GeneratedTextColumn(
      'nav1_dme_wgs_lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_dme_wgs_dlatMeta =
      const VerificationMeta('nav1_dme_wgs_dlat');
  GeneratedTextColumn _nav1_dme_wgs_dlat;
  @override
  GeneratedTextColumn get nav1_dme_wgs_dlat =>
      _nav1_dme_wgs_dlat ??= _constructNav1DmeWgsDlat();
  GeneratedTextColumn _constructNav1DmeWgsDlat() {
    return GeneratedTextColumn(
      'nav1_dme_wgs_dlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_dme_wgs_longMeta =
      const VerificationMeta('nav1_dme_wgs_long');
  GeneratedTextColumn _nav1_dme_wgs_long;
  @override
  GeneratedTextColumn get nav1_dme_wgs_long =>
      _nav1_dme_wgs_long ??= _constructNav1DmeWgsLong();
  GeneratedTextColumn _constructNav1DmeWgsLong() {
    return GeneratedTextColumn(
      'nav1_dme_wgs_long',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav1_dme_wgs_dlongMeta =
      const VerificationMeta('nav1_dme_wgs_dlong');
  GeneratedTextColumn _nav1_dme_wgs_dlong;
  @override
  GeneratedTextColumn get nav1_dme_wgs_dlong =>
      _nav1_dme_wgs_dlong ??= _constructNav1DmeWgsDlong();
  GeneratedTextColumn _constructNav1DmeWgsDlong() {
    return GeneratedTextColumn(
      'nav1_dme_wgs_dlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_wgs_latMeta =
      const VerificationMeta('nav2_wgs_lat');
  GeneratedTextColumn _nav2_wgs_lat;
  @override
  GeneratedTextColumn get nav2_wgs_lat =>
      _nav2_wgs_lat ??= _constructNav2WgsLat();
  GeneratedTextColumn _constructNav2WgsLat() {
    return GeneratedTextColumn(
      'nav2_wgs_lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_wgs_dlatMeta =
      const VerificationMeta('nav2_wgs_dlat');
  GeneratedTextColumn _nav2_wgs_dlat;
  @override
  GeneratedTextColumn get nav2_wgs_dlat =>
      _nav2_wgs_dlat ??= _constructNav2WgsDlat();
  GeneratedTextColumn _constructNav2WgsDlat() {
    return GeneratedTextColumn(
      'nav2_wgs_dlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_wgs_longMeta =
      const VerificationMeta('nav2_wgs_long');
  GeneratedTextColumn _nav2_wgs_long;
  @override
  GeneratedTextColumn get nav2_wgs_long =>
      _nav2_wgs_long ??= _constructNav2WgsLong();
  GeneratedTextColumn _constructNav2WgsLong() {
    return GeneratedTextColumn(
      'nav2_wgs_long',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_wgs_dlongMeta =
      const VerificationMeta('nav2_wgs_dlong');
  GeneratedTextColumn _nav2_wgs_dlong;
  @override
  GeneratedTextColumn get nav2_wgs_dlong =>
      _nav2_wgs_dlong ??= _constructNav2WgsDlong();
  GeneratedTextColumn _constructNav2WgsDlong() {
    return GeneratedTextColumn(
      'nav2_wgs_dlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_mvarMeta = const VerificationMeta('nav2_mvar');
  GeneratedTextColumn _nav2_mvar;
  @override
  GeneratedTextColumn get nav2_mvar => _nav2_mvar ??= _constructNav2Mvar();
  GeneratedTextColumn _constructNav2Mvar() {
    return GeneratedTextColumn(
      'nav2_mvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_dime_wgs_latMeta =
      const VerificationMeta('nav2_dime_wgs_lat');
  GeneratedTextColumn _nav2_dime_wgs_lat;
  @override
  GeneratedTextColumn get nav2_dime_wgs_lat =>
      _nav2_dime_wgs_lat ??= _constructNav2DimeWgsLat();
  GeneratedTextColumn _constructNav2DimeWgsLat() {
    return GeneratedTextColumn(
      'nav2_dime_wgs_lat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_dime_wgs_dlatMeta =
      const VerificationMeta('nav2_dime_wgs_dlat');
  GeneratedTextColumn _nav2_dime_wgs_dlat;
  @override
  GeneratedTextColumn get nav2_dime_wgs_dlat =>
      _nav2_dime_wgs_dlat ??= _constructNav2DimeWgsDlat();
  GeneratedTextColumn _constructNav2DimeWgsDlat() {
    return GeneratedTextColumn(
      'nav2_dime_wgs_dlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_dime_wgs_longMeta =
      const VerificationMeta('nav2_dime_wgs_long');
  GeneratedTextColumn _nav2_dime_wgs_long;
  @override
  GeneratedTextColumn get nav2_dime_wgs_long =>
      _nav2_dime_wgs_long ??= _constructNav2DimeWgsLong();
  GeneratedTextColumn _constructNav2DimeWgsLong() {
    return GeneratedTextColumn(
      'nav2_dime_wgs_long',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nav2_dime_wgs_dlongMeta =
      const VerificationMeta('nav2_dime_wgs_dlong');
  GeneratedTextColumn _nav2_dime_wgs_dlong;
  @override
  GeneratedTextColumn get nav2_dime_wgs_dlong =>
      _nav2_dime_wgs_dlong ??= _constructNav2DimeWgsDlong();
  GeneratedTextColumn _constructNav2DimeWgsDlong() {
    return GeneratedTextColumn(
      'nav2_dime_wgs_dlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speedMeta = const VerificationMeta('speed');
  GeneratedTextColumn _speed;
  @override
  GeneratedTextColumn get speed => _speed ??= _constructSpeed();
  GeneratedTextColumn _constructSpeed() {
    return GeneratedTextColumn(
      'speed',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speed_acMeta = const VerificationMeta('speed_ac');
  GeneratedTextColumn _speed_ac;
  @override
  GeneratedTextColumn get speed_ac => _speed_ac ??= _constructSpeedAc();
  GeneratedTextColumn _constructSpeedAc() {
    return GeneratedTextColumn(
      'speed_ac',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speed_altMeta = const VerificationMeta('speed_alt');
  GeneratedTextColumn _speed_alt;
  @override
  GeneratedTextColumn get speed_alt => _speed_alt ??= _constructSpeedAlt();
  GeneratedTextColumn _constructSpeedAlt() {
    return GeneratedTextColumn(
      'speed_alt',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speed_2Meta = const VerificationMeta('speed_2');
  GeneratedTextColumn _speed_2;
  @override
  GeneratedTextColumn get speed_2 => _speed_2 ??= _constructSpeed2();
  GeneratedTextColumn _constructSpeed2() {
    return GeneratedTextColumn(
      'speed_2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speed_alt_2Meta =
      const VerificationMeta('speed_alt_2');
  GeneratedTextColumn _speed_alt_2;
  @override
  GeneratedTextColumn get speed_alt_2 => _speed_alt_2 ??= _constructSpeedAlt2();
  GeneratedTextColumn _constructSpeedAlt2() {
    return GeneratedTextColumn(
      'speed_alt_2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _speed_ac_2Meta = const VerificationMeta('speed_ac_2');
  GeneratedTextColumn _speed_ac_2;
  @override
  GeneratedTextColumn get speed_ac_2 => _speed_ac_2 ??= _constructSpeedAc2();
  GeneratedTextColumn _constructSpeedAc2() {
    return GeneratedTextColumn(
      'speed_ac_2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _vnavMeta = const VerificationMeta('vnav');
  GeneratedTextColumn _vnav;
  @override
  GeneratedTextColumn get vnav => _vnav ??= _constructVnav();
  GeneratedTextColumn _constructVnav() {
    return GeneratedTextColumn(
      'vnav',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tchMeta = const VerificationMeta('tch');
  GeneratedTextColumn _tch;
  @override
  GeneratedTextColumn get tch => _tch ??= _constructTch();
  GeneratedTextColumn _constructTch() {
    return GeneratedTextColumn(
      'tch',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        arpt_ident,
        proc,
        trm_ident,
        seq_nbr,
        type,
        transition,
        icao,
        track_cd,
        wpt_id,
        wpt_ctry,
        wpt_desc1,
        wpt_desc2,
        wpt_desc3,
        wpt_desc4,
        turn_dir,
        nav1_ident,
        nav1_type,
        nav1_ctry,
        nav1_key_cd,
        nav1_bear,
        nav1_dist,
        nav2_ident,
        nav2_type,
        nav2_ctry,
        nav2_key_cd,
        nav2_bear,
        nav2_dist,
        mag_crs,
        distance,
        alt_desc,
        alt_one,
        alt_two,
        rnp,
        cycle_date,
        wpt_wgs_lat,
        wpt_wgs_dlat,
        wpt_wgs_long,
        wpt_wgs_dlong,
        wpt_mvar,
        nav1_wgs_lat,
        nav1_wgs_dlat,
        nav1_wgs_long,
        nav1_wgs_dlong,
        nav1_mvar,
        nav1_dme_wgs_lat,
        nav1_dme_wgs_dlat,
        nav1_dme_wgs_long,
        nav1_dme_wgs_dlong,
        nav2_wgs_lat,
        nav2_wgs_dlat,
        nav2_wgs_long,
        nav2_wgs_dlong,
        nav2_mvar,
        nav2_dime_wgs_lat,
        nav2_dime_wgs_dlat,
        nav2_dime_wgs_long,
        nav2_dime_wgs_dlong,
        speed,
        speed_ac,
        speed_alt,
        speed_2,
        speed_alt_2,
        speed_ac_2,
        vnav,
        tch
      ];
  @override
  $DafifTrmSegTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_trm_seg';
  @override
  final String actualTableName = 'dafif_trm_seg';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_trm_seg> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('arpt_ident')) {
      context.handle(
          _arpt_identMeta,
          arpt_ident.isAcceptableOrUnknown(
              data['arpt_ident'], _arpt_identMeta));
    }
    if (data.containsKey('proc')) {
      context.handle(
          _procMeta, proc.isAcceptableOrUnknown(data['proc'], _procMeta));
    }
    if (data.containsKey('trm_ident')) {
      context.handle(_trm_identMeta,
          trm_ident.isAcceptableOrUnknown(data['trm_ident'], _trm_identMeta));
    }
    if (data.containsKey('seq_nbr')) {
      context.handle(_seq_nbrMeta,
          seq_nbr.isAcceptableOrUnknown(data['seq_nbr'], _seq_nbrMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('transition')) {
      context.handle(
          _transitionMeta,
          transition.isAcceptableOrUnknown(
              data['transition'], _transitionMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('track_cd')) {
      context.handle(_track_cdMeta,
          track_cd.isAcceptableOrUnknown(data['track_cd'], _track_cdMeta));
    }
    if (data.containsKey('wpt_id')) {
      context.handle(_wpt_idMeta,
          wpt_id.isAcceptableOrUnknown(data['wpt_id'], _wpt_idMeta));
    }
    if (data.containsKey('wpt_ctry')) {
      context.handle(_wpt_ctryMeta,
          wpt_ctry.isAcceptableOrUnknown(data['wpt_ctry'], _wpt_ctryMeta));
    }
    if (data.containsKey('wpt_desc1')) {
      context.handle(_wpt_desc1Meta,
          wpt_desc1.isAcceptableOrUnknown(data['wpt_desc1'], _wpt_desc1Meta));
    }
    if (data.containsKey('wpt_desc2')) {
      context.handle(_wpt_desc2Meta,
          wpt_desc2.isAcceptableOrUnknown(data['wpt_desc2'], _wpt_desc2Meta));
    }
    if (data.containsKey('wpt_desc3')) {
      context.handle(_wpt_desc3Meta,
          wpt_desc3.isAcceptableOrUnknown(data['wpt_desc3'], _wpt_desc3Meta));
    }
    if (data.containsKey('wpt_desc4')) {
      context.handle(_wpt_desc4Meta,
          wpt_desc4.isAcceptableOrUnknown(data['wpt_desc4'], _wpt_desc4Meta));
    }
    if (data.containsKey('turn_dir')) {
      context.handle(_turn_dirMeta,
          turn_dir.isAcceptableOrUnknown(data['turn_dir'], _turn_dirMeta));
    }
    if (data.containsKey('nav1_ident')) {
      context.handle(
          _nav1_identMeta,
          nav1_ident.isAcceptableOrUnknown(
              data['nav1_ident'], _nav1_identMeta));
    }
    if (data.containsKey('nav1_type')) {
      context.handle(_nav1_typeMeta,
          nav1_type.isAcceptableOrUnknown(data['nav1_type'], _nav1_typeMeta));
    }
    if (data.containsKey('nav1_ctry')) {
      context.handle(_nav1_ctryMeta,
          nav1_ctry.isAcceptableOrUnknown(data['nav1_ctry'], _nav1_ctryMeta));
    }
    if (data.containsKey('nav1_key_cd')) {
      context.handle(
          _nav1_key_cdMeta,
          nav1_key_cd.isAcceptableOrUnknown(
              data['nav1_key_cd'], _nav1_key_cdMeta));
    }
    if (data.containsKey('nav1_bear')) {
      context.handle(_nav1_bearMeta,
          nav1_bear.isAcceptableOrUnknown(data['nav1_bear'], _nav1_bearMeta));
    }
    if (data.containsKey('nav1_dist')) {
      context.handle(_nav1_distMeta,
          nav1_dist.isAcceptableOrUnknown(data['nav1_dist'], _nav1_distMeta));
    }
    if (data.containsKey('nav2_ident')) {
      context.handle(
          _nav2_identMeta,
          nav2_ident.isAcceptableOrUnknown(
              data['nav2_ident'], _nav2_identMeta));
    }
    if (data.containsKey('nav2_type')) {
      context.handle(_nav2_typeMeta,
          nav2_type.isAcceptableOrUnknown(data['nav2_type'], _nav2_typeMeta));
    }
    if (data.containsKey('nav2_ctry')) {
      context.handle(_nav2_ctryMeta,
          nav2_ctry.isAcceptableOrUnknown(data['nav2_ctry'], _nav2_ctryMeta));
    }
    if (data.containsKey('nav2_key_cd')) {
      context.handle(
          _nav2_key_cdMeta,
          nav2_key_cd.isAcceptableOrUnknown(
              data['nav2_key_cd'], _nav2_key_cdMeta));
    }
    if (data.containsKey('nav2_bear')) {
      context.handle(_nav2_bearMeta,
          nav2_bear.isAcceptableOrUnknown(data['nav2_bear'], _nav2_bearMeta));
    }
    if (data.containsKey('nav2_dist')) {
      context.handle(_nav2_distMeta,
          nav2_dist.isAcceptableOrUnknown(data['nav2_dist'], _nav2_distMeta));
    }
    if (data.containsKey('mag_crs')) {
      context.handle(_mag_crsMeta,
          mag_crs.isAcceptableOrUnknown(data['mag_crs'], _mag_crsMeta));
    }
    if (data.containsKey('distance')) {
      context.handle(_distanceMeta,
          distance.isAcceptableOrUnknown(data['distance'], _distanceMeta));
    }
    if (data.containsKey('alt_desc')) {
      context.handle(_alt_descMeta,
          alt_desc.isAcceptableOrUnknown(data['alt_desc'], _alt_descMeta));
    }
    if (data.containsKey('alt_one')) {
      context.handle(_alt_oneMeta,
          alt_one.isAcceptableOrUnknown(data['alt_one'], _alt_oneMeta));
    }
    if (data.containsKey('alt_two')) {
      context.handle(_alt_twoMeta,
          alt_two.isAcceptableOrUnknown(data['alt_two'], _alt_twoMeta));
    }
    if (data.containsKey('rnp')) {
      context.handle(
          _rnpMeta, rnp.isAcceptableOrUnknown(data['rnp'], _rnpMeta));
    }
    if (data.containsKey('cycle_date')) {
      context.handle(
          _cycle_dateMeta,
          cycle_date.isAcceptableOrUnknown(
              data['cycle_date'], _cycle_dateMeta));
    }
    if (data.containsKey('wpt_wgs_lat')) {
      context.handle(
          _wpt_wgs_latMeta,
          wpt_wgs_lat.isAcceptableOrUnknown(
              data['wpt_wgs_lat'], _wpt_wgs_latMeta));
    }
    if (data.containsKey('wpt_wgs_dlat')) {
      context.handle(
          _wpt_wgs_dlatMeta,
          wpt_wgs_dlat.isAcceptableOrUnknown(
              data['wpt_wgs_dlat'], _wpt_wgs_dlatMeta));
    }
    if (data.containsKey('wpt_wgs_long')) {
      context.handle(
          _wpt_wgs_longMeta,
          wpt_wgs_long.isAcceptableOrUnknown(
              data['wpt_wgs_long'], _wpt_wgs_longMeta));
    }
    if (data.containsKey('wpt_wgs_dlong')) {
      context.handle(
          _wpt_wgs_dlongMeta,
          wpt_wgs_dlong.isAcceptableOrUnknown(
              data['wpt_wgs_dlong'], _wpt_wgs_dlongMeta));
    }
    if (data.containsKey('wpt_mvar')) {
      context.handle(_wpt_mvarMeta,
          wpt_mvar.isAcceptableOrUnknown(data['wpt_mvar'], _wpt_mvarMeta));
    }
    if (data.containsKey('nav1_wgs_lat')) {
      context.handle(
          _nav1_wgs_latMeta,
          nav1_wgs_lat.isAcceptableOrUnknown(
              data['nav1_wgs_lat'], _nav1_wgs_latMeta));
    }
    if (data.containsKey('nav1_wgs_dlat')) {
      context.handle(
          _nav1_wgs_dlatMeta,
          nav1_wgs_dlat.isAcceptableOrUnknown(
              data['nav1_wgs_dlat'], _nav1_wgs_dlatMeta));
    }
    if (data.containsKey('nav1_wgs_long')) {
      context.handle(
          _nav1_wgs_longMeta,
          nav1_wgs_long.isAcceptableOrUnknown(
              data['nav1_wgs_long'], _nav1_wgs_longMeta));
    }
    if (data.containsKey('nav1_wgs_dlong')) {
      context.handle(
          _nav1_wgs_dlongMeta,
          nav1_wgs_dlong.isAcceptableOrUnknown(
              data['nav1_wgs_dlong'], _nav1_wgs_dlongMeta));
    }
    if (data.containsKey('nav1_mvar')) {
      context.handle(_nav1_mvarMeta,
          nav1_mvar.isAcceptableOrUnknown(data['nav1_mvar'], _nav1_mvarMeta));
    }
    if (data.containsKey('nav1_dme_wgs_lat')) {
      context.handle(
          _nav1_dme_wgs_latMeta,
          nav1_dme_wgs_lat.isAcceptableOrUnknown(
              data['nav1_dme_wgs_lat'], _nav1_dme_wgs_latMeta));
    }
    if (data.containsKey('nav1_dme_wgs_dlat')) {
      context.handle(
          _nav1_dme_wgs_dlatMeta,
          nav1_dme_wgs_dlat.isAcceptableOrUnknown(
              data['nav1_dme_wgs_dlat'], _nav1_dme_wgs_dlatMeta));
    }
    if (data.containsKey('nav1_dme_wgs_long')) {
      context.handle(
          _nav1_dme_wgs_longMeta,
          nav1_dme_wgs_long.isAcceptableOrUnknown(
              data['nav1_dme_wgs_long'], _nav1_dme_wgs_longMeta));
    }
    if (data.containsKey('nav1_dme_wgs_dlong')) {
      context.handle(
          _nav1_dme_wgs_dlongMeta,
          nav1_dme_wgs_dlong.isAcceptableOrUnknown(
              data['nav1_dme_wgs_dlong'], _nav1_dme_wgs_dlongMeta));
    }
    if (data.containsKey('nav2_wgs_lat')) {
      context.handle(
          _nav2_wgs_latMeta,
          nav2_wgs_lat.isAcceptableOrUnknown(
              data['nav2_wgs_lat'], _nav2_wgs_latMeta));
    }
    if (data.containsKey('nav2_wgs_dlat')) {
      context.handle(
          _nav2_wgs_dlatMeta,
          nav2_wgs_dlat.isAcceptableOrUnknown(
              data['nav2_wgs_dlat'], _nav2_wgs_dlatMeta));
    }
    if (data.containsKey('nav2_wgs_long')) {
      context.handle(
          _nav2_wgs_longMeta,
          nav2_wgs_long.isAcceptableOrUnknown(
              data['nav2_wgs_long'], _nav2_wgs_longMeta));
    }
    if (data.containsKey('nav2_wgs_dlong')) {
      context.handle(
          _nav2_wgs_dlongMeta,
          nav2_wgs_dlong.isAcceptableOrUnknown(
              data['nav2_wgs_dlong'], _nav2_wgs_dlongMeta));
    }
    if (data.containsKey('nav2_mvar')) {
      context.handle(_nav2_mvarMeta,
          nav2_mvar.isAcceptableOrUnknown(data['nav2_mvar'], _nav2_mvarMeta));
    }
    if (data.containsKey('nav2_dime_wgs_lat')) {
      context.handle(
          _nav2_dime_wgs_latMeta,
          nav2_dime_wgs_lat.isAcceptableOrUnknown(
              data['nav2_dime_wgs_lat'], _nav2_dime_wgs_latMeta));
    }
    if (data.containsKey('nav2_dime_wgs_dlat')) {
      context.handle(
          _nav2_dime_wgs_dlatMeta,
          nav2_dime_wgs_dlat.isAcceptableOrUnknown(
              data['nav2_dime_wgs_dlat'], _nav2_dime_wgs_dlatMeta));
    }
    if (data.containsKey('nav2_dime_wgs_long')) {
      context.handle(
          _nav2_dime_wgs_longMeta,
          nav2_dime_wgs_long.isAcceptableOrUnknown(
              data['nav2_dime_wgs_long'], _nav2_dime_wgs_longMeta));
    }
    if (data.containsKey('nav2_dime_wgs_dlong')) {
      context.handle(
          _nav2_dime_wgs_dlongMeta,
          nav2_dime_wgs_dlong.isAcceptableOrUnknown(
              data['nav2_dime_wgs_dlong'], _nav2_dime_wgs_dlongMeta));
    }
    if (data.containsKey('speed')) {
      context.handle(
          _speedMeta, speed.isAcceptableOrUnknown(data['speed'], _speedMeta));
    }
    if (data.containsKey('speed_ac')) {
      context.handle(_speed_acMeta,
          speed_ac.isAcceptableOrUnknown(data['speed_ac'], _speed_acMeta));
    }
    if (data.containsKey('speed_alt')) {
      context.handle(_speed_altMeta,
          speed_alt.isAcceptableOrUnknown(data['speed_alt'], _speed_altMeta));
    }
    if (data.containsKey('speed_2')) {
      context.handle(_speed_2Meta,
          speed_2.isAcceptableOrUnknown(data['speed_2'], _speed_2Meta));
    }
    if (data.containsKey('speed_alt_2')) {
      context.handle(
          _speed_alt_2Meta,
          speed_alt_2.isAcceptableOrUnknown(
              data['speed_alt_2'], _speed_alt_2Meta));
    }
    if (data.containsKey('speed_ac_2')) {
      context.handle(
          _speed_ac_2Meta,
          speed_ac_2.isAcceptableOrUnknown(
              data['speed_ac_2'], _speed_ac_2Meta));
    }
    if (data.containsKey('vnav')) {
      context.handle(
          _vnavMeta, vnav.isAcceptableOrUnknown(data['vnav'], _vnavMeta));
    }
    if (data.containsKey('tch')) {
      context.handle(
          _tchMeta, tch.isAcceptableOrUnknown(data['tch'], _tchMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_trm_seg map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_trm_seg.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifTrmSegTable createAlias(String alias) {
    return $DafifTrmSegTable(_db, alias);
  }
}

class dafif_version_info extends DataClass
    implements Insertable<dafif_version_info> {
  final int id;
  final String effectivedate;
  final String expiredate;
  dafif_version_info({@required this.id, this.effectivedate, this.expiredate});
  factory dafif_version_info.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return dafif_version_info(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      effectivedate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}effectivedate']),
      expiredate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}expiredate']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || effectivedate != null) {
      map['effectivedate'] = Variable<String>(effectivedate);
    }
    if (!nullToAbsent || expiredate != null) {
      map['expiredate'] = Variable<String>(expiredate);
    }
    return map;
  }

  factory dafif_version_info.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_version_info(
      id: serializer.fromJson<int>(json['id']),
      effectivedate: serializer.fromJson<String>(json['effectivedate']),
      expiredate: serializer.fromJson<String>(json['expiredate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'effectivedate': serializer.toJson<String>(effectivedate),
      'expiredate': serializer.toJson<String>(expiredate),
    };
  }

  dafif_version_info copyWith(
          {int id, String effectivedate, String expiredate}) =>
      dafif_version_info(
        id: id ?? this.id,
        effectivedate: effectivedate ?? this.effectivedate,
        expiredate: expiredate ?? this.expiredate,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_version_info(')
          ..write('id: $id, ')
          ..write('effectivedate: $effectivedate, ')
          ..write('expiredate: $expiredate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf(
      $mrjc(id.hashCode, $mrjc(effectivedate.hashCode, expiredate.hashCode)));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_version_info &&
          other.id == this.id &&
          other.effectivedate == this.effectivedate &&
          other.expiredate == this.expiredate);
}

class DafifVersionInfoCompanion extends UpdateCompanion<dafif_version_info> {
  final Value<int> id;
  final Value<String> effectivedate;
  final Value<String> expiredate;
  const DafifVersionInfoCompanion({
    this.id = const Value.absent(),
    this.effectivedate = const Value.absent(),
    this.expiredate = const Value.absent(),
  });
  DafifVersionInfoCompanion.insert({
    this.id = const Value.absent(),
    this.effectivedate = const Value.absent(),
    this.expiredate = const Value.absent(),
  });
  static Insertable<dafif_version_info> custom({
    Expression<int> id,
    Expression<String> effectivedate,
    Expression<String> expiredate,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (effectivedate != null) 'effectivedate': effectivedate,
      if (expiredate != null) 'expiredate': expiredate,
    });
  }

  DafifVersionInfoCompanion copyWith(
      {Value<int> id, Value<String> effectivedate, Value<String> expiredate}) {
    return DafifVersionInfoCompanion(
      id: id ?? this.id,
      effectivedate: effectivedate ?? this.effectivedate,
      expiredate: expiredate ?? this.expiredate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (effectivedate.present) {
      map['effectivedate'] = Variable<String>(effectivedate.value);
    }
    if (expiredate.present) {
      map['expiredate'] = Variable<String>(expiredate.value);
    }
    return map;
  }
}

class $DafifVersionInfoTable extends DafifVersionInfo
    with TableInfo<$DafifVersionInfoTable, dafif_version_info> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifVersionInfoTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _effectivedateMeta =
      const VerificationMeta('effectivedate');
  GeneratedTextColumn _effectivedate;
  @override
  GeneratedTextColumn get effectivedate =>
      _effectivedate ??= _constructEffectivedate();
  GeneratedTextColumn _constructEffectivedate() {
    return GeneratedTextColumn(
      'effectivedate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _expiredateMeta = const VerificationMeta('expiredate');
  GeneratedTextColumn _expiredate;
  @override
  GeneratedTextColumn get expiredate => _expiredate ??= _constructExpiredate();
  GeneratedTextColumn _constructExpiredate() {
    return GeneratedTextColumn(
      'expiredate',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, effectivedate, expiredate];
  @override
  $DafifVersionInfoTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_version_info';
  @override
  final String actualTableName = 'dafif_version_info';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_version_info> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('effectivedate')) {
      context.handle(
          _effectivedateMeta,
          effectivedate.isAcceptableOrUnknown(
              data['effectivedate'], _effectivedateMeta));
    }
    if (data.containsKey('expiredate')) {
      context.handle(
          _expiredateMeta,
          expiredate.isAcceptableOrUnknown(
              data['expiredate'], _expiredateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_version_info map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_version_info.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifVersionInfoTable createAlias(String alias) {
    return $DafifVersionInfoTable(_db, alias);
  }
}

class dafif_waypoint extends DataClass implements Insertable<dafif_waypoint> {
  final int id;
  final String wptident;
  final String country;
  final String description;
  final String usagecode;
  final String icao;
  final double latitude;
  final double longitude;
  final String wgsdlat;
  final String wgsdlong;
  final String stateprov;
  final String wptnavflag;
  final String type;
  final String bearing;
  final String distance;
  final String wac;
  final String lochdatum;
  final String wgsdatum;
  final String wgslat;
  final String wgslong;
  final String magvar;
  final String navident;
  final String navtype;
  final String navctry;
  final String navkeycd;
  final String cycledate;
  final String wptrvsm;
  final String rwyid;
  final String rwyicao;
  final int crc32;
  final double distancetoorigin;
  dafif_waypoint(
      {@required this.id,
      this.wptident,
      this.country,
      this.description,
      this.usagecode,
      this.icao,
      this.latitude,
      this.longitude,
      this.wgsdlat,
      this.wgsdlong,
      this.stateprov,
      this.wptnavflag,
      this.type,
      this.bearing,
      this.distance,
      this.wac,
      this.lochdatum,
      this.wgsdatum,
      this.wgslat,
      this.wgslong,
      this.magvar,
      this.navident,
      this.navtype,
      this.navctry,
      this.navkeycd,
      this.cycledate,
      this.wptrvsm,
      this.rwyid,
      this.rwyicao,
      this.crc32,
      this.distancetoorigin});
  factory dafif_waypoint.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return dafif_waypoint(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      wptident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wptident']),
      country:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}country']),
      description: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}description']),
      usagecode: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}usagecode']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      latitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}latitude']),
      longitude: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}longitude']),
      wgsdlat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgsdlat']),
      wgsdlong: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdlong']),
      stateprov: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}stateprov']),
      wptnavflag: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wptnavflag']),
      type: stringType.mapFromDatabaseResponse(data['${effectivePrefix}type']),
      bearing:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}bearing']),
      distance: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}distance']),
      wac: stringType.mapFromDatabaseResponse(data['${effectivePrefix}wac']),
      lochdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lochdatum']),
      wgsdatum: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}wgsdatum']),
      wgslat:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslat']),
      wgslong:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wgslong']),
      magvar:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}magvar']),
      navident: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navident']),
      navtype:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navtype']),
      navctry:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}navctry']),
      navkeycd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}navkeycd']),
      cycledate: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cycledate']),
      wptrvsm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}wptrvsm']),
      rwyid:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}rwyid']),
      rwyicao:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}rwyicao']),
      crc32: intType.mapFromDatabaseResponse(data['${effectivePrefix}crc32']),
      distancetoorigin: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}distancetoorigin']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || wptident != null) {
      map['wptident'] = Variable<String>(wptident);
    }
    if (!nullToAbsent || country != null) {
      map['country'] = Variable<String>(country);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || usagecode != null) {
      map['usagecode'] = Variable<String>(usagecode);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || latitude != null) {
      map['latitude'] = Variable<double>(latitude);
    }
    if (!nullToAbsent || longitude != null) {
      map['longitude'] = Variable<double>(longitude);
    }
    if (!nullToAbsent || wgsdlat != null) {
      map['wgsdlat'] = Variable<String>(wgsdlat);
    }
    if (!nullToAbsent || wgsdlong != null) {
      map['wgsdlong'] = Variable<String>(wgsdlong);
    }
    if (!nullToAbsent || stateprov != null) {
      map['stateprov'] = Variable<String>(stateprov);
    }
    if (!nullToAbsent || wptnavflag != null) {
      map['wptnavflag'] = Variable<String>(wptnavflag);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || bearing != null) {
      map['bearing'] = Variable<String>(bearing);
    }
    if (!nullToAbsent || distance != null) {
      map['distance'] = Variable<String>(distance);
    }
    if (!nullToAbsent || wac != null) {
      map['wac'] = Variable<String>(wac);
    }
    if (!nullToAbsent || lochdatum != null) {
      map['lochdatum'] = Variable<String>(lochdatum);
    }
    if (!nullToAbsent || wgsdatum != null) {
      map['wgsdatum'] = Variable<String>(wgsdatum);
    }
    if (!nullToAbsent || wgslat != null) {
      map['wgslat'] = Variable<String>(wgslat);
    }
    if (!nullToAbsent || wgslong != null) {
      map['wgslong'] = Variable<String>(wgslong);
    }
    if (!nullToAbsent || magvar != null) {
      map['magvar'] = Variable<String>(magvar);
    }
    if (!nullToAbsent || navident != null) {
      map['navident'] = Variable<String>(navident);
    }
    if (!nullToAbsent || navtype != null) {
      map['navtype'] = Variable<String>(navtype);
    }
    if (!nullToAbsent || navctry != null) {
      map['navctry'] = Variable<String>(navctry);
    }
    if (!nullToAbsent || navkeycd != null) {
      map['navkeycd'] = Variable<String>(navkeycd);
    }
    if (!nullToAbsent || cycledate != null) {
      map['cycledate'] = Variable<String>(cycledate);
    }
    if (!nullToAbsent || wptrvsm != null) {
      map['wptrvsm'] = Variable<String>(wptrvsm);
    }
    if (!nullToAbsent || rwyid != null) {
      map['rwyid'] = Variable<String>(rwyid);
    }
    if (!nullToAbsent || rwyicao != null) {
      map['rwyicao'] = Variable<String>(rwyicao);
    }
    if (!nullToAbsent || crc32 != null) {
      map['crc32'] = Variable<int>(crc32);
    }
    if (!nullToAbsent || distancetoorigin != null) {
      map['distancetoorigin'] = Variable<double>(distancetoorigin);
    }
    return map;
  }

  factory dafif_waypoint.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return dafif_waypoint(
      id: serializer.fromJson<int>(json['id']),
      wptident: serializer.fromJson<String>(json['wptident']),
      country: serializer.fromJson<String>(json['country']),
      description: serializer.fromJson<String>(json['description']),
      usagecode: serializer.fromJson<String>(json['usagecode']),
      icao: serializer.fromJson<String>(json['icao']),
      latitude: serializer.fromJson<double>(json['latitude']),
      longitude: serializer.fromJson<double>(json['longitude']),
      wgsdlat: serializer.fromJson<String>(json['wgsdlat']),
      wgsdlong: serializer.fromJson<String>(json['wgsdlong']),
      stateprov: serializer.fromJson<String>(json['stateprov']),
      wptnavflag: serializer.fromJson<String>(json['wptnavflag']),
      type: serializer.fromJson<String>(json['type']),
      bearing: serializer.fromJson<String>(json['bearing']),
      distance: serializer.fromJson<String>(json['distance']),
      wac: serializer.fromJson<String>(json['wac']),
      lochdatum: serializer.fromJson<String>(json['lochdatum']),
      wgsdatum: serializer.fromJson<String>(json['wgsdatum']),
      wgslat: serializer.fromJson<String>(json['wgslat']),
      wgslong: serializer.fromJson<String>(json['wgslong']),
      magvar: serializer.fromJson<String>(json['magvar']),
      navident: serializer.fromJson<String>(json['navident']),
      navtype: serializer.fromJson<String>(json['navtype']),
      navctry: serializer.fromJson<String>(json['navctry']),
      navkeycd: serializer.fromJson<String>(json['navkeycd']),
      cycledate: serializer.fromJson<String>(json['cycledate']),
      wptrvsm: serializer.fromJson<String>(json['wptrvsm']),
      rwyid: serializer.fromJson<String>(json['rwyid']),
      rwyicao: serializer.fromJson<String>(json['rwyicao']),
      crc32: serializer.fromJson<int>(json['crc32']),
      distancetoorigin: serializer.fromJson<double>(json['distancetoorigin']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'wptident': serializer.toJson<String>(wptident),
      'country': serializer.toJson<String>(country),
      'description': serializer.toJson<String>(description),
      'usagecode': serializer.toJson<String>(usagecode),
      'icao': serializer.toJson<String>(icao),
      'latitude': serializer.toJson<double>(latitude),
      'longitude': serializer.toJson<double>(longitude),
      'wgsdlat': serializer.toJson<String>(wgsdlat),
      'wgsdlong': serializer.toJson<String>(wgsdlong),
      'stateprov': serializer.toJson<String>(stateprov),
      'wptnavflag': serializer.toJson<String>(wptnavflag),
      'type': serializer.toJson<String>(type),
      'bearing': serializer.toJson<String>(bearing),
      'distance': serializer.toJson<String>(distance),
      'wac': serializer.toJson<String>(wac),
      'lochdatum': serializer.toJson<String>(lochdatum),
      'wgsdatum': serializer.toJson<String>(wgsdatum),
      'wgslat': serializer.toJson<String>(wgslat),
      'wgslong': serializer.toJson<String>(wgslong),
      'magvar': serializer.toJson<String>(magvar),
      'navident': serializer.toJson<String>(navident),
      'navtype': serializer.toJson<String>(navtype),
      'navctry': serializer.toJson<String>(navctry),
      'navkeycd': serializer.toJson<String>(navkeycd),
      'cycledate': serializer.toJson<String>(cycledate),
      'wptrvsm': serializer.toJson<String>(wptrvsm),
      'rwyid': serializer.toJson<String>(rwyid),
      'rwyicao': serializer.toJson<String>(rwyicao),
      'crc32': serializer.toJson<int>(crc32),
      'distancetoorigin': serializer.toJson<double>(distancetoorigin),
    };
  }

  dafif_waypoint copyWith(
          {int id,
          String wptident,
          String country,
          String description,
          String usagecode,
          String icao,
          double latitude,
          double longitude,
          String wgsdlat,
          String wgsdlong,
          String stateprov,
          String wptnavflag,
          String type,
          String bearing,
          String distance,
          String wac,
          String lochdatum,
          String wgsdatum,
          String wgslat,
          String wgslong,
          String magvar,
          String navident,
          String navtype,
          String navctry,
          String navkeycd,
          String cycledate,
          String wptrvsm,
          String rwyid,
          String rwyicao,
          int crc32,
          double distancetoorigin}) =>
      dafif_waypoint(
        id: id ?? this.id,
        wptident: wptident ?? this.wptident,
        country: country ?? this.country,
        description: description ?? this.description,
        usagecode: usagecode ?? this.usagecode,
        icao: icao ?? this.icao,
        latitude: latitude ?? this.latitude,
        longitude: longitude ?? this.longitude,
        wgsdlat: wgsdlat ?? this.wgsdlat,
        wgsdlong: wgsdlong ?? this.wgsdlong,
        stateprov: stateprov ?? this.stateprov,
        wptnavflag: wptnavflag ?? this.wptnavflag,
        type: type ?? this.type,
        bearing: bearing ?? this.bearing,
        distance: distance ?? this.distance,
        wac: wac ?? this.wac,
        lochdatum: lochdatum ?? this.lochdatum,
        wgsdatum: wgsdatum ?? this.wgsdatum,
        wgslat: wgslat ?? this.wgslat,
        wgslong: wgslong ?? this.wgslong,
        magvar: magvar ?? this.magvar,
        navident: navident ?? this.navident,
        navtype: navtype ?? this.navtype,
        navctry: navctry ?? this.navctry,
        navkeycd: navkeycd ?? this.navkeycd,
        cycledate: cycledate ?? this.cycledate,
        wptrvsm: wptrvsm ?? this.wptrvsm,
        rwyid: rwyid ?? this.rwyid,
        rwyicao: rwyicao ?? this.rwyicao,
        crc32: crc32 ?? this.crc32,
        distancetoorigin: distancetoorigin ?? this.distancetoorigin,
      );
  @override
  String toString() {
    return (StringBuffer('dafif_waypoint(')
          ..write('id: $id, ')
          ..write('wptident: $wptident, ')
          ..write('country: $country, ')
          ..write('description: $description, ')
          ..write('usagecode: $usagecode, ')
          ..write('icao: $icao, ')
          ..write('latitude: $latitude, ')
          ..write('longitude: $longitude, ')
          ..write('wgsdlat: $wgsdlat, ')
          ..write('wgsdlong: $wgsdlong, ')
          ..write('stateprov: $stateprov, ')
          ..write('wptnavflag: $wptnavflag, ')
          ..write('type: $type, ')
          ..write('bearing: $bearing, ')
          ..write('distance: $distance, ')
          ..write('wac: $wac, ')
          ..write('lochdatum: $lochdatum, ')
          ..write('wgsdatum: $wgsdatum, ')
          ..write('wgslat: $wgslat, ')
          ..write('wgslong: $wgslong, ')
          ..write('magvar: $magvar, ')
          ..write('navident: $navident, ')
          ..write('navtype: $navtype, ')
          ..write('navctry: $navctry, ')
          ..write('navkeycd: $navkeycd, ')
          ..write('cycledate: $cycledate, ')
          ..write('wptrvsm: $wptrvsm, ')
          ..write('rwyid: $rwyid, ')
          ..write('rwyicao: $rwyicao, ')
          ..write('crc32: $crc32, ')
          ..write('distancetoorigin: $distancetoorigin')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          wptident.hashCode,
          $mrjc(
              country.hashCode,
              $mrjc(
                  description.hashCode,
                  $mrjc(
                      usagecode.hashCode,
                      $mrjc(
                          icao.hashCode,
                          $mrjc(
                              latitude.hashCode,
                              $mrjc(
                                  longitude.hashCode,
                                  $mrjc(
                                      wgsdlat.hashCode,
                                      $mrjc(
                                          wgsdlong.hashCode,
                                          $mrjc(
                                              stateprov.hashCode,
                                              $mrjc(
                                                  wptnavflag.hashCode,
                                                  $mrjc(
                                                      type.hashCode,
                                                      $mrjc(
                                                          bearing.hashCode,
                                                          $mrjc(
                                                              distance.hashCode,
                                                              $mrjc(
                                                                  wac.hashCode,
                                                                  $mrjc(
                                                                      lochdatum
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          wgsdatum
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              wgslat.hashCode,
                                                                              $mrjc(wgslong.hashCode, $mrjc(magvar.hashCode, $mrjc(navident.hashCode, $mrjc(navtype.hashCode, $mrjc(navctry.hashCode, $mrjc(navkeycd.hashCode, $mrjc(cycledate.hashCode, $mrjc(wptrvsm.hashCode, $mrjc(rwyid.hashCode, $mrjc(rwyicao.hashCode, $mrjc(crc32.hashCode, distancetoorigin.hashCode)))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is dafif_waypoint &&
          other.id == this.id &&
          other.wptident == this.wptident &&
          other.country == this.country &&
          other.description == this.description &&
          other.usagecode == this.usagecode &&
          other.icao == this.icao &&
          other.latitude == this.latitude &&
          other.longitude == this.longitude &&
          other.wgsdlat == this.wgsdlat &&
          other.wgsdlong == this.wgsdlong &&
          other.stateprov == this.stateprov &&
          other.wptnavflag == this.wptnavflag &&
          other.type == this.type &&
          other.bearing == this.bearing &&
          other.distance == this.distance &&
          other.wac == this.wac &&
          other.lochdatum == this.lochdatum &&
          other.wgsdatum == this.wgsdatum &&
          other.wgslat == this.wgslat &&
          other.wgslong == this.wgslong &&
          other.magvar == this.magvar &&
          other.navident == this.navident &&
          other.navtype == this.navtype &&
          other.navctry == this.navctry &&
          other.navkeycd == this.navkeycd &&
          other.cycledate == this.cycledate &&
          other.wptrvsm == this.wptrvsm &&
          other.rwyid == this.rwyid &&
          other.rwyicao == this.rwyicao &&
          other.crc32 == this.crc32 &&
          other.distancetoorigin == this.distancetoorigin);
}

class DafifWaypointCompanion extends UpdateCompanion<dafif_waypoint> {
  final Value<int> id;
  final Value<String> wptident;
  final Value<String> country;
  final Value<String> description;
  final Value<String> usagecode;
  final Value<String> icao;
  final Value<double> latitude;
  final Value<double> longitude;
  final Value<String> wgsdlat;
  final Value<String> wgsdlong;
  final Value<String> stateprov;
  final Value<String> wptnavflag;
  final Value<String> type;
  final Value<String> bearing;
  final Value<String> distance;
  final Value<String> wac;
  final Value<String> lochdatum;
  final Value<String> wgsdatum;
  final Value<String> wgslat;
  final Value<String> wgslong;
  final Value<String> magvar;
  final Value<String> navident;
  final Value<String> navtype;
  final Value<String> navctry;
  final Value<String> navkeycd;
  final Value<String> cycledate;
  final Value<String> wptrvsm;
  final Value<String> rwyid;
  final Value<String> rwyicao;
  final Value<int> crc32;
  final Value<double> distancetoorigin;
  const DafifWaypointCompanion({
    this.id = const Value.absent(),
    this.wptident = const Value.absent(),
    this.country = const Value.absent(),
    this.description = const Value.absent(),
    this.usagecode = const Value.absent(),
    this.icao = const Value.absent(),
    this.latitude = const Value.absent(),
    this.longitude = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.stateprov = const Value.absent(),
    this.wptnavflag = const Value.absent(),
    this.type = const Value.absent(),
    this.bearing = const Value.absent(),
    this.distance = const Value.absent(),
    this.wac = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.magvar = const Value.absent(),
    this.navident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.wptrvsm = const Value.absent(),
    this.rwyid = const Value.absent(),
    this.rwyicao = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.distancetoorigin = const Value.absent(),
  });
  DafifWaypointCompanion.insert({
    this.id = const Value.absent(),
    this.wptident = const Value.absent(),
    this.country = const Value.absent(),
    this.description = const Value.absent(),
    this.usagecode = const Value.absent(),
    this.icao = const Value.absent(),
    this.latitude = const Value.absent(),
    this.longitude = const Value.absent(),
    this.wgsdlat = const Value.absent(),
    this.wgsdlong = const Value.absent(),
    this.stateprov = const Value.absent(),
    this.wptnavflag = const Value.absent(),
    this.type = const Value.absent(),
    this.bearing = const Value.absent(),
    this.distance = const Value.absent(),
    this.wac = const Value.absent(),
    this.lochdatum = const Value.absent(),
    this.wgsdatum = const Value.absent(),
    this.wgslat = const Value.absent(),
    this.wgslong = const Value.absent(),
    this.magvar = const Value.absent(),
    this.navident = const Value.absent(),
    this.navtype = const Value.absent(),
    this.navctry = const Value.absent(),
    this.navkeycd = const Value.absent(),
    this.cycledate = const Value.absent(),
    this.wptrvsm = const Value.absent(),
    this.rwyid = const Value.absent(),
    this.rwyicao = const Value.absent(),
    this.crc32 = const Value.absent(),
    this.distancetoorigin = const Value.absent(),
  });
  static Insertable<dafif_waypoint> custom({
    Expression<int> id,
    Expression<String> wptident,
    Expression<String> country,
    Expression<String> description,
    Expression<String> usagecode,
    Expression<String> icao,
    Expression<double> latitude,
    Expression<double> longitude,
    Expression<String> wgsdlat,
    Expression<String> wgsdlong,
    Expression<String> stateprov,
    Expression<String> wptnavflag,
    Expression<String> type,
    Expression<String> bearing,
    Expression<String> distance,
    Expression<String> wac,
    Expression<String> lochdatum,
    Expression<String> wgsdatum,
    Expression<String> wgslat,
    Expression<String> wgslong,
    Expression<String> magvar,
    Expression<String> navident,
    Expression<String> navtype,
    Expression<String> navctry,
    Expression<String> navkeycd,
    Expression<String> cycledate,
    Expression<String> wptrvsm,
    Expression<String> rwyid,
    Expression<String> rwyicao,
    Expression<int> crc32,
    Expression<double> distancetoorigin,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (wptident != null) 'wptident': wptident,
      if (country != null) 'country': country,
      if (description != null) 'description': description,
      if (usagecode != null) 'usagecode': usagecode,
      if (icao != null) 'icao': icao,
      if (latitude != null) 'latitude': latitude,
      if (longitude != null) 'longitude': longitude,
      if (wgsdlat != null) 'wgsdlat': wgsdlat,
      if (wgsdlong != null) 'wgsdlong': wgsdlong,
      if (stateprov != null) 'stateprov': stateprov,
      if (wptnavflag != null) 'wptnavflag': wptnavflag,
      if (type != null) 'type': type,
      if (bearing != null) 'bearing': bearing,
      if (distance != null) 'distance': distance,
      if (wac != null) 'wac': wac,
      if (lochdatum != null) 'lochdatum': lochdatum,
      if (wgsdatum != null) 'wgsdatum': wgsdatum,
      if (wgslat != null) 'wgslat': wgslat,
      if (wgslong != null) 'wgslong': wgslong,
      if (magvar != null) 'magvar': magvar,
      if (navident != null) 'navident': navident,
      if (navtype != null) 'navtype': navtype,
      if (navctry != null) 'navctry': navctry,
      if (navkeycd != null) 'navkeycd': navkeycd,
      if (cycledate != null) 'cycledate': cycledate,
      if (wptrvsm != null) 'wptrvsm': wptrvsm,
      if (rwyid != null) 'rwyid': rwyid,
      if (rwyicao != null) 'rwyicao': rwyicao,
      if (crc32 != null) 'crc32': crc32,
      if (distancetoorigin != null) 'distancetoorigin': distancetoorigin,
    });
  }

  DafifWaypointCompanion copyWith(
      {Value<int> id,
      Value<String> wptident,
      Value<String> country,
      Value<String> description,
      Value<String> usagecode,
      Value<String> icao,
      Value<double> latitude,
      Value<double> longitude,
      Value<String> wgsdlat,
      Value<String> wgsdlong,
      Value<String> stateprov,
      Value<String> wptnavflag,
      Value<String> type,
      Value<String> bearing,
      Value<String> distance,
      Value<String> wac,
      Value<String> lochdatum,
      Value<String> wgsdatum,
      Value<String> wgslat,
      Value<String> wgslong,
      Value<String> magvar,
      Value<String> navident,
      Value<String> navtype,
      Value<String> navctry,
      Value<String> navkeycd,
      Value<String> cycledate,
      Value<String> wptrvsm,
      Value<String> rwyid,
      Value<String> rwyicao,
      Value<int> crc32,
      Value<double> distancetoorigin}) {
    return DafifWaypointCompanion(
      id: id ?? this.id,
      wptident: wptident ?? this.wptident,
      country: country ?? this.country,
      description: description ?? this.description,
      usagecode: usagecode ?? this.usagecode,
      icao: icao ?? this.icao,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
      wgsdlat: wgsdlat ?? this.wgsdlat,
      wgsdlong: wgsdlong ?? this.wgsdlong,
      stateprov: stateprov ?? this.stateprov,
      wptnavflag: wptnavflag ?? this.wptnavflag,
      type: type ?? this.type,
      bearing: bearing ?? this.bearing,
      distance: distance ?? this.distance,
      wac: wac ?? this.wac,
      lochdatum: lochdatum ?? this.lochdatum,
      wgsdatum: wgsdatum ?? this.wgsdatum,
      wgslat: wgslat ?? this.wgslat,
      wgslong: wgslong ?? this.wgslong,
      magvar: magvar ?? this.magvar,
      navident: navident ?? this.navident,
      navtype: navtype ?? this.navtype,
      navctry: navctry ?? this.navctry,
      navkeycd: navkeycd ?? this.navkeycd,
      cycledate: cycledate ?? this.cycledate,
      wptrvsm: wptrvsm ?? this.wptrvsm,
      rwyid: rwyid ?? this.rwyid,
      rwyicao: rwyicao ?? this.rwyicao,
      crc32: crc32 ?? this.crc32,
      distancetoorigin: distancetoorigin ?? this.distancetoorigin,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (wptident.present) {
      map['wptident'] = Variable<String>(wptident.value);
    }
    if (country.present) {
      map['country'] = Variable<String>(country.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (usagecode.present) {
      map['usagecode'] = Variable<String>(usagecode.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (latitude.present) {
      map['latitude'] = Variable<double>(latitude.value);
    }
    if (longitude.present) {
      map['longitude'] = Variable<double>(longitude.value);
    }
    if (wgsdlat.present) {
      map['wgsdlat'] = Variable<String>(wgsdlat.value);
    }
    if (wgsdlong.present) {
      map['wgsdlong'] = Variable<String>(wgsdlong.value);
    }
    if (stateprov.present) {
      map['stateprov'] = Variable<String>(stateprov.value);
    }
    if (wptnavflag.present) {
      map['wptnavflag'] = Variable<String>(wptnavflag.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (bearing.present) {
      map['bearing'] = Variable<String>(bearing.value);
    }
    if (distance.present) {
      map['distance'] = Variable<String>(distance.value);
    }
    if (wac.present) {
      map['wac'] = Variable<String>(wac.value);
    }
    if (lochdatum.present) {
      map['lochdatum'] = Variable<String>(lochdatum.value);
    }
    if (wgsdatum.present) {
      map['wgsdatum'] = Variable<String>(wgsdatum.value);
    }
    if (wgslat.present) {
      map['wgslat'] = Variable<String>(wgslat.value);
    }
    if (wgslong.present) {
      map['wgslong'] = Variable<String>(wgslong.value);
    }
    if (magvar.present) {
      map['magvar'] = Variable<String>(magvar.value);
    }
    if (navident.present) {
      map['navident'] = Variable<String>(navident.value);
    }
    if (navtype.present) {
      map['navtype'] = Variable<String>(navtype.value);
    }
    if (navctry.present) {
      map['navctry'] = Variable<String>(navctry.value);
    }
    if (navkeycd.present) {
      map['navkeycd'] = Variable<String>(navkeycd.value);
    }
    if (cycledate.present) {
      map['cycledate'] = Variable<String>(cycledate.value);
    }
    if (wptrvsm.present) {
      map['wptrvsm'] = Variable<String>(wptrvsm.value);
    }
    if (rwyid.present) {
      map['rwyid'] = Variable<String>(rwyid.value);
    }
    if (rwyicao.present) {
      map['rwyicao'] = Variable<String>(rwyicao.value);
    }
    if (crc32.present) {
      map['crc32'] = Variable<int>(crc32.value);
    }
    if (distancetoorigin.present) {
      map['distancetoorigin'] = Variable<double>(distancetoorigin.value);
    }
    return map;
  }
}

class $DafifWaypointTable extends DafifWaypoint
    with TableInfo<$DafifWaypointTable, dafif_waypoint> {
  final GeneratedDatabase _db;
  final String _alias;
  $DafifWaypointTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _wptidentMeta = const VerificationMeta('wptident');
  GeneratedTextColumn _wptident;
  @override
  GeneratedTextColumn get wptident => _wptident ??= _constructWptident();
  GeneratedTextColumn _constructWptident() {
    return GeneratedTextColumn(
      'wptident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _countryMeta = const VerificationMeta('country');
  GeneratedTextColumn _country;
  @override
  GeneratedTextColumn get country => _country ??= _constructCountry();
  GeneratedTextColumn _constructCountry() {
    return GeneratedTextColumn(
      'country',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descriptionMeta =
      const VerificationMeta('description');
  GeneratedTextColumn _description;
  @override
  GeneratedTextColumn get description =>
      _description ??= _constructDescription();
  GeneratedTextColumn _constructDescription() {
    return GeneratedTextColumn(
      'description',
      $tableName,
      true,
    );
  }

  final VerificationMeta _usagecodeMeta = const VerificationMeta('usagecode');
  GeneratedTextColumn _usagecode;
  @override
  GeneratedTextColumn get usagecode => _usagecode ??= _constructUsagecode();
  GeneratedTextColumn _constructUsagecode() {
    return GeneratedTextColumn(
      'usagecode',
      $tableName,
      true,
    );
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _latitudeMeta = const VerificationMeta('latitude');
  GeneratedRealColumn _latitude;
  @override
  GeneratedRealColumn get latitude => _latitude ??= _constructLatitude();
  GeneratedRealColumn _constructLatitude() {
    return GeneratedRealColumn(
      'latitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _longitudeMeta = const VerificationMeta('longitude');
  GeneratedRealColumn _longitude;
  @override
  GeneratedRealColumn get longitude => _longitude ??= _constructLongitude();
  GeneratedRealColumn _constructLongitude() {
    return GeneratedRealColumn(
      'longitude',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlatMeta = const VerificationMeta('wgsdlat');
  GeneratedTextColumn _wgsdlat;
  @override
  GeneratedTextColumn get wgsdlat => _wgsdlat ??= _constructWgsdlat();
  GeneratedTextColumn _constructWgsdlat() {
    return GeneratedTextColumn(
      'wgsdlat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdlongMeta = const VerificationMeta('wgsdlong');
  GeneratedTextColumn _wgsdlong;
  @override
  GeneratedTextColumn get wgsdlong => _wgsdlong ??= _constructWgsdlong();
  GeneratedTextColumn _constructWgsdlong() {
    return GeneratedTextColumn(
      'wgsdlong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _stateprovMeta = const VerificationMeta('stateprov');
  GeneratedTextColumn _stateprov;
  @override
  GeneratedTextColumn get stateprov => _stateprov ??= _constructStateprov();
  GeneratedTextColumn _constructStateprov() {
    return GeneratedTextColumn(
      'stateprov',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wptnavflagMeta = const VerificationMeta('wptnavflag');
  GeneratedTextColumn _wptnavflag;
  @override
  GeneratedTextColumn get wptnavflag => _wptnavflag ??= _constructWptnavflag();
  GeneratedTextColumn _constructWptnavflag() {
    return GeneratedTextColumn(
      'wptnavflag',
      $tableName,
      true,
    );
  }

  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedTextColumn _type;
  @override
  GeneratedTextColumn get type => _type ??= _constructType();
  GeneratedTextColumn _constructType() {
    return GeneratedTextColumn(
      'type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bearingMeta = const VerificationMeta('bearing');
  GeneratedTextColumn _bearing;
  @override
  GeneratedTextColumn get bearing => _bearing ??= _constructBearing();
  GeneratedTextColumn _constructBearing() {
    return GeneratedTextColumn(
      'bearing',
      $tableName,
      true,
    );
  }

  final VerificationMeta _distanceMeta = const VerificationMeta('distance');
  GeneratedTextColumn _distance;
  @override
  GeneratedTextColumn get distance => _distance ??= _constructDistance();
  GeneratedTextColumn _constructDistance() {
    return GeneratedTextColumn(
      'distance',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wacMeta = const VerificationMeta('wac');
  GeneratedTextColumn _wac;
  @override
  GeneratedTextColumn get wac => _wac ??= _constructWac();
  GeneratedTextColumn _constructWac() {
    return GeneratedTextColumn(
      'wac',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lochdatumMeta = const VerificationMeta('lochdatum');
  GeneratedTextColumn _lochdatum;
  @override
  GeneratedTextColumn get lochdatum => _lochdatum ??= _constructLochdatum();
  GeneratedTextColumn _constructLochdatum() {
    return GeneratedTextColumn(
      'lochdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgsdatumMeta = const VerificationMeta('wgsdatum');
  GeneratedTextColumn _wgsdatum;
  @override
  GeneratedTextColumn get wgsdatum => _wgsdatum ??= _constructWgsdatum();
  GeneratedTextColumn _constructWgsdatum() {
    return GeneratedTextColumn(
      'wgsdatum',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslatMeta = const VerificationMeta('wgslat');
  GeneratedTextColumn _wgslat;
  @override
  GeneratedTextColumn get wgslat => _wgslat ??= _constructWgslat();
  GeneratedTextColumn _constructWgslat() {
    return GeneratedTextColumn(
      'wgslat',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wgslongMeta = const VerificationMeta('wgslong');
  GeneratedTextColumn _wgslong;
  @override
  GeneratedTextColumn get wgslong => _wgslong ??= _constructWgslong();
  GeneratedTextColumn _constructWgslong() {
    return GeneratedTextColumn(
      'wgslong',
      $tableName,
      true,
    );
  }

  final VerificationMeta _magvarMeta = const VerificationMeta('magvar');
  GeneratedTextColumn _magvar;
  @override
  GeneratedTextColumn get magvar => _magvar ??= _constructMagvar();
  GeneratedTextColumn _constructMagvar() {
    return GeneratedTextColumn(
      'magvar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navidentMeta = const VerificationMeta('navident');
  GeneratedTextColumn _navident;
  @override
  GeneratedTextColumn get navident => _navident ??= _constructNavident();
  GeneratedTextColumn _constructNavident() {
    return GeneratedTextColumn(
      'navident',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navtypeMeta = const VerificationMeta('navtype');
  GeneratedTextColumn _navtype;
  @override
  GeneratedTextColumn get navtype => _navtype ??= _constructNavtype();
  GeneratedTextColumn _constructNavtype() {
    return GeneratedTextColumn(
      'navtype',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navctryMeta = const VerificationMeta('navctry');
  GeneratedTextColumn _navctry;
  @override
  GeneratedTextColumn get navctry => _navctry ??= _constructNavctry();
  GeneratedTextColumn _constructNavctry() {
    return GeneratedTextColumn(
      'navctry',
      $tableName,
      true,
    );
  }

  final VerificationMeta _navkeycdMeta = const VerificationMeta('navkeycd');
  GeneratedTextColumn _navkeycd;
  @override
  GeneratedTextColumn get navkeycd => _navkeycd ??= _constructNavkeycd();
  GeneratedTextColumn _constructNavkeycd() {
    return GeneratedTextColumn(
      'navkeycd',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cycledateMeta = const VerificationMeta('cycledate');
  GeneratedTextColumn _cycledate;
  @override
  GeneratedTextColumn get cycledate => _cycledate ??= _constructCycledate();
  GeneratedTextColumn _constructCycledate() {
    return GeneratedTextColumn(
      'cycledate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _wptrvsmMeta = const VerificationMeta('wptrvsm');
  GeneratedTextColumn _wptrvsm;
  @override
  GeneratedTextColumn get wptrvsm => _wptrvsm ??= _constructWptrvsm();
  GeneratedTextColumn _constructWptrvsm() {
    return GeneratedTextColumn(
      'wptrvsm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rwyidMeta = const VerificationMeta('rwyid');
  GeneratedTextColumn _rwyid;
  @override
  GeneratedTextColumn get rwyid => _rwyid ??= _constructRwyid();
  GeneratedTextColumn _constructRwyid() {
    return GeneratedTextColumn(
      'rwyid',
      $tableName,
      true,
    );
  }

  final VerificationMeta _rwyicaoMeta = const VerificationMeta('rwyicao');
  GeneratedTextColumn _rwyicao;
  @override
  GeneratedTextColumn get rwyicao => _rwyicao ??= _constructRwyicao();
  GeneratedTextColumn _constructRwyicao() {
    return GeneratedTextColumn(
      'rwyicao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crc32Meta = const VerificationMeta('crc32');
  GeneratedIntColumn _crc32;
  @override
  GeneratedIntColumn get crc32 => _crc32 ??= _constructCrc32();
  GeneratedIntColumn _constructCrc32() {
    return GeneratedIntColumn(
      'crc32',
      $tableName,
      true,
    );
  }

  final VerificationMeta _distancetooriginMeta =
      const VerificationMeta('distancetoorigin');
  GeneratedRealColumn _distancetoorigin;
  @override
  GeneratedRealColumn get distancetoorigin =>
      _distancetoorigin ??= _constructDistancetoorigin();
  GeneratedRealColumn _constructDistancetoorigin() {
    return GeneratedRealColumn(
      'distancetoorigin',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        wptident,
        country,
        description,
        usagecode,
        icao,
        latitude,
        longitude,
        wgsdlat,
        wgsdlong,
        stateprov,
        wptnavflag,
        type,
        bearing,
        distance,
        wac,
        lochdatum,
        wgsdatum,
        wgslat,
        wgslong,
        magvar,
        navident,
        navtype,
        navctry,
        navkeycd,
        cycledate,
        wptrvsm,
        rwyid,
        rwyicao,
        crc32,
        distancetoorigin
      ];
  @override
  $DafifWaypointTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'dafif_waypoint';
  @override
  final String actualTableName = 'dafif_waypoint';
  @override
  VerificationContext validateIntegrity(Insertable<dafif_waypoint> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('wptident')) {
      context.handle(_wptidentMeta,
          wptident.isAcceptableOrUnknown(data['wptident'], _wptidentMeta));
    }
    if (data.containsKey('country')) {
      context.handle(_countryMeta,
          country.isAcceptableOrUnknown(data['country'], _countryMeta));
    }
    if (data.containsKey('description')) {
      context.handle(
          _descriptionMeta,
          description.isAcceptableOrUnknown(
              data['description'], _descriptionMeta));
    }
    if (data.containsKey('usagecode')) {
      context.handle(_usagecodeMeta,
          usagecode.isAcceptableOrUnknown(data['usagecode'], _usagecodeMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('latitude')) {
      context.handle(_latitudeMeta,
          latitude.isAcceptableOrUnknown(data['latitude'], _latitudeMeta));
    }
    if (data.containsKey('longitude')) {
      context.handle(_longitudeMeta,
          longitude.isAcceptableOrUnknown(data['longitude'], _longitudeMeta));
    }
    if (data.containsKey('wgsdlat')) {
      context.handle(_wgsdlatMeta,
          wgsdlat.isAcceptableOrUnknown(data['wgsdlat'], _wgsdlatMeta));
    }
    if (data.containsKey('wgsdlong')) {
      context.handle(_wgsdlongMeta,
          wgsdlong.isAcceptableOrUnknown(data['wgsdlong'], _wgsdlongMeta));
    }
    if (data.containsKey('stateprov')) {
      context.handle(_stateprovMeta,
          stateprov.isAcceptableOrUnknown(data['stateprov'], _stateprovMeta));
    }
    if (data.containsKey('wptnavflag')) {
      context.handle(
          _wptnavflagMeta,
          wptnavflag.isAcceptableOrUnknown(
              data['wptnavflag'], _wptnavflagMeta));
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    }
    if (data.containsKey('bearing')) {
      context.handle(_bearingMeta,
          bearing.isAcceptableOrUnknown(data['bearing'], _bearingMeta));
    }
    if (data.containsKey('distance')) {
      context.handle(_distanceMeta,
          distance.isAcceptableOrUnknown(data['distance'], _distanceMeta));
    }
    if (data.containsKey('wac')) {
      context.handle(
          _wacMeta, wac.isAcceptableOrUnknown(data['wac'], _wacMeta));
    }
    if (data.containsKey('lochdatum')) {
      context.handle(_lochdatumMeta,
          lochdatum.isAcceptableOrUnknown(data['lochdatum'], _lochdatumMeta));
    }
    if (data.containsKey('wgsdatum')) {
      context.handle(_wgsdatumMeta,
          wgsdatum.isAcceptableOrUnknown(data['wgsdatum'], _wgsdatumMeta));
    }
    if (data.containsKey('wgslat')) {
      context.handle(_wgslatMeta,
          wgslat.isAcceptableOrUnknown(data['wgslat'], _wgslatMeta));
    }
    if (data.containsKey('wgslong')) {
      context.handle(_wgslongMeta,
          wgslong.isAcceptableOrUnknown(data['wgslong'], _wgslongMeta));
    }
    if (data.containsKey('magvar')) {
      context.handle(_magvarMeta,
          magvar.isAcceptableOrUnknown(data['magvar'], _magvarMeta));
    }
    if (data.containsKey('navident')) {
      context.handle(_navidentMeta,
          navident.isAcceptableOrUnknown(data['navident'], _navidentMeta));
    }
    if (data.containsKey('navtype')) {
      context.handle(_navtypeMeta,
          navtype.isAcceptableOrUnknown(data['navtype'], _navtypeMeta));
    }
    if (data.containsKey('navctry')) {
      context.handle(_navctryMeta,
          navctry.isAcceptableOrUnknown(data['navctry'], _navctryMeta));
    }
    if (data.containsKey('navkeycd')) {
      context.handle(_navkeycdMeta,
          navkeycd.isAcceptableOrUnknown(data['navkeycd'], _navkeycdMeta));
    }
    if (data.containsKey('cycledate')) {
      context.handle(_cycledateMeta,
          cycledate.isAcceptableOrUnknown(data['cycledate'], _cycledateMeta));
    }
    if (data.containsKey('wptrvsm')) {
      context.handle(_wptrvsmMeta,
          wptrvsm.isAcceptableOrUnknown(data['wptrvsm'], _wptrvsmMeta));
    }
    if (data.containsKey('rwyid')) {
      context.handle(
          _rwyidMeta, rwyid.isAcceptableOrUnknown(data['rwyid'], _rwyidMeta));
    }
    if (data.containsKey('rwyicao')) {
      context.handle(_rwyicaoMeta,
          rwyicao.isAcceptableOrUnknown(data['rwyicao'], _rwyicaoMeta));
    }
    if (data.containsKey('crc32')) {
      context.handle(
          _crc32Meta, crc32.isAcceptableOrUnknown(data['crc32'], _crc32Meta));
    }
    if (data.containsKey('distancetoorigin')) {
      context.handle(
          _distancetooriginMeta,
          distancetoorigin.isAcceptableOrUnknown(
              data['distancetoorigin'], _distancetooriginMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  dafif_waypoint map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return dafif_waypoint.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $DafifWaypointTable createAlias(String alias) {
    return $DafifWaypointTable(_db, alias);
  }
}

class hupgp_flightroute extends DataClass
    implements Insertable<hupgp_flightroute> {
  final int id;
  final int hupgpunitid;
  final String nickname;
  final DateTime ldtime;
  final DateTime totime;
  final bool iscalculated;
  final String preparedby;
  final bool istemplate;
  final DateTime dafifdate;
  final String flightroutedata;
  final int toairfield;
  final int ldairfield;
  hupgp_flightroute(
      {@required this.id,
      this.hupgpunitid,
      this.nickname,
      this.ldtime,
      this.totime,
      this.iscalculated,
      this.preparedby,
      this.istemplate,
      this.dafifdate,
      this.flightroutedata,
      this.toairfield,
      this.ldairfield});
  factory hupgp_flightroute.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final boolType = db.typeSystem.forDartType<bool>();
    return hupgp_flightroute(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      hupgpunitid: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}hupgpunitid']),
      nickname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}nickname']),
      ldtime: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}ldtime']),
      totime: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}totime']),
      iscalculated: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}iscalculated']),
      preparedby: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}preparedby']),
      istemplate: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}istemplate']),
      dafifdate: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}dafifdate']),
      flightroutedata: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}flightroutedata']),
      toairfield:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}toairfield']),
      ldairfield:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ldairfield']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || hupgpunitid != null) {
      map['hupgpunitid'] = Variable<int>(hupgpunitid);
    }
    if (!nullToAbsent || nickname != null) {
      map['nickname'] = Variable<String>(nickname);
    }
    if (!nullToAbsent || ldtime != null) {
      map['ldtime'] = Variable<DateTime>(ldtime);
    }
    if (!nullToAbsent || totime != null) {
      map['totime'] = Variable<DateTime>(totime);
    }
    if (!nullToAbsent || iscalculated != null) {
      map['iscalculated'] = Variable<bool>(iscalculated);
    }
    if (!nullToAbsent || preparedby != null) {
      map['preparedby'] = Variable<String>(preparedby);
    }
    if (!nullToAbsent || istemplate != null) {
      map['istemplate'] = Variable<bool>(istemplate);
    }
    if (!nullToAbsent || dafifdate != null) {
      map['dafifdate'] = Variable<DateTime>(dafifdate);
    }
    if (!nullToAbsent || flightroutedata != null) {
      map['flightroutedata'] = Variable<String>(flightroutedata);
    }
    if (!nullToAbsent || toairfield != null) {
      map['toairfield'] = Variable<int>(toairfield);
    }
    if (!nullToAbsent || ldairfield != null) {
      map['ldairfield'] = Variable<int>(ldairfield);
    }
    return map;
  }

  factory hupgp_flightroute.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return hupgp_flightroute(
      id: serializer.fromJson<int>(json['id']),
      hupgpunitid: serializer.fromJson<int>(json['hupgpunitid']),
      nickname: serializer.fromJson<String>(json['nickname']),
      ldtime: serializer.fromJson<DateTime>(json['ldtime']),
      totime: serializer.fromJson<DateTime>(json['totime']),
      iscalculated: serializer.fromJson<bool>(json['iscalculated']),
      preparedby: serializer.fromJson<String>(json['preparedby']),
      istemplate: serializer.fromJson<bool>(json['istemplate']),
      dafifdate: serializer.fromJson<DateTime>(json['dafifdate']),
      flightroutedata: serializer.fromJson<String>(json['flightroutedata']),
      toairfield: serializer.fromJson<int>(json['toairfield']),
      ldairfield: serializer.fromJson<int>(json['ldairfield']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'hupgpunitid': serializer.toJson<int>(hupgpunitid),
      'nickname': serializer.toJson<String>(nickname),
      'ldtime': serializer.toJson<DateTime>(ldtime),
      'totime': serializer.toJson<DateTime>(totime),
      'iscalculated': serializer.toJson<bool>(iscalculated),
      'preparedby': serializer.toJson<String>(preparedby),
      'istemplate': serializer.toJson<bool>(istemplate),
      'dafifdate': serializer.toJson<DateTime>(dafifdate),
      'flightroutedata': serializer.toJson<String>(flightroutedata),
      'toairfield': serializer.toJson<int>(toairfield),
      'ldairfield': serializer.toJson<int>(ldairfield),
    };
  }

  hupgp_flightroute copyWith(
          {int id,
          int hupgpunitid,
          String nickname,
          DateTime ldtime,
          DateTime totime,
          bool iscalculated,
          String preparedby,
          bool istemplate,
          DateTime dafifdate,
          String flightroutedata,
          int toairfield,
          int ldairfield}) =>
      hupgp_flightroute(
        id: id ?? this.id,
        hupgpunitid: hupgpunitid ?? this.hupgpunitid,
        nickname: nickname ?? this.nickname,
        ldtime: ldtime ?? this.ldtime,
        totime: totime ?? this.totime,
        iscalculated: iscalculated ?? this.iscalculated,
        preparedby: preparedby ?? this.preparedby,
        istemplate: istemplate ?? this.istemplate,
        dafifdate: dafifdate ?? this.dafifdate,
        flightroutedata: flightroutedata ?? this.flightroutedata,
        toairfield: toairfield ?? this.toairfield,
        ldairfield: ldairfield ?? this.ldairfield,
      );
  @override
  String toString() {
    return (StringBuffer('hupgp_flightroute(')
          ..write('id: $id, ')
          ..write('hupgpunitid: $hupgpunitid, ')
          ..write('nickname: $nickname, ')
          ..write('ldtime: $ldtime, ')
          ..write('totime: $totime, ')
          ..write('iscalculated: $iscalculated, ')
          ..write('preparedby: $preparedby, ')
          ..write('istemplate: $istemplate, ')
          ..write('dafifdate: $dafifdate, ')
          ..write('flightroutedata: $flightroutedata, ')
          ..write('toairfield: $toairfield, ')
          ..write('ldairfield: $ldairfield')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          hupgpunitid.hashCode,
          $mrjc(
              nickname.hashCode,
              $mrjc(
                  ldtime.hashCode,
                  $mrjc(
                      totime.hashCode,
                      $mrjc(
                          iscalculated.hashCode,
                          $mrjc(
                              preparedby.hashCode,
                              $mrjc(
                                  istemplate.hashCode,
                                  $mrjc(
                                      dafifdate.hashCode,
                                      $mrjc(
                                          flightroutedata.hashCode,
                                          $mrjc(toairfield.hashCode,
                                              ldairfield.hashCode))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is hupgp_flightroute &&
          other.id == this.id &&
          other.hupgpunitid == this.hupgpunitid &&
          other.nickname == this.nickname &&
          other.ldtime == this.ldtime &&
          other.totime == this.totime &&
          other.iscalculated == this.iscalculated &&
          other.preparedby == this.preparedby &&
          other.istemplate == this.istemplate &&
          other.dafifdate == this.dafifdate &&
          other.flightroutedata == this.flightroutedata &&
          other.toairfield == this.toairfield &&
          other.ldairfield == this.ldairfield);
}

class HupgpFlightrouteCompanion extends UpdateCompanion<hupgp_flightroute> {
  final Value<int> id;
  final Value<int> hupgpunitid;
  final Value<String> nickname;
  final Value<DateTime> ldtime;
  final Value<DateTime> totime;
  final Value<bool> iscalculated;
  final Value<String> preparedby;
  final Value<bool> istemplate;
  final Value<DateTime> dafifdate;
  final Value<String> flightroutedata;
  final Value<int> toairfield;
  final Value<int> ldairfield;
  const HupgpFlightrouteCompanion({
    this.id = const Value.absent(),
    this.hupgpunitid = const Value.absent(),
    this.nickname = const Value.absent(),
    this.ldtime = const Value.absent(),
    this.totime = const Value.absent(),
    this.iscalculated = const Value.absent(),
    this.preparedby = const Value.absent(),
    this.istemplate = const Value.absent(),
    this.dafifdate = const Value.absent(),
    this.flightroutedata = const Value.absent(),
    this.toairfield = const Value.absent(),
    this.ldairfield = const Value.absent(),
  });
  HupgpFlightrouteCompanion.insert({
    this.id = const Value.absent(),
    this.hupgpunitid = const Value.absent(),
    this.nickname = const Value.absent(),
    this.ldtime = const Value.absent(),
    this.totime = const Value.absent(),
    this.iscalculated = const Value.absent(),
    this.preparedby = const Value.absent(),
    this.istemplate = const Value.absent(),
    this.dafifdate = const Value.absent(),
    this.flightroutedata = const Value.absent(),
    this.toairfield = const Value.absent(),
    this.ldairfield = const Value.absent(),
  });
  static Insertable<hupgp_flightroute> custom({
    Expression<int> id,
    Expression<int> hupgpunitid,
    Expression<String> nickname,
    Expression<DateTime> ldtime,
    Expression<DateTime> totime,
    Expression<bool> iscalculated,
    Expression<String> preparedby,
    Expression<bool> istemplate,
    Expression<DateTime> dafifdate,
    Expression<String> flightroutedata,
    Expression<int> toairfield,
    Expression<int> ldairfield,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (hupgpunitid != null) 'hupgpunitid': hupgpunitid,
      if (nickname != null) 'nickname': nickname,
      if (ldtime != null) 'ldtime': ldtime,
      if (totime != null) 'totime': totime,
      if (iscalculated != null) 'iscalculated': iscalculated,
      if (preparedby != null) 'preparedby': preparedby,
      if (istemplate != null) 'istemplate': istemplate,
      if (dafifdate != null) 'dafifdate': dafifdate,
      if (flightroutedata != null) 'flightroutedata': flightroutedata,
      if (toairfield != null) 'toairfield': toairfield,
      if (ldairfield != null) 'ldairfield': ldairfield,
    });
  }

  HupgpFlightrouteCompanion copyWith(
      {Value<int> id,
      Value<int> hupgpunitid,
      Value<String> nickname,
      Value<DateTime> ldtime,
      Value<DateTime> totime,
      Value<bool> iscalculated,
      Value<String> preparedby,
      Value<bool> istemplate,
      Value<DateTime> dafifdate,
      Value<String> flightroutedata,
      Value<int> toairfield,
      Value<int> ldairfield}) {
    return HupgpFlightrouteCompanion(
      id: id ?? this.id,
      hupgpunitid: hupgpunitid ?? this.hupgpunitid,
      nickname: nickname ?? this.nickname,
      ldtime: ldtime ?? this.ldtime,
      totime: totime ?? this.totime,
      iscalculated: iscalculated ?? this.iscalculated,
      preparedby: preparedby ?? this.preparedby,
      istemplate: istemplate ?? this.istemplate,
      dafifdate: dafifdate ?? this.dafifdate,
      flightroutedata: flightroutedata ?? this.flightroutedata,
      toairfield: toairfield ?? this.toairfield,
      ldairfield: ldairfield ?? this.ldairfield,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (hupgpunitid.present) {
      map['hupgpunitid'] = Variable<int>(hupgpunitid.value);
    }
    if (nickname.present) {
      map['nickname'] = Variable<String>(nickname.value);
    }
    if (ldtime.present) {
      map['ldtime'] = Variable<DateTime>(ldtime.value);
    }
    if (totime.present) {
      map['totime'] = Variable<DateTime>(totime.value);
    }
    if (iscalculated.present) {
      map['iscalculated'] = Variable<bool>(iscalculated.value);
    }
    if (preparedby.present) {
      map['preparedby'] = Variable<String>(preparedby.value);
    }
    if (istemplate.present) {
      map['istemplate'] = Variable<bool>(istemplate.value);
    }
    if (dafifdate.present) {
      map['dafifdate'] = Variable<DateTime>(dafifdate.value);
    }
    if (flightroutedata.present) {
      map['flightroutedata'] = Variable<String>(flightroutedata.value);
    }
    if (toairfield.present) {
      map['toairfield'] = Variable<int>(toairfield.value);
    }
    if (ldairfield.present) {
      map['ldairfield'] = Variable<int>(ldairfield.value);
    }
    return map;
  }
}

class $HupgpFlightrouteTable extends HupgpFlightroute
    with TableInfo<$HupgpFlightrouteTable, hupgp_flightroute> {
  final GeneratedDatabase _db;
  final String _alias;
  $HupgpFlightrouteTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _hupgpunitidMeta =
      const VerificationMeta('hupgpunitid');
  GeneratedIntColumn _hupgpunitid;
  @override
  GeneratedIntColumn get hupgpunitid =>
      _hupgpunitid ??= _constructHupgpunitid();
  GeneratedIntColumn _constructHupgpunitid() {
    return GeneratedIntColumn(
      'hupgpunitid',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nicknameMeta = const VerificationMeta('nickname');
  GeneratedTextColumn _nickname;
  @override
  GeneratedTextColumn get nickname => _nickname ??= _constructNickname();
  GeneratedTextColumn _constructNickname() {
    return GeneratedTextColumn(
      'nickname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ldtimeMeta = const VerificationMeta('ldtime');
  GeneratedDateTimeColumn _ldtime;
  @override
  GeneratedDateTimeColumn get ldtime => _ldtime ??= _constructLdtime();
  GeneratedDateTimeColumn _constructLdtime() {
    return GeneratedDateTimeColumn(
      'ldtime',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totimeMeta = const VerificationMeta('totime');
  GeneratedDateTimeColumn _totime;
  @override
  GeneratedDateTimeColumn get totime => _totime ??= _constructTotime();
  GeneratedDateTimeColumn _constructTotime() {
    return GeneratedDateTimeColumn(
      'totime',
      $tableName,
      true,
    );
  }

  final VerificationMeta _iscalculatedMeta =
      const VerificationMeta('iscalculated');
  GeneratedBoolColumn _iscalculated;
  @override
  GeneratedBoolColumn get iscalculated =>
      _iscalculated ??= _constructIscalculated();
  GeneratedBoolColumn _constructIscalculated() {
    return GeneratedBoolColumn(
      'iscalculated',
      $tableName,
      true,
    );
  }

  final VerificationMeta _preparedbyMeta = const VerificationMeta('preparedby');
  GeneratedTextColumn _preparedby;
  @override
  GeneratedTextColumn get preparedby => _preparedby ??= _constructPreparedby();
  GeneratedTextColumn _constructPreparedby() {
    return GeneratedTextColumn(
      'preparedby',
      $tableName,
      true,
    );
  }

  final VerificationMeta _istemplateMeta = const VerificationMeta('istemplate');
  GeneratedBoolColumn _istemplate;
  @override
  GeneratedBoolColumn get istemplate => _istemplate ??= _constructIstemplate();
  GeneratedBoolColumn _constructIstemplate() {
    return GeneratedBoolColumn(
      'istemplate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dafifdateMeta = const VerificationMeta('dafifdate');
  GeneratedDateTimeColumn _dafifdate;
  @override
  GeneratedDateTimeColumn get dafifdate => _dafifdate ??= _constructDafifdate();
  GeneratedDateTimeColumn _constructDafifdate() {
    return GeneratedDateTimeColumn(
      'dafifdate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _flightroutedataMeta =
      const VerificationMeta('flightroutedata');
  GeneratedTextColumn _flightroutedata;
  @override
  GeneratedTextColumn get flightroutedata =>
      _flightroutedata ??= _constructFlightroutedata();
  GeneratedTextColumn _constructFlightroutedata() {
    return GeneratedTextColumn(
      'flightroutedata',
      $tableName,
      true,
    );
  }

  final VerificationMeta _toairfieldMeta = const VerificationMeta('toairfield');
  GeneratedIntColumn _toairfield;
  @override
  GeneratedIntColumn get toairfield => _toairfield ??= _constructToairfield();
  GeneratedIntColumn _constructToairfield() {
    return GeneratedIntColumn(
      'toairfield',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ldairfieldMeta = const VerificationMeta('ldairfield');
  GeneratedIntColumn _ldairfield;
  @override
  GeneratedIntColumn get ldairfield => _ldairfield ??= _constructLdairfield();
  GeneratedIntColumn _constructLdairfield() {
    return GeneratedIntColumn(
      'ldairfield',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        hupgpunitid,
        nickname,
        ldtime,
        totime,
        iscalculated,
        preparedby,
        istemplate,
        dafifdate,
        flightroutedata,
        toairfield,
        ldairfield
      ];
  @override
  $HupgpFlightrouteTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'hupgp_flightroute';
  @override
  final String actualTableName = 'hupgp_flightroute';
  @override
  VerificationContext validateIntegrity(Insertable<hupgp_flightroute> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('hupgpunitid')) {
      context.handle(
          _hupgpunitidMeta,
          hupgpunitid.isAcceptableOrUnknown(
              data['hupgpunitid'], _hupgpunitidMeta));
    }
    if (data.containsKey('nickname')) {
      context.handle(_nicknameMeta,
          nickname.isAcceptableOrUnknown(data['nickname'], _nicknameMeta));
    }
    if (data.containsKey('ldtime')) {
      context.handle(_ldtimeMeta,
          ldtime.isAcceptableOrUnknown(data['ldtime'], _ldtimeMeta));
    }
    if (data.containsKey('totime')) {
      context.handle(_totimeMeta,
          totime.isAcceptableOrUnknown(data['totime'], _totimeMeta));
    }
    if (data.containsKey('iscalculated')) {
      context.handle(
          _iscalculatedMeta,
          iscalculated.isAcceptableOrUnknown(
              data['iscalculated'], _iscalculatedMeta));
    }
    if (data.containsKey('preparedby')) {
      context.handle(
          _preparedbyMeta,
          preparedby.isAcceptableOrUnknown(
              data['preparedby'], _preparedbyMeta));
    }
    if (data.containsKey('istemplate')) {
      context.handle(
          _istemplateMeta,
          istemplate.isAcceptableOrUnknown(
              data['istemplate'], _istemplateMeta));
    }
    if (data.containsKey('dafifdate')) {
      context.handle(_dafifdateMeta,
          dafifdate.isAcceptableOrUnknown(data['dafifdate'], _dafifdateMeta));
    }
    if (data.containsKey('flightroutedata')) {
      context.handle(
          _flightroutedataMeta,
          flightroutedata.isAcceptableOrUnknown(
              data['flightroutedata'], _flightroutedataMeta));
    }
    if (data.containsKey('toairfield')) {
      context.handle(
          _toairfieldMeta,
          toairfield.isAcceptableOrUnknown(
              data['toairfield'], _toairfieldMeta));
    }
    if (data.containsKey('ldairfield')) {
      context.handle(
          _ldairfieldMeta,
          ldairfield.isAcceptableOrUnknown(
              data['ldairfield'], _ldairfieldMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  hupgp_flightroute map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return hupgp_flightroute.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $HupgpFlightrouteTable createAlias(String alias) {
    return $HupgpFlightrouteTable(_db, alias);
  }
}

class hupgp__mission_flight_route extends DataClass
    implements Insertable<hupgp__mission_flight_route> {
  final int id;
  final int aircrafttypeid;
  final DateTime creationdate;
  final DateTime modificationdate;
  final bool issmallinlet;
  final String missionname;
  final int hupgpunitid;
  final String preparedby;
  final String missionflightroutedata;
  hupgp__mission_flight_route(
      {@required this.id,
      this.aircrafttypeid,
      this.creationdate,
      this.modificationdate,
      this.issmallinlet,
      this.missionname,
      this.hupgpunitid,
      this.preparedby,
      this.missionflightroutedata});
  factory hupgp__mission_flight_route.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final boolType = db.typeSystem.forDartType<bool>();
    final stringType = db.typeSystem.forDartType<String>();
    return hupgp__mission_flight_route(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      aircrafttypeid: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}aircrafttypeid']),
      creationdate: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}creationdate']),
      modificationdate: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}modificationdate']),
      issmallinlet: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}issmallinlet']),
      missionname: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}missionname']),
      hupgpunitid: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}hupgpunitid']),
      preparedby: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}preparedby']),
      missionflightroutedata: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}missionflightroutedata']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || aircrafttypeid != null) {
      map['aircrafttypeid'] = Variable<int>(aircrafttypeid);
    }
    if (!nullToAbsent || creationdate != null) {
      map['creationdate'] = Variable<DateTime>(creationdate);
    }
    if (!nullToAbsent || modificationdate != null) {
      map['modificationdate'] = Variable<DateTime>(modificationdate);
    }
    if (!nullToAbsent || issmallinlet != null) {
      map['issmallinlet'] = Variable<bool>(issmallinlet);
    }
    if (!nullToAbsent || missionname != null) {
      map['missionname'] = Variable<String>(missionname);
    }
    if (!nullToAbsent || hupgpunitid != null) {
      map['hupgpunitid'] = Variable<int>(hupgpunitid);
    }
    if (!nullToAbsent || preparedby != null) {
      map['preparedby'] = Variable<String>(preparedby);
    }
    if (!nullToAbsent || missionflightroutedata != null) {
      map['missionflightroutedata'] = Variable<String>(missionflightroutedata);
    }
    return map;
  }

  factory hupgp__mission_flight_route.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return hupgp__mission_flight_route(
      id: serializer.fromJson<int>(json['id']),
      aircrafttypeid: serializer.fromJson<int>(json['aircrafttypeid']),
      creationdate: serializer.fromJson<DateTime>(json['creationdate']),
      modificationdate: serializer.fromJson<DateTime>(json['modificationdate']),
      issmallinlet: serializer.fromJson<bool>(json['issmallinlet']),
      missionname: serializer.fromJson<String>(json['missionname']),
      hupgpunitid: serializer.fromJson<int>(json['hupgpunitid']),
      preparedby: serializer.fromJson<String>(json['preparedby']),
      missionflightroutedata:
          serializer.fromJson<String>(json['missionflightroutedata']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'aircrafttypeid': serializer.toJson<int>(aircrafttypeid),
      'creationdate': serializer.toJson<DateTime>(creationdate),
      'modificationdate': serializer.toJson<DateTime>(modificationdate),
      'issmallinlet': serializer.toJson<bool>(issmallinlet),
      'missionname': serializer.toJson<String>(missionname),
      'hupgpunitid': serializer.toJson<int>(hupgpunitid),
      'preparedby': serializer.toJson<String>(preparedby),
      'missionflightroutedata':
          serializer.toJson<String>(missionflightroutedata),
    };
  }

  hupgp__mission_flight_route copyWith(
          {int id,
          int aircrafttypeid,
          DateTime creationdate,
          DateTime modificationdate,
          bool issmallinlet,
          String missionname,
          int hupgpunitid,
          String preparedby,
          String missionflightroutedata}) =>
      hupgp__mission_flight_route(
        id: id ?? this.id,
        aircrafttypeid: aircrafttypeid ?? this.aircrafttypeid,
        creationdate: creationdate ?? this.creationdate,
        modificationdate: modificationdate ?? this.modificationdate,
        issmallinlet: issmallinlet ?? this.issmallinlet,
        missionname: missionname ?? this.missionname,
        hupgpunitid: hupgpunitid ?? this.hupgpunitid,
        preparedby: preparedby ?? this.preparedby,
        missionflightroutedata:
            missionflightroutedata ?? this.missionflightroutedata,
      );
  @override
  String toString() {
    return (StringBuffer('hupgp__mission_flight_route(')
          ..write('id: $id, ')
          ..write('aircrafttypeid: $aircrafttypeid, ')
          ..write('creationdate: $creationdate, ')
          ..write('modificationdate: $modificationdate, ')
          ..write('issmallinlet: $issmallinlet, ')
          ..write('missionname: $missionname, ')
          ..write('hupgpunitid: $hupgpunitid, ')
          ..write('preparedby: $preparedby, ')
          ..write('missionflightroutedata: $missionflightroutedata')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          aircrafttypeid.hashCode,
          $mrjc(
              creationdate.hashCode,
              $mrjc(
                  modificationdate.hashCode,
                  $mrjc(
                      issmallinlet.hashCode,
                      $mrjc(
                          missionname.hashCode,
                          $mrjc(
                              hupgpunitid.hashCode,
                              $mrjc(preparedby.hashCode,
                                  missionflightroutedata.hashCode)))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is hupgp__mission_flight_route &&
          other.id == this.id &&
          other.aircrafttypeid == this.aircrafttypeid &&
          other.creationdate == this.creationdate &&
          other.modificationdate == this.modificationdate &&
          other.issmallinlet == this.issmallinlet &&
          other.missionname == this.missionname &&
          other.hupgpunitid == this.hupgpunitid &&
          other.preparedby == this.preparedby &&
          other.missionflightroutedata == this.missionflightroutedata);
}

class HupgpMissionFlightRouteCompanion
    extends UpdateCompanion<hupgp__mission_flight_route> {
  final Value<int> id;
  final Value<int> aircrafttypeid;
  final Value<DateTime> creationdate;
  final Value<DateTime> modificationdate;
  final Value<bool> issmallinlet;
  final Value<String> missionname;
  final Value<int> hupgpunitid;
  final Value<String> preparedby;
  final Value<String> missionflightroutedata;
  const HupgpMissionFlightRouteCompanion({
    this.id = const Value.absent(),
    this.aircrafttypeid = const Value.absent(),
    this.creationdate = const Value.absent(),
    this.modificationdate = const Value.absent(),
    this.issmallinlet = const Value.absent(),
    this.missionname = const Value.absent(),
    this.hupgpunitid = const Value.absent(),
    this.preparedby = const Value.absent(),
    this.missionflightroutedata = const Value.absent(),
  });
  HupgpMissionFlightRouteCompanion.insert({
    this.id = const Value.absent(),
    this.aircrafttypeid = const Value.absent(),
    this.creationdate = const Value.absent(),
    this.modificationdate = const Value.absent(),
    this.issmallinlet = const Value.absent(),
    this.missionname = const Value.absent(),
    this.hupgpunitid = const Value.absent(),
    this.preparedby = const Value.absent(),
    this.missionflightroutedata = const Value.absent(),
  });
  static Insertable<hupgp__mission_flight_route> custom({
    Expression<int> id,
    Expression<int> aircrafttypeid,
    Expression<DateTime> creationdate,
    Expression<DateTime> modificationdate,
    Expression<bool> issmallinlet,
    Expression<String> missionname,
    Expression<int> hupgpunitid,
    Expression<String> preparedby,
    Expression<String> missionflightroutedata,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (aircrafttypeid != null) 'aircrafttypeid': aircrafttypeid,
      if (creationdate != null) 'creationdate': creationdate,
      if (modificationdate != null) 'modificationdate': modificationdate,
      if (issmallinlet != null) 'issmallinlet': issmallinlet,
      if (missionname != null) 'missionname': missionname,
      if (hupgpunitid != null) 'hupgpunitid': hupgpunitid,
      if (preparedby != null) 'preparedby': preparedby,
      if (missionflightroutedata != null)
        'missionflightroutedata': missionflightroutedata,
    });
  }

  HupgpMissionFlightRouteCompanion copyWith(
      {Value<int> id,
      Value<int> aircrafttypeid,
      Value<DateTime> creationdate,
      Value<DateTime> modificationdate,
      Value<bool> issmallinlet,
      Value<String> missionname,
      Value<int> hupgpunitid,
      Value<String> preparedby,
      Value<String> missionflightroutedata}) {
    return HupgpMissionFlightRouteCompanion(
      id: id ?? this.id,
      aircrafttypeid: aircrafttypeid ?? this.aircrafttypeid,
      creationdate: creationdate ?? this.creationdate,
      modificationdate: modificationdate ?? this.modificationdate,
      issmallinlet: issmallinlet ?? this.issmallinlet,
      missionname: missionname ?? this.missionname,
      hupgpunitid: hupgpunitid ?? this.hupgpunitid,
      preparedby: preparedby ?? this.preparedby,
      missionflightroutedata:
          missionflightroutedata ?? this.missionflightroutedata,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (aircrafttypeid.present) {
      map['aircrafttypeid'] = Variable<int>(aircrafttypeid.value);
    }
    if (creationdate.present) {
      map['creationdate'] = Variable<DateTime>(creationdate.value);
    }
    if (modificationdate.present) {
      map['modificationdate'] = Variable<DateTime>(modificationdate.value);
    }
    if (issmallinlet.present) {
      map['issmallinlet'] = Variable<bool>(issmallinlet.value);
    }
    if (missionname.present) {
      map['missionname'] = Variable<String>(missionname.value);
    }
    if (hupgpunitid.present) {
      map['hupgpunitid'] = Variable<int>(hupgpunitid.value);
    }
    if (preparedby.present) {
      map['preparedby'] = Variable<String>(preparedby.value);
    }
    if (missionflightroutedata.present) {
      map['missionflightroutedata'] =
          Variable<String>(missionflightroutedata.value);
    }
    return map;
  }
}

class $HupgpMissionFlightRouteTable extends HupgpMissionFlightRoute
    with TableInfo<$HupgpMissionFlightRouteTable, hupgp__mission_flight_route> {
  final GeneratedDatabase _db;
  final String _alias;
  $HupgpMissionFlightRouteTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _aircrafttypeidMeta =
      const VerificationMeta('aircrafttypeid');
  GeneratedIntColumn _aircrafttypeid;
  @override
  GeneratedIntColumn get aircrafttypeid =>
      _aircrafttypeid ??= _constructAircrafttypeid();
  GeneratedIntColumn _constructAircrafttypeid() {
    return GeneratedIntColumn(
      'aircrafttypeid',
      $tableName,
      true,
    );
  }

  final VerificationMeta _creationdateMeta =
      const VerificationMeta('creationdate');
  GeneratedDateTimeColumn _creationdate;
  @override
  GeneratedDateTimeColumn get creationdate =>
      _creationdate ??= _constructCreationdate();
  GeneratedDateTimeColumn _constructCreationdate() {
    return GeneratedDateTimeColumn(
      'creationdate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _modificationdateMeta =
      const VerificationMeta('modificationdate');
  GeneratedDateTimeColumn _modificationdate;
  @override
  GeneratedDateTimeColumn get modificationdate =>
      _modificationdate ??= _constructModificationdate();
  GeneratedDateTimeColumn _constructModificationdate() {
    return GeneratedDateTimeColumn(
      'modificationdate',
      $tableName,
      true,
    );
  }

  final VerificationMeta _issmallinletMeta =
      const VerificationMeta('issmallinlet');
  GeneratedBoolColumn _issmallinlet;
  @override
  GeneratedBoolColumn get issmallinlet =>
      _issmallinlet ??= _constructIssmallinlet();
  GeneratedBoolColumn _constructIssmallinlet() {
    return GeneratedBoolColumn(
      'issmallinlet',
      $tableName,
      true,
    );
  }

  final VerificationMeta _missionnameMeta =
      const VerificationMeta('missionname');
  GeneratedTextColumn _missionname;
  @override
  GeneratedTextColumn get missionname =>
      _missionname ??= _constructMissionname();
  GeneratedTextColumn _constructMissionname() {
    return GeneratedTextColumn(
      'missionname',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hupgpunitidMeta =
      const VerificationMeta('hupgpunitid');
  GeneratedIntColumn _hupgpunitid;
  @override
  GeneratedIntColumn get hupgpunitid =>
      _hupgpunitid ??= _constructHupgpunitid();
  GeneratedIntColumn _constructHupgpunitid() {
    return GeneratedIntColumn(
      'hupgpunitid',
      $tableName,
      true,
    );
  }

  final VerificationMeta _preparedbyMeta = const VerificationMeta('preparedby');
  GeneratedTextColumn _preparedby;
  @override
  GeneratedTextColumn get preparedby => _preparedby ??= _constructPreparedby();
  GeneratedTextColumn _constructPreparedby() {
    return GeneratedTextColumn(
      'preparedby',
      $tableName,
      true,
    );
  }

  final VerificationMeta _missionflightroutedataMeta =
      const VerificationMeta('missionflightroutedata');
  GeneratedTextColumn _missionflightroutedata;
  @override
  GeneratedTextColumn get missionflightroutedata =>
      _missionflightroutedata ??= _constructMissionflightroutedata();
  GeneratedTextColumn _constructMissionflightroutedata() {
    return GeneratedTextColumn(
      'missionflightroutedata',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        aircrafttypeid,
        creationdate,
        modificationdate,
        issmallinlet,
        missionname,
        hupgpunitid,
        preparedby,
        missionflightroutedata
      ];
  @override
  $HupgpMissionFlightRouteTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'hupgp_mission_flight_route';
  @override
  final String actualTableName = 'hupgp_mission_flight_route';
  @override
  VerificationContext validateIntegrity(
      Insertable<hupgp__mission_flight_route> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('aircrafttypeid')) {
      context.handle(
          _aircrafttypeidMeta,
          aircrafttypeid.isAcceptableOrUnknown(
              data['aircrafttypeid'], _aircrafttypeidMeta));
    }
    if (data.containsKey('creationdate')) {
      context.handle(
          _creationdateMeta,
          creationdate.isAcceptableOrUnknown(
              data['creationdate'], _creationdateMeta));
    }
    if (data.containsKey('modificationdate')) {
      context.handle(
          _modificationdateMeta,
          modificationdate.isAcceptableOrUnknown(
              data['modificationdate'], _modificationdateMeta));
    }
    if (data.containsKey('issmallinlet')) {
      context.handle(
          _issmallinletMeta,
          issmallinlet.isAcceptableOrUnknown(
              data['issmallinlet'], _issmallinletMeta));
    }
    if (data.containsKey('missionname')) {
      context.handle(
          _missionnameMeta,
          missionname.isAcceptableOrUnknown(
              data['missionname'], _missionnameMeta));
    }
    if (data.containsKey('hupgpunitid')) {
      context.handle(
          _hupgpunitidMeta,
          hupgpunitid.isAcceptableOrUnknown(
              data['hupgpunitid'], _hupgpunitidMeta));
    }
    if (data.containsKey('preparedby')) {
      context.handle(
          _preparedbyMeta,
          preparedby.isAcceptableOrUnknown(
              data['preparedby'], _preparedbyMeta));
    }
    if (data.containsKey('missionflightroutedata')) {
      context.handle(
          _missionflightroutedataMeta,
          missionflightroutedata.isAcceptableOrUnknown(
              data['missionflightroutedata'], _missionflightroutedataMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  hupgp__mission_flight_route map(Map<String, dynamic> data,
      {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return hupgp__mission_flight_route.fromData(data, _db,
        prefix: effectivePrefix);
  }

  @override
  $HupgpMissionFlightRouteTable createAlias(String alias) {
    return $HupgpMissionFlightRouteTable(_db, alias);
  }
}

class hupgp_z_material_aircraft_type extends DataClass
    implements Insertable<hupgp_z_material_aircraft_type> {
  final int id;
  final int c2rsc_material_aircraft_type_id;
  final int c2rsc_material_id;
  final String sms_mnemonic;
  final double drag;
  final double c2rsc_drag;
  final double weight;
  final int max_load_amount;
  final String name_mm_pp;
  final String type_mm;
  final bool isbomb;
  final bool isammunition;
  final bool issuspension;
  final bool ispod;
  final bool istank;
  final bool isbullet;
  final bool ischaff;
  final bool isflare;
  final bool isdeleted;
  final bool isairtoground;
  final bool issuitableammunition;
  final String tank_capacity_unit;
  final double tank_capacity;
  final int suspension_load_capacity;
  final String ammunition_class_name;
  final int aircraft_type_id;
  final String weight_unit;
  final String ammunition_direction_type;
  final bool classicalmunition;
  final bool localmunition;
  hupgp_z_material_aircraft_type(
      {@required this.id,
      this.c2rsc_material_aircraft_type_id,
      this.c2rsc_material_id,
      this.sms_mnemonic,
      this.drag,
      this.c2rsc_drag,
      this.weight,
      this.max_load_amount,
      this.name_mm_pp,
      this.type_mm,
      this.isbomb,
      this.isammunition,
      this.issuspension,
      this.ispod,
      this.istank,
      this.isbullet,
      this.ischaff,
      this.isflare,
      this.isdeleted,
      this.isairtoground,
      this.issuitableammunition,
      this.tank_capacity_unit,
      this.tank_capacity,
      this.suspension_load_capacity,
      this.ammunition_class_name,
      this.aircraft_type_id,
      this.weight_unit,
      this.ammunition_direction_type,
      this.classicalmunition,
      this.localmunition});
  factory hupgp_z_material_aircraft_type.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    final boolType = db.typeSystem.forDartType<bool>();
    return hupgp_z_material_aircraft_type(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      c2rsc_material_aircraft_type_id: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}c2rsc_material_aircraft_type_id']),
      c2rsc_material_id: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}c2rsc_material_id']),
      sms_mnemonic: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}sms_mnemonic']),
      drag: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}drag']),
      c2rsc_drag: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}c2rsc_drag']),
      weight:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}weight']),
      max_load_amount: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}max_load_amount']),
      name_mm_pp: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}name_mm_pp']),
      type_mm:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}type_mm']),
      isbomb:
          boolType.mapFromDatabaseResponse(data['${effectivePrefix}isbomb']),
      isammunition: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}isammunition']),
      issuspension: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}issuspension']),
      ispod: boolType.mapFromDatabaseResponse(data['${effectivePrefix}ispod']),
      istank:
          boolType.mapFromDatabaseResponse(data['${effectivePrefix}istank']),
      isbullet:
          boolType.mapFromDatabaseResponse(data['${effectivePrefix}isbullet']),
      ischaff:
          boolType.mapFromDatabaseResponse(data['${effectivePrefix}ischaff']),
      isflare:
          boolType.mapFromDatabaseResponse(data['${effectivePrefix}isflare']),
      isdeleted:
          boolType.mapFromDatabaseResponse(data['${effectivePrefix}isdeleted']),
      isairtoground: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}isairtoground']),
      issuitableammunition: boolType.mapFromDatabaseResponse(
          data['${effectivePrefix}issuitableammunition']),
      tank_capacity_unit: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}tank_capacity_unit']),
      tank_capacity: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}tank_capacity']),
      suspension_load_capacity: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}suspension_load_capacity']),
      ammunition_class_name: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}ammunition_class_name']),
      aircraft_type_id: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}aircraft_type_id']),
      weight_unit: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}weight_unit']),
      ammunition_direction_type: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}ammunition_direction_type']),
      classicalmunition: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}classicalmunition']),
      localmunition: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}localmunition']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || c2rsc_material_aircraft_type_id != null) {
      map['c2rsc_material_aircraft_type_id'] =
          Variable<int>(c2rsc_material_aircraft_type_id);
    }
    if (!nullToAbsent || c2rsc_material_id != null) {
      map['c2rsc_material_id'] = Variable<int>(c2rsc_material_id);
    }
    if (!nullToAbsent || sms_mnemonic != null) {
      map['sms_mnemonic'] = Variable<String>(sms_mnemonic);
    }
    if (!nullToAbsent || drag != null) {
      map['drag'] = Variable<double>(drag);
    }
    if (!nullToAbsent || c2rsc_drag != null) {
      map['c2rsc_drag'] = Variable<double>(c2rsc_drag);
    }
    if (!nullToAbsent || weight != null) {
      map['weight'] = Variable<double>(weight);
    }
    if (!nullToAbsent || max_load_amount != null) {
      map['max_load_amount'] = Variable<int>(max_load_amount);
    }
    if (!nullToAbsent || name_mm_pp != null) {
      map['name_mm_pp'] = Variable<String>(name_mm_pp);
    }
    if (!nullToAbsent || type_mm != null) {
      map['type_mm'] = Variable<String>(type_mm);
    }
    if (!nullToAbsent || isbomb != null) {
      map['isbomb'] = Variable<bool>(isbomb);
    }
    if (!nullToAbsent || isammunition != null) {
      map['isammunition'] = Variable<bool>(isammunition);
    }
    if (!nullToAbsent || issuspension != null) {
      map['issuspension'] = Variable<bool>(issuspension);
    }
    if (!nullToAbsent || ispod != null) {
      map['ispod'] = Variable<bool>(ispod);
    }
    if (!nullToAbsent || istank != null) {
      map['istank'] = Variable<bool>(istank);
    }
    if (!nullToAbsent || isbullet != null) {
      map['isbullet'] = Variable<bool>(isbullet);
    }
    if (!nullToAbsent || ischaff != null) {
      map['ischaff'] = Variable<bool>(ischaff);
    }
    if (!nullToAbsent || isflare != null) {
      map['isflare'] = Variable<bool>(isflare);
    }
    if (!nullToAbsent || isdeleted != null) {
      map['isdeleted'] = Variable<bool>(isdeleted);
    }
    if (!nullToAbsent || isairtoground != null) {
      map['isairtoground'] = Variable<bool>(isairtoground);
    }
    if (!nullToAbsent || issuitableammunition != null) {
      map['issuitableammunition'] = Variable<bool>(issuitableammunition);
    }
    if (!nullToAbsent || tank_capacity_unit != null) {
      map['tank_capacity_unit'] = Variable<String>(tank_capacity_unit);
    }
    if (!nullToAbsent || tank_capacity != null) {
      map['tank_capacity'] = Variable<double>(tank_capacity);
    }
    if (!nullToAbsent || suspension_load_capacity != null) {
      map['suspension_load_capacity'] = Variable<int>(suspension_load_capacity);
    }
    if (!nullToAbsent || ammunition_class_name != null) {
      map['ammunition_class_name'] = Variable<String>(ammunition_class_name);
    }
    if (!nullToAbsent || aircraft_type_id != null) {
      map['aircraft_type_id'] = Variable<int>(aircraft_type_id);
    }
    if (!nullToAbsent || weight_unit != null) {
      map['weight_unit'] = Variable<String>(weight_unit);
    }
    if (!nullToAbsent || ammunition_direction_type != null) {
      map['ammunition_direction_type'] =
          Variable<String>(ammunition_direction_type);
    }
    if (!nullToAbsent || classicalmunition != null) {
      map['classicalmunition'] = Variable<bool>(classicalmunition);
    }
    if (!nullToAbsent || localmunition != null) {
      map['localmunition'] = Variable<bool>(localmunition);
    }
    return map;
  }

  factory hupgp_z_material_aircraft_type.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return hupgp_z_material_aircraft_type(
      id: serializer.fromJson<int>(json['id']),
      c2rsc_material_aircraft_type_id:
          serializer.fromJson<int>(json['c2rsc_material_aircraft_type_id']),
      c2rsc_material_id: serializer.fromJson<int>(json['c2rsc_material_id']),
      sms_mnemonic: serializer.fromJson<String>(json['sms_mnemonic']),
      drag: serializer.fromJson<double>(json['drag']),
      c2rsc_drag: serializer.fromJson<double>(json['c2rsc_drag']),
      weight: serializer.fromJson<double>(json['weight']),
      max_load_amount: serializer.fromJson<int>(json['max_load_amount']),
      name_mm_pp: serializer.fromJson<String>(json['name_mm_pp']),
      type_mm: serializer.fromJson<String>(json['type_mm']),
      isbomb: serializer.fromJson<bool>(json['isbomb']),
      isammunition: serializer.fromJson<bool>(json['isammunition']),
      issuspension: serializer.fromJson<bool>(json['issuspension']),
      ispod: serializer.fromJson<bool>(json['ispod']),
      istank: serializer.fromJson<bool>(json['istank']),
      isbullet: serializer.fromJson<bool>(json['isbullet']),
      ischaff: serializer.fromJson<bool>(json['ischaff']),
      isflare: serializer.fromJson<bool>(json['isflare']),
      isdeleted: serializer.fromJson<bool>(json['isdeleted']),
      isairtoground: serializer.fromJson<bool>(json['isairtoground']),
      issuitableammunition:
          serializer.fromJson<bool>(json['issuitableammunition']),
      tank_capacity_unit:
          serializer.fromJson<String>(json['tank_capacity_unit']),
      tank_capacity: serializer.fromJson<double>(json['tank_capacity']),
      suspension_load_capacity:
          serializer.fromJson<int>(json['suspension_load_capacity']),
      ammunition_class_name:
          serializer.fromJson<String>(json['ammunition_class_name']),
      aircraft_type_id: serializer.fromJson<int>(json['aircraft_type_id']),
      weight_unit: serializer.fromJson<String>(json['weight_unit']),
      ammunition_direction_type:
          serializer.fromJson<String>(json['ammunition_direction_type']),
      classicalmunition: serializer.fromJson<bool>(json['classicalmunition']),
      localmunition: serializer.fromJson<bool>(json['localmunition']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'c2rsc_material_aircraft_type_id':
          serializer.toJson<int>(c2rsc_material_aircraft_type_id),
      'c2rsc_material_id': serializer.toJson<int>(c2rsc_material_id),
      'sms_mnemonic': serializer.toJson<String>(sms_mnemonic),
      'drag': serializer.toJson<double>(drag),
      'c2rsc_drag': serializer.toJson<double>(c2rsc_drag),
      'weight': serializer.toJson<double>(weight),
      'max_load_amount': serializer.toJson<int>(max_load_amount),
      'name_mm_pp': serializer.toJson<String>(name_mm_pp),
      'type_mm': serializer.toJson<String>(type_mm),
      'isbomb': serializer.toJson<bool>(isbomb),
      'isammunition': serializer.toJson<bool>(isammunition),
      'issuspension': serializer.toJson<bool>(issuspension),
      'ispod': serializer.toJson<bool>(ispod),
      'istank': serializer.toJson<bool>(istank),
      'isbullet': serializer.toJson<bool>(isbullet),
      'ischaff': serializer.toJson<bool>(ischaff),
      'isflare': serializer.toJson<bool>(isflare),
      'isdeleted': serializer.toJson<bool>(isdeleted),
      'isairtoground': serializer.toJson<bool>(isairtoground),
      'issuitableammunition': serializer.toJson<bool>(issuitableammunition),
      'tank_capacity_unit': serializer.toJson<String>(tank_capacity_unit),
      'tank_capacity': serializer.toJson<double>(tank_capacity),
      'suspension_load_capacity':
          serializer.toJson<int>(suspension_load_capacity),
      'ammunition_class_name': serializer.toJson<String>(ammunition_class_name),
      'aircraft_type_id': serializer.toJson<int>(aircraft_type_id),
      'weight_unit': serializer.toJson<String>(weight_unit),
      'ammunition_direction_type':
          serializer.toJson<String>(ammunition_direction_type),
      'classicalmunition': serializer.toJson<bool>(classicalmunition),
      'localmunition': serializer.toJson<bool>(localmunition),
    };
  }

  hupgp_z_material_aircraft_type copyWith(
          {int id,
          int c2rsc_material_aircraft_type_id,
          int c2rsc_material_id,
          String sms_mnemonic,
          double drag,
          double c2rsc_drag,
          double weight,
          int max_load_amount,
          String name_mm_pp,
          String type_mm,
          bool isbomb,
          bool isammunition,
          bool issuspension,
          bool ispod,
          bool istank,
          bool isbullet,
          bool ischaff,
          bool isflare,
          bool isdeleted,
          bool isairtoground,
          bool issuitableammunition,
          String tank_capacity_unit,
          double tank_capacity,
          int suspension_load_capacity,
          String ammunition_class_name,
          int aircraft_type_id,
          String weight_unit,
          String ammunition_direction_type,
          bool classicalmunition,
          bool localmunition}) =>
      hupgp_z_material_aircraft_type(
        id: id ?? this.id,
        c2rsc_material_aircraft_type_id: c2rsc_material_aircraft_type_id ??
            this.c2rsc_material_aircraft_type_id,
        c2rsc_material_id: c2rsc_material_id ?? this.c2rsc_material_id,
        sms_mnemonic: sms_mnemonic ?? this.sms_mnemonic,
        drag: drag ?? this.drag,
        c2rsc_drag: c2rsc_drag ?? this.c2rsc_drag,
        weight: weight ?? this.weight,
        max_load_amount: max_load_amount ?? this.max_load_amount,
        name_mm_pp: name_mm_pp ?? this.name_mm_pp,
        type_mm: type_mm ?? this.type_mm,
        isbomb: isbomb ?? this.isbomb,
        isammunition: isammunition ?? this.isammunition,
        issuspension: issuspension ?? this.issuspension,
        ispod: ispod ?? this.ispod,
        istank: istank ?? this.istank,
        isbullet: isbullet ?? this.isbullet,
        ischaff: ischaff ?? this.ischaff,
        isflare: isflare ?? this.isflare,
        isdeleted: isdeleted ?? this.isdeleted,
        isairtoground: isairtoground ?? this.isairtoground,
        issuitableammunition: issuitableammunition ?? this.issuitableammunition,
        tank_capacity_unit: tank_capacity_unit ?? this.tank_capacity_unit,
        tank_capacity: tank_capacity ?? this.tank_capacity,
        suspension_load_capacity:
            suspension_load_capacity ?? this.suspension_load_capacity,
        ammunition_class_name:
            ammunition_class_name ?? this.ammunition_class_name,
        aircraft_type_id: aircraft_type_id ?? this.aircraft_type_id,
        weight_unit: weight_unit ?? this.weight_unit,
        ammunition_direction_type:
            ammunition_direction_type ?? this.ammunition_direction_type,
        classicalmunition: classicalmunition ?? this.classicalmunition,
        localmunition: localmunition ?? this.localmunition,
      );
  @override
  String toString() {
    return (StringBuffer('hupgp_z_material_aircraft_type(')
          ..write('id: $id, ')
          ..write(
              'c2rsc_material_aircraft_type_id: $c2rsc_material_aircraft_type_id, ')
          ..write('c2rsc_material_id: $c2rsc_material_id, ')
          ..write('sms_mnemonic: $sms_mnemonic, ')
          ..write('drag: $drag, ')
          ..write('c2rsc_drag: $c2rsc_drag, ')
          ..write('weight: $weight, ')
          ..write('max_load_amount: $max_load_amount, ')
          ..write('name_mm_pp: $name_mm_pp, ')
          ..write('type_mm: $type_mm, ')
          ..write('isbomb: $isbomb, ')
          ..write('isammunition: $isammunition, ')
          ..write('issuspension: $issuspension, ')
          ..write('ispod: $ispod, ')
          ..write('istank: $istank, ')
          ..write('isbullet: $isbullet, ')
          ..write('ischaff: $ischaff, ')
          ..write('isflare: $isflare, ')
          ..write('isdeleted: $isdeleted, ')
          ..write('isairtoground: $isairtoground, ')
          ..write('issuitableammunition: $issuitableammunition, ')
          ..write('tank_capacity_unit: $tank_capacity_unit, ')
          ..write('tank_capacity: $tank_capacity, ')
          ..write('suspension_load_capacity: $suspension_load_capacity, ')
          ..write('ammunition_class_name: $ammunition_class_name, ')
          ..write('aircraft_type_id: $aircraft_type_id, ')
          ..write('weight_unit: $weight_unit, ')
          ..write('ammunition_direction_type: $ammunition_direction_type, ')
          ..write('classicalmunition: $classicalmunition, ')
          ..write('localmunition: $localmunition')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          c2rsc_material_aircraft_type_id.hashCode,
          $mrjc(
              c2rsc_material_id.hashCode,
              $mrjc(
                  sms_mnemonic.hashCode,
                  $mrjc(
                      drag.hashCode,
                      $mrjc(
                          c2rsc_drag.hashCode,
                          $mrjc(
                              weight.hashCode,
                              $mrjc(
                                  max_load_amount.hashCode,
                                  $mrjc(
                                      name_mm_pp.hashCode,
                                      $mrjc(
                                          type_mm.hashCode,
                                          $mrjc(
                                              isbomb.hashCode,
                                              $mrjc(
                                                  isammunition.hashCode,
                                                  $mrjc(
                                                      issuspension.hashCode,
                                                      $mrjc(
                                                          ispod.hashCode,
                                                          $mrjc(
                                                              istank.hashCode,
                                                              $mrjc(
                                                                  isbullet
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      ischaff
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          isflare
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              isdeleted.hashCode,
                                                                              $mrjc(isairtoground.hashCode, $mrjc(issuitableammunition.hashCode, $mrjc(tank_capacity_unit.hashCode, $mrjc(tank_capacity.hashCode, $mrjc(suspension_load_capacity.hashCode, $mrjc(ammunition_class_name.hashCode, $mrjc(aircraft_type_id.hashCode, $mrjc(weight_unit.hashCode, $mrjc(ammunition_direction_type.hashCode, $mrjc(classicalmunition.hashCode, localmunition.hashCode))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is hupgp_z_material_aircraft_type &&
          other.id == this.id &&
          other.c2rsc_material_aircraft_type_id ==
              this.c2rsc_material_aircraft_type_id &&
          other.c2rsc_material_id == this.c2rsc_material_id &&
          other.sms_mnemonic == this.sms_mnemonic &&
          other.drag == this.drag &&
          other.c2rsc_drag == this.c2rsc_drag &&
          other.weight == this.weight &&
          other.max_load_amount == this.max_load_amount &&
          other.name_mm_pp == this.name_mm_pp &&
          other.type_mm == this.type_mm &&
          other.isbomb == this.isbomb &&
          other.isammunition == this.isammunition &&
          other.issuspension == this.issuspension &&
          other.ispod == this.ispod &&
          other.istank == this.istank &&
          other.isbullet == this.isbullet &&
          other.ischaff == this.ischaff &&
          other.isflare == this.isflare &&
          other.isdeleted == this.isdeleted &&
          other.isairtoground == this.isairtoground &&
          other.issuitableammunition == this.issuitableammunition &&
          other.tank_capacity_unit == this.tank_capacity_unit &&
          other.tank_capacity == this.tank_capacity &&
          other.suspension_load_capacity == this.suspension_load_capacity &&
          other.ammunition_class_name == this.ammunition_class_name &&
          other.aircraft_type_id == this.aircraft_type_id &&
          other.weight_unit == this.weight_unit &&
          other.ammunition_direction_type == this.ammunition_direction_type &&
          other.classicalmunition == this.classicalmunition &&
          other.localmunition == this.localmunition);
}

class HupgpZMaterialAircraftTypeCompanion
    extends UpdateCompanion<hupgp_z_material_aircraft_type> {
  final Value<int> id;
  final Value<int> c2rsc_material_aircraft_type_id;
  final Value<int> c2rsc_material_id;
  final Value<String> sms_mnemonic;
  final Value<double> drag;
  final Value<double> c2rsc_drag;
  final Value<double> weight;
  final Value<int> max_load_amount;
  final Value<String> name_mm_pp;
  final Value<String> type_mm;
  final Value<bool> isbomb;
  final Value<bool> isammunition;
  final Value<bool> issuspension;
  final Value<bool> ispod;
  final Value<bool> istank;
  final Value<bool> isbullet;
  final Value<bool> ischaff;
  final Value<bool> isflare;
  final Value<bool> isdeleted;
  final Value<bool> isairtoground;
  final Value<bool> issuitableammunition;
  final Value<String> tank_capacity_unit;
  final Value<double> tank_capacity;
  final Value<int> suspension_load_capacity;
  final Value<String> ammunition_class_name;
  final Value<int> aircraft_type_id;
  final Value<String> weight_unit;
  final Value<String> ammunition_direction_type;
  final Value<bool> classicalmunition;
  final Value<bool> localmunition;
  const HupgpZMaterialAircraftTypeCompanion({
    this.id = const Value.absent(),
    this.c2rsc_material_aircraft_type_id = const Value.absent(),
    this.c2rsc_material_id = const Value.absent(),
    this.sms_mnemonic = const Value.absent(),
    this.drag = const Value.absent(),
    this.c2rsc_drag = const Value.absent(),
    this.weight = const Value.absent(),
    this.max_load_amount = const Value.absent(),
    this.name_mm_pp = const Value.absent(),
    this.type_mm = const Value.absent(),
    this.isbomb = const Value.absent(),
    this.isammunition = const Value.absent(),
    this.issuspension = const Value.absent(),
    this.ispod = const Value.absent(),
    this.istank = const Value.absent(),
    this.isbullet = const Value.absent(),
    this.ischaff = const Value.absent(),
    this.isflare = const Value.absent(),
    this.isdeleted = const Value.absent(),
    this.isairtoground = const Value.absent(),
    this.issuitableammunition = const Value.absent(),
    this.tank_capacity_unit = const Value.absent(),
    this.tank_capacity = const Value.absent(),
    this.suspension_load_capacity = const Value.absent(),
    this.ammunition_class_name = const Value.absent(),
    this.aircraft_type_id = const Value.absent(),
    this.weight_unit = const Value.absent(),
    this.ammunition_direction_type = const Value.absent(),
    this.classicalmunition = const Value.absent(),
    this.localmunition = const Value.absent(),
  });
  HupgpZMaterialAircraftTypeCompanion.insert({
    this.id = const Value.absent(),
    this.c2rsc_material_aircraft_type_id = const Value.absent(),
    this.c2rsc_material_id = const Value.absent(),
    this.sms_mnemonic = const Value.absent(),
    this.drag = const Value.absent(),
    this.c2rsc_drag = const Value.absent(),
    this.weight = const Value.absent(),
    this.max_load_amount = const Value.absent(),
    this.name_mm_pp = const Value.absent(),
    this.type_mm = const Value.absent(),
    this.isbomb = const Value.absent(),
    this.isammunition = const Value.absent(),
    this.issuspension = const Value.absent(),
    this.ispod = const Value.absent(),
    this.istank = const Value.absent(),
    this.isbullet = const Value.absent(),
    this.ischaff = const Value.absent(),
    this.isflare = const Value.absent(),
    this.isdeleted = const Value.absent(),
    this.isairtoground = const Value.absent(),
    this.issuitableammunition = const Value.absent(),
    this.tank_capacity_unit = const Value.absent(),
    this.tank_capacity = const Value.absent(),
    this.suspension_load_capacity = const Value.absent(),
    this.ammunition_class_name = const Value.absent(),
    this.aircraft_type_id = const Value.absent(),
    this.weight_unit = const Value.absent(),
    this.ammunition_direction_type = const Value.absent(),
    this.classicalmunition = const Value.absent(),
    this.localmunition = const Value.absent(),
  });
  static Insertable<hupgp_z_material_aircraft_type> custom({
    Expression<int> id,
    Expression<int> c2rsc_material_aircraft_type_id,
    Expression<int> c2rsc_material_id,
    Expression<String> sms_mnemonic,
    Expression<double> drag,
    Expression<double> c2rsc_drag,
    Expression<double> weight,
    Expression<int> max_load_amount,
    Expression<String> name_mm_pp,
    Expression<String> type_mm,
    Expression<bool> isbomb,
    Expression<bool> isammunition,
    Expression<bool> issuspension,
    Expression<bool> ispod,
    Expression<bool> istank,
    Expression<bool> isbullet,
    Expression<bool> ischaff,
    Expression<bool> isflare,
    Expression<bool> isdeleted,
    Expression<bool> isairtoground,
    Expression<bool> issuitableammunition,
    Expression<String> tank_capacity_unit,
    Expression<double> tank_capacity,
    Expression<int> suspension_load_capacity,
    Expression<String> ammunition_class_name,
    Expression<int> aircraft_type_id,
    Expression<String> weight_unit,
    Expression<String> ammunition_direction_type,
    Expression<bool> classicalmunition,
    Expression<bool> localmunition,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (c2rsc_material_aircraft_type_id != null)
        'c2rsc_material_aircraft_type_id': c2rsc_material_aircraft_type_id,
      if (c2rsc_material_id != null) 'c2rsc_material_id': c2rsc_material_id,
      if (sms_mnemonic != null) 'sms_mnemonic': sms_mnemonic,
      if (drag != null) 'drag': drag,
      if (c2rsc_drag != null) 'c2rsc_drag': c2rsc_drag,
      if (weight != null) 'weight': weight,
      if (max_load_amount != null) 'max_load_amount': max_load_amount,
      if (name_mm_pp != null) 'name_mm_pp': name_mm_pp,
      if (type_mm != null) 'type_mm': type_mm,
      if (isbomb != null) 'isbomb': isbomb,
      if (isammunition != null) 'isammunition': isammunition,
      if (issuspension != null) 'issuspension': issuspension,
      if (ispod != null) 'ispod': ispod,
      if (istank != null) 'istank': istank,
      if (isbullet != null) 'isbullet': isbullet,
      if (ischaff != null) 'ischaff': ischaff,
      if (isflare != null) 'isflare': isflare,
      if (isdeleted != null) 'isdeleted': isdeleted,
      if (isairtoground != null) 'isairtoground': isairtoground,
      if (issuitableammunition != null)
        'issuitableammunition': issuitableammunition,
      if (tank_capacity_unit != null) 'tank_capacity_unit': tank_capacity_unit,
      if (tank_capacity != null) 'tank_capacity': tank_capacity,
      if (suspension_load_capacity != null)
        'suspension_load_capacity': suspension_load_capacity,
      if (ammunition_class_name != null)
        'ammunition_class_name': ammunition_class_name,
      if (aircraft_type_id != null) 'aircraft_type_id': aircraft_type_id,
      if (weight_unit != null) 'weight_unit': weight_unit,
      if (ammunition_direction_type != null)
        'ammunition_direction_type': ammunition_direction_type,
      if (classicalmunition != null) 'classicalmunition': classicalmunition,
      if (localmunition != null) 'localmunition': localmunition,
    });
  }

  HupgpZMaterialAircraftTypeCompanion copyWith(
      {Value<int> id,
      Value<int> c2rsc_material_aircraft_type_id,
      Value<int> c2rsc_material_id,
      Value<String> sms_mnemonic,
      Value<double> drag,
      Value<double> c2rsc_drag,
      Value<double> weight,
      Value<int> max_load_amount,
      Value<String> name_mm_pp,
      Value<String> type_mm,
      Value<bool> isbomb,
      Value<bool> isammunition,
      Value<bool> issuspension,
      Value<bool> ispod,
      Value<bool> istank,
      Value<bool> isbullet,
      Value<bool> ischaff,
      Value<bool> isflare,
      Value<bool> isdeleted,
      Value<bool> isairtoground,
      Value<bool> issuitableammunition,
      Value<String> tank_capacity_unit,
      Value<double> tank_capacity,
      Value<int> suspension_load_capacity,
      Value<String> ammunition_class_name,
      Value<int> aircraft_type_id,
      Value<String> weight_unit,
      Value<String> ammunition_direction_type,
      Value<bool> classicalmunition,
      Value<bool> localmunition}) {
    return HupgpZMaterialAircraftTypeCompanion(
      id: id ?? this.id,
      c2rsc_material_aircraft_type_id: c2rsc_material_aircraft_type_id ??
          this.c2rsc_material_aircraft_type_id,
      c2rsc_material_id: c2rsc_material_id ?? this.c2rsc_material_id,
      sms_mnemonic: sms_mnemonic ?? this.sms_mnemonic,
      drag: drag ?? this.drag,
      c2rsc_drag: c2rsc_drag ?? this.c2rsc_drag,
      weight: weight ?? this.weight,
      max_load_amount: max_load_amount ?? this.max_load_amount,
      name_mm_pp: name_mm_pp ?? this.name_mm_pp,
      type_mm: type_mm ?? this.type_mm,
      isbomb: isbomb ?? this.isbomb,
      isammunition: isammunition ?? this.isammunition,
      issuspension: issuspension ?? this.issuspension,
      ispod: ispod ?? this.ispod,
      istank: istank ?? this.istank,
      isbullet: isbullet ?? this.isbullet,
      ischaff: ischaff ?? this.ischaff,
      isflare: isflare ?? this.isflare,
      isdeleted: isdeleted ?? this.isdeleted,
      isairtoground: isairtoground ?? this.isairtoground,
      issuitableammunition: issuitableammunition ?? this.issuitableammunition,
      tank_capacity_unit: tank_capacity_unit ?? this.tank_capacity_unit,
      tank_capacity: tank_capacity ?? this.tank_capacity,
      suspension_load_capacity:
          suspension_load_capacity ?? this.suspension_load_capacity,
      ammunition_class_name:
          ammunition_class_name ?? this.ammunition_class_name,
      aircraft_type_id: aircraft_type_id ?? this.aircraft_type_id,
      weight_unit: weight_unit ?? this.weight_unit,
      ammunition_direction_type:
          ammunition_direction_type ?? this.ammunition_direction_type,
      classicalmunition: classicalmunition ?? this.classicalmunition,
      localmunition: localmunition ?? this.localmunition,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (c2rsc_material_aircraft_type_id.present) {
      map['c2rsc_material_aircraft_type_id'] =
          Variable<int>(c2rsc_material_aircraft_type_id.value);
    }
    if (c2rsc_material_id.present) {
      map['c2rsc_material_id'] = Variable<int>(c2rsc_material_id.value);
    }
    if (sms_mnemonic.present) {
      map['sms_mnemonic'] = Variable<String>(sms_mnemonic.value);
    }
    if (drag.present) {
      map['drag'] = Variable<double>(drag.value);
    }
    if (c2rsc_drag.present) {
      map['c2rsc_drag'] = Variable<double>(c2rsc_drag.value);
    }
    if (weight.present) {
      map['weight'] = Variable<double>(weight.value);
    }
    if (max_load_amount.present) {
      map['max_load_amount'] = Variable<int>(max_load_amount.value);
    }
    if (name_mm_pp.present) {
      map['name_mm_pp'] = Variable<String>(name_mm_pp.value);
    }
    if (type_mm.present) {
      map['type_mm'] = Variable<String>(type_mm.value);
    }
    if (isbomb.present) {
      map['isbomb'] = Variable<bool>(isbomb.value);
    }
    if (isammunition.present) {
      map['isammunition'] = Variable<bool>(isammunition.value);
    }
    if (issuspension.present) {
      map['issuspension'] = Variable<bool>(issuspension.value);
    }
    if (ispod.present) {
      map['ispod'] = Variable<bool>(ispod.value);
    }
    if (istank.present) {
      map['istank'] = Variable<bool>(istank.value);
    }
    if (isbullet.present) {
      map['isbullet'] = Variable<bool>(isbullet.value);
    }
    if (ischaff.present) {
      map['ischaff'] = Variable<bool>(ischaff.value);
    }
    if (isflare.present) {
      map['isflare'] = Variable<bool>(isflare.value);
    }
    if (isdeleted.present) {
      map['isdeleted'] = Variable<bool>(isdeleted.value);
    }
    if (isairtoground.present) {
      map['isairtoground'] = Variable<bool>(isairtoground.value);
    }
    if (issuitableammunition.present) {
      map['issuitableammunition'] = Variable<bool>(issuitableammunition.value);
    }
    if (tank_capacity_unit.present) {
      map['tank_capacity_unit'] = Variable<String>(tank_capacity_unit.value);
    }
    if (tank_capacity.present) {
      map['tank_capacity'] = Variable<double>(tank_capacity.value);
    }
    if (suspension_load_capacity.present) {
      map['suspension_load_capacity'] =
          Variable<int>(suspension_load_capacity.value);
    }
    if (ammunition_class_name.present) {
      map['ammunition_class_name'] =
          Variable<String>(ammunition_class_name.value);
    }
    if (aircraft_type_id.present) {
      map['aircraft_type_id'] = Variable<int>(aircraft_type_id.value);
    }
    if (weight_unit.present) {
      map['weight_unit'] = Variable<String>(weight_unit.value);
    }
    if (ammunition_direction_type.present) {
      map['ammunition_direction_type'] =
          Variable<String>(ammunition_direction_type.value);
    }
    if (classicalmunition.present) {
      map['classicalmunition'] = Variable<bool>(classicalmunition.value);
    }
    if (localmunition.present) {
      map['localmunition'] = Variable<bool>(localmunition.value);
    }
    return map;
  }
}

class $HupgpZMaterialAircraftTypeTable extends HupgpZMaterialAircraftType
    with
        TableInfo<$HupgpZMaterialAircraftTypeTable,
            hupgp_z_material_aircraft_type> {
  final GeneratedDatabase _db;
  final String _alias;
  $HupgpZMaterialAircraftTypeTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _c2rsc_material_aircraft_type_idMeta =
      const VerificationMeta('c2rsc_material_aircraft_type_id');
  GeneratedIntColumn _c2rsc_material_aircraft_type_id;
  @override
  GeneratedIntColumn get c2rsc_material_aircraft_type_id =>
      _c2rsc_material_aircraft_type_id ??=
          _constructC2rscMaterialAircraftTypeId();
  GeneratedIntColumn _constructC2rscMaterialAircraftTypeId() {
    return GeneratedIntColumn(
      'c2rsc_material_aircraft_type_id',
      $tableName,
      true,
    );
  }

  final VerificationMeta _c2rsc_material_idMeta =
      const VerificationMeta('c2rsc_material_id');
  GeneratedIntColumn _c2rsc_material_id;
  @override
  GeneratedIntColumn get c2rsc_material_id =>
      _c2rsc_material_id ??= _constructC2rscMaterialId();
  GeneratedIntColumn _constructC2rscMaterialId() {
    return GeneratedIntColumn(
      'c2rsc_material_id',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sms_mnemonicMeta =
      const VerificationMeta('sms_mnemonic');
  GeneratedTextColumn _sms_mnemonic;
  @override
  GeneratedTextColumn get sms_mnemonic =>
      _sms_mnemonic ??= _constructSmsMnemonic();
  GeneratedTextColumn _constructSmsMnemonic() {
    return GeneratedTextColumn(
      'sms_mnemonic',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dragMeta = const VerificationMeta('drag');
  GeneratedRealColumn _drag;
  @override
  GeneratedRealColumn get drag => _drag ??= _constructDrag();
  GeneratedRealColumn _constructDrag() {
    return GeneratedRealColumn(
      'drag',
      $tableName,
      true,
    );
  }

  final VerificationMeta _c2rsc_dragMeta = const VerificationMeta('c2rsc_drag');
  GeneratedRealColumn _c2rsc_drag;
  @override
  GeneratedRealColumn get c2rsc_drag => _c2rsc_drag ??= _constructC2rscDrag();
  GeneratedRealColumn _constructC2rscDrag() {
    return GeneratedRealColumn(
      'c2rsc_drag',
      $tableName,
      true,
    );
  }

  final VerificationMeta _weightMeta = const VerificationMeta('weight');
  GeneratedRealColumn _weight;
  @override
  GeneratedRealColumn get weight => _weight ??= _constructWeight();
  GeneratedRealColumn _constructWeight() {
    return GeneratedRealColumn(
      'weight',
      $tableName,
      true,
    );
  }

  final VerificationMeta _max_load_amountMeta =
      const VerificationMeta('max_load_amount');
  GeneratedIntColumn _max_load_amount;
  @override
  GeneratedIntColumn get max_load_amount =>
      _max_load_amount ??= _constructMaxLoadAmount();
  GeneratedIntColumn _constructMaxLoadAmount() {
    return GeneratedIntColumn(
      'max_load_amount',
      $tableName,
      true,
    );
  }

  final VerificationMeta _name_mm_ppMeta = const VerificationMeta('name_mm_pp');
  GeneratedTextColumn _name_mm_pp;
  @override
  GeneratedTextColumn get name_mm_pp => _name_mm_pp ??= _constructNameMmPp();
  GeneratedTextColumn _constructNameMmPp() {
    return GeneratedTextColumn(
      'name_mm_pp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _type_mmMeta = const VerificationMeta('type_mm');
  GeneratedTextColumn _type_mm;
  @override
  GeneratedTextColumn get type_mm => _type_mm ??= _constructTypeMm();
  GeneratedTextColumn _constructTypeMm() {
    return GeneratedTextColumn(
      'type_mm',
      $tableName,
      true,
    );
  }

  final VerificationMeta _isbombMeta = const VerificationMeta('isbomb');
  GeneratedBoolColumn _isbomb;
  @override
  GeneratedBoolColumn get isbomb => _isbomb ??= _constructIsbomb();
  GeneratedBoolColumn _constructIsbomb() {
    return GeneratedBoolColumn(
      'isbomb',
      $tableName,
      true,
    );
  }

  final VerificationMeta _isammunitionMeta =
      const VerificationMeta('isammunition');
  GeneratedBoolColumn _isammunition;
  @override
  GeneratedBoolColumn get isammunition =>
      _isammunition ??= _constructIsammunition();
  GeneratedBoolColumn _constructIsammunition() {
    return GeneratedBoolColumn(
      'isammunition',
      $tableName,
      true,
    );
  }

  final VerificationMeta _issuspensionMeta =
      const VerificationMeta('issuspension');
  GeneratedBoolColumn _issuspension;
  @override
  GeneratedBoolColumn get issuspension =>
      _issuspension ??= _constructIssuspension();
  GeneratedBoolColumn _constructIssuspension() {
    return GeneratedBoolColumn(
      'issuspension',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ispodMeta = const VerificationMeta('ispod');
  GeneratedBoolColumn _ispod;
  @override
  GeneratedBoolColumn get ispod => _ispod ??= _constructIspod();
  GeneratedBoolColumn _constructIspod() {
    return GeneratedBoolColumn(
      'ispod',
      $tableName,
      true,
    );
  }

  final VerificationMeta _istankMeta = const VerificationMeta('istank');
  GeneratedBoolColumn _istank;
  @override
  GeneratedBoolColumn get istank => _istank ??= _constructIstank();
  GeneratedBoolColumn _constructIstank() {
    return GeneratedBoolColumn(
      'istank',
      $tableName,
      true,
    );
  }

  final VerificationMeta _isbulletMeta = const VerificationMeta('isbullet');
  GeneratedBoolColumn _isbullet;
  @override
  GeneratedBoolColumn get isbullet => _isbullet ??= _constructIsbullet();
  GeneratedBoolColumn _constructIsbullet() {
    return GeneratedBoolColumn(
      'isbullet',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ischaffMeta = const VerificationMeta('ischaff');
  GeneratedBoolColumn _ischaff;
  @override
  GeneratedBoolColumn get ischaff => _ischaff ??= _constructIschaff();
  GeneratedBoolColumn _constructIschaff() {
    return GeneratedBoolColumn(
      'ischaff',
      $tableName,
      true,
    );
  }

  final VerificationMeta _isflareMeta = const VerificationMeta('isflare');
  GeneratedBoolColumn _isflare;
  @override
  GeneratedBoolColumn get isflare => _isflare ??= _constructIsflare();
  GeneratedBoolColumn _constructIsflare() {
    return GeneratedBoolColumn(
      'isflare',
      $tableName,
      true,
    );
  }

  final VerificationMeta _isdeletedMeta = const VerificationMeta('isdeleted');
  GeneratedBoolColumn _isdeleted;
  @override
  GeneratedBoolColumn get isdeleted => _isdeleted ??= _constructIsdeleted();
  GeneratedBoolColumn _constructIsdeleted() {
    return GeneratedBoolColumn(
      'isdeleted',
      $tableName,
      true,
    );
  }

  final VerificationMeta _isairtogroundMeta =
      const VerificationMeta('isairtoground');
  GeneratedBoolColumn _isairtoground;
  @override
  GeneratedBoolColumn get isairtoground =>
      _isairtoground ??= _constructIsairtoground();
  GeneratedBoolColumn _constructIsairtoground() {
    return GeneratedBoolColumn(
      'isairtoground',
      $tableName,
      true,
    );
  }

  final VerificationMeta _issuitableammunitionMeta =
      const VerificationMeta('issuitableammunition');
  GeneratedBoolColumn _issuitableammunition;
  @override
  GeneratedBoolColumn get issuitableammunition =>
      _issuitableammunition ??= _constructIssuitableammunition();
  GeneratedBoolColumn _constructIssuitableammunition() {
    return GeneratedBoolColumn(
      'issuitableammunition',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tank_capacity_unitMeta =
      const VerificationMeta('tank_capacity_unit');
  GeneratedTextColumn _tank_capacity_unit;
  @override
  GeneratedTextColumn get tank_capacity_unit =>
      _tank_capacity_unit ??= _constructTankCapacityUnit();
  GeneratedTextColumn _constructTankCapacityUnit() {
    return GeneratedTextColumn(
      'tank_capacity_unit',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tank_capacityMeta =
      const VerificationMeta('tank_capacity');
  GeneratedRealColumn _tank_capacity;
  @override
  GeneratedRealColumn get tank_capacity =>
      _tank_capacity ??= _constructTankCapacity();
  GeneratedRealColumn _constructTankCapacity() {
    return GeneratedRealColumn(
      'tank_capacity',
      $tableName,
      true,
    );
  }

  final VerificationMeta _suspension_load_capacityMeta =
      const VerificationMeta('suspension_load_capacity');
  GeneratedIntColumn _suspension_load_capacity;
  @override
  GeneratedIntColumn get suspension_load_capacity =>
      _suspension_load_capacity ??= _constructSuspensionLoadCapacity();
  GeneratedIntColumn _constructSuspensionLoadCapacity() {
    return GeneratedIntColumn(
      'suspension_load_capacity',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ammunition_class_nameMeta =
      const VerificationMeta('ammunition_class_name');
  GeneratedTextColumn _ammunition_class_name;
  @override
  GeneratedTextColumn get ammunition_class_name =>
      _ammunition_class_name ??= _constructAmmunitionClassName();
  GeneratedTextColumn _constructAmmunitionClassName() {
    return GeneratedTextColumn(
      'ammunition_class_name',
      $tableName,
      true,
    );
  }

  final VerificationMeta _aircraft_type_idMeta =
      const VerificationMeta('aircraft_type_id');
  GeneratedIntColumn _aircraft_type_id;
  @override
  GeneratedIntColumn get aircraft_type_id =>
      _aircraft_type_id ??= _constructAircraftTypeId();
  GeneratedIntColumn _constructAircraftTypeId() {
    return GeneratedIntColumn(
      'aircraft_type_id',
      $tableName,
      true,
    );
  }

  final VerificationMeta _weight_unitMeta =
      const VerificationMeta('weight_unit');
  GeneratedTextColumn _weight_unit;
  @override
  GeneratedTextColumn get weight_unit =>
      _weight_unit ??= _constructWeightUnit();
  GeneratedTextColumn _constructWeightUnit() {
    return GeneratedTextColumn(
      'weight_unit',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ammunition_direction_typeMeta =
      const VerificationMeta('ammunition_direction_type');
  GeneratedTextColumn _ammunition_direction_type;
  @override
  GeneratedTextColumn get ammunition_direction_type =>
      _ammunition_direction_type ??= _constructAmmunitionDirectionType();
  GeneratedTextColumn _constructAmmunitionDirectionType() {
    return GeneratedTextColumn(
      'ammunition_direction_type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _classicalmunitionMeta =
      const VerificationMeta('classicalmunition');
  GeneratedBoolColumn _classicalmunition;
  @override
  GeneratedBoolColumn get classicalmunition =>
      _classicalmunition ??= _constructClassicalmunition();
  GeneratedBoolColumn _constructClassicalmunition() {
    return GeneratedBoolColumn(
      'classicalmunition',
      $tableName,
      true,
    );
  }

  final VerificationMeta _localmunitionMeta =
      const VerificationMeta('localmunition');
  GeneratedBoolColumn _localmunition;
  @override
  GeneratedBoolColumn get localmunition =>
      _localmunition ??= _constructLocalmunition();
  GeneratedBoolColumn _constructLocalmunition() {
    return GeneratedBoolColumn(
      'localmunition',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        c2rsc_material_aircraft_type_id,
        c2rsc_material_id,
        sms_mnemonic,
        drag,
        c2rsc_drag,
        weight,
        max_load_amount,
        name_mm_pp,
        type_mm,
        isbomb,
        isammunition,
        issuspension,
        ispod,
        istank,
        isbullet,
        ischaff,
        isflare,
        isdeleted,
        isairtoground,
        issuitableammunition,
        tank_capacity_unit,
        tank_capacity,
        suspension_load_capacity,
        ammunition_class_name,
        aircraft_type_id,
        weight_unit,
        ammunition_direction_type,
        classicalmunition,
        localmunition
      ];
  @override
  $HupgpZMaterialAircraftTypeTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'hupgp_z_material_aircraft_type';
  @override
  final String actualTableName = 'hupgp_z_material_aircraft_type';
  @override
  VerificationContext validateIntegrity(
      Insertable<hupgp_z_material_aircraft_type> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('c2rsc_material_aircraft_type_id')) {
      context.handle(
          _c2rsc_material_aircraft_type_idMeta,
          c2rsc_material_aircraft_type_id.isAcceptableOrUnknown(
              data['c2rsc_material_aircraft_type_id'],
              _c2rsc_material_aircraft_type_idMeta));
    }
    if (data.containsKey('c2rsc_material_id')) {
      context.handle(
          _c2rsc_material_idMeta,
          c2rsc_material_id.isAcceptableOrUnknown(
              data['c2rsc_material_id'], _c2rsc_material_idMeta));
    }
    if (data.containsKey('sms_mnemonic')) {
      context.handle(
          _sms_mnemonicMeta,
          sms_mnemonic.isAcceptableOrUnknown(
              data['sms_mnemonic'], _sms_mnemonicMeta));
    }
    if (data.containsKey('drag')) {
      context.handle(
          _dragMeta, drag.isAcceptableOrUnknown(data['drag'], _dragMeta));
    }
    if (data.containsKey('c2rsc_drag')) {
      context.handle(
          _c2rsc_dragMeta,
          c2rsc_drag.isAcceptableOrUnknown(
              data['c2rsc_drag'], _c2rsc_dragMeta));
    }
    if (data.containsKey('weight')) {
      context.handle(_weightMeta,
          weight.isAcceptableOrUnknown(data['weight'], _weightMeta));
    }
    if (data.containsKey('max_load_amount')) {
      context.handle(
          _max_load_amountMeta,
          max_load_amount.isAcceptableOrUnknown(
              data['max_load_amount'], _max_load_amountMeta));
    }
    if (data.containsKey('name_mm_pp')) {
      context.handle(
          _name_mm_ppMeta,
          name_mm_pp.isAcceptableOrUnknown(
              data['name_mm_pp'], _name_mm_ppMeta));
    }
    if (data.containsKey('type_mm')) {
      context.handle(_type_mmMeta,
          type_mm.isAcceptableOrUnknown(data['type_mm'], _type_mmMeta));
    }
    if (data.containsKey('isbomb')) {
      context.handle(_isbombMeta,
          isbomb.isAcceptableOrUnknown(data['isbomb'], _isbombMeta));
    }
    if (data.containsKey('isammunition')) {
      context.handle(
          _isammunitionMeta,
          isammunition.isAcceptableOrUnknown(
              data['isammunition'], _isammunitionMeta));
    }
    if (data.containsKey('issuspension')) {
      context.handle(
          _issuspensionMeta,
          issuspension.isAcceptableOrUnknown(
              data['issuspension'], _issuspensionMeta));
    }
    if (data.containsKey('ispod')) {
      context.handle(
          _ispodMeta, ispod.isAcceptableOrUnknown(data['ispod'], _ispodMeta));
    }
    if (data.containsKey('istank')) {
      context.handle(_istankMeta,
          istank.isAcceptableOrUnknown(data['istank'], _istankMeta));
    }
    if (data.containsKey('isbullet')) {
      context.handle(_isbulletMeta,
          isbullet.isAcceptableOrUnknown(data['isbullet'], _isbulletMeta));
    }
    if (data.containsKey('ischaff')) {
      context.handle(_ischaffMeta,
          ischaff.isAcceptableOrUnknown(data['ischaff'], _ischaffMeta));
    }
    if (data.containsKey('isflare')) {
      context.handle(_isflareMeta,
          isflare.isAcceptableOrUnknown(data['isflare'], _isflareMeta));
    }
    if (data.containsKey('isdeleted')) {
      context.handle(_isdeletedMeta,
          isdeleted.isAcceptableOrUnknown(data['isdeleted'], _isdeletedMeta));
    }
    if (data.containsKey('isairtoground')) {
      context.handle(
          _isairtogroundMeta,
          isairtoground.isAcceptableOrUnknown(
              data['isairtoground'], _isairtogroundMeta));
    }
    if (data.containsKey('issuitableammunition')) {
      context.handle(
          _issuitableammunitionMeta,
          issuitableammunition.isAcceptableOrUnknown(
              data['issuitableammunition'], _issuitableammunitionMeta));
    }
    if (data.containsKey('tank_capacity_unit')) {
      context.handle(
          _tank_capacity_unitMeta,
          tank_capacity_unit.isAcceptableOrUnknown(
              data['tank_capacity_unit'], _tank_capacity_unitMeta));
    }
    if (data.containsKey('tank_capacity')) {
      context.handle(
          _tank_capacityMeta,
          tank_capacity.isAcceptableOrUnknown(
              data['tank_capacity'], _tank_capacityMeta));
    }
    if (data.containsKey('suspension_load_capacity')) {
      context.handle(
          _suspension_load_capacityMeta,
          suspension_load_capacity.isAcceptableOrUnknown(
              data['suspension_load_capacity'], _suspension_load_capacityMeta));
    }
    if (data.containsKey('ammunition_class_name')) {
      context.handle(
          _ammunition_class_nameMeta,
          ammunition_class_name.isAcceptableOrUnknown(
              data['ammunition_class_name'], _ammunition_class_nameMeta));
    }
    if (data.containsKey('aircraft_type_id')) {
      context.handle(
          _aircraft_type_idMeta,
          aircraft_type_id.isAcceptableOrUnknown(
              data['aircraft_type_id'], _aircraft_type_idMeta));
    }
    if (data.containsKey('weight_unit')) {
      context.handle(
          _weight_unitMeta,
          weight_unit.isAcceptableOrUnknown(
              data['weight_unit'], _weight_unitMeta));
    }
    if (data.containsKey('ammunition_direction_type')) {
      context.handle(
          _ammunition_direction_typeMeta,
          ammunition_direction_type.isAcceptableOrUnknown(
              data['ammunition_direction_type'],
              _ammunition_direction_typeMeta));
    }
    if (data.containsKey('classicalmunition')) {
      context.handle(
          _classicalmunitionMeta,
          classicalmunition.isAcceptableOrUnknown(
              data['classicalmunition'], _classicalmunitionMeta));
    }
    if (data.containsKey('localmunition')) {
      context.handle(
          _localmunitionMeta,
          localmunition.isAcceptableOrUnknown(
              data['localmunition'], _localmunitionMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  hupgp_z_material_aircraft_type map(Map<String, dynamic> data,
      {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return hupgp_z_material_aircraft_type.fromData(data, _db,
        prefix: effectivePrefix);
  }

  @override
  $HupgpZMaterialAircraftTypeTable createAlias(String alias) {
    return $HupgpZMaterialAircraftTypeTable(_db, alias);
  }
}

class meteo_taf extends DataClass implements Insertable<meteo_taf> {
  final int id;
  final String icao;
  final DateTime forecasttime;
  final DateTime periodbegin;
  final DateTime periodend;
  final String winddir;
  final double windspeed;
  final double gust;
  final String cavok;
  final String horvis;
  final String ww1;
  final String ww2;
  final String ww3;
  final String cld1amount;
  final String cld1type;
  final int cld1height;
  final String cld2amount;
  final String cld2type;
  final int cld2height;
  final String cld3amount;
  final String cld3type;
  final int cld3height;
  final String cld4amount;
  final String cld4type;
  final int cld4height;
  final double maxtemp;
  final int maxtemphour;
  final double mintemp;
  final int mintemphour;
  final String taf;
  final String lcldata;
  final String lclmtoexpert;
  final int airfieldid;
  meteo_taf(
      {@required this.id,
      this.icao,
      this.forecasttime,
      this.periodbegin,
      this.periodend,
      this.winddir,
      this.windspeed,
      this.gust,
      this.cavok,
      this.horvis,
      this.ww1,
      this.ww2,
      this.ww3,
      this.cld1amount,
      this.cld1type,
      this.cld1height,
      this.cld2amount,
      this.cld2type,
      this.cld2height,
      this.cld3amount,
      this.cld3type,
      this.cld3height,
      this.cld4amount,
      this.cld4type,
      this.cld4height,
      this.maxtemp,
      this.maxtemphour,
      this.mintemp,
      this.mintemphour,
      this.taf,
      this.lcldata,
      this.lclmtoexpert,
      this.airfieldid});
  factory meteo_taf.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    return meteo_taf(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}icao']),
      forecasttime: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}forecasttime']),
      periodbegin: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}periodbegin']),
      periodend: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}periodend']),
      winddir:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}winddir']),
      windspeed: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}windspeed']),
      gust: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}gust']),
      cavok:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}cavok']),
      horvis:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}horvis']),
      ww1: stringType.mapFromDatabaseResponse(data['${effectivePrefix}ww1']),
      ww2: stringType.mapFromDatabaseResponse(data['${effectivePrefix}ww2']),
      ww3: stringType.mapFromDatabaseResponse(data['${effectivePrefix}ww3']),
      cld1amount: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld1amount']),
      cld1type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld1type']),
      cld1height:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}cld1height']),
      cld2amount: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld2amount']),
      cld2type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld2type']),
      cld2height:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}cld2height']),
      cld3amount: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld3amount']),
      cld3type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld3type']),
      cld3height:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}cld3height']),
      cld4amount: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld4amount']),
      cld4type: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}cld4type']),
      cld4height:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}cld4height']),
      maxtemp:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}maxtemp']),
      maxtemphour: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}maxtemphour']),
      mintemp:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}mintemp']),
      mintemphour: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}mintemphour']),
      taf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}taf']),
      lcldata:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}lcldata']),
      lclmtoexpert: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lclmtoexpert']),
      airfieldid:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}airfieldid']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || icao != null) {
      map['icao'] = Variable<String>(icao);
    }
    if (!nullToAbsent || forecasttime != null) {
      map['forecasttime'] = Variable<DateTime>(forecasttime);
    }
    if (!nullToAbsent || periodbegin != null) {
      map['periodbegin'] = Variable<DateTime>(periodbegin);
    }
    if (!nullToAbsent || periodend != null) {
      map['periodend'] = Variable<DateTime>(periodend);
    }
    if (!nullToAbsent || winddir != null) {
      map['winddir'] = Variable<String>(winddir);
    }
    if (!nullToAbsent || windspeed != null) {
      map['windspeed'] = Variable<double>(windspeed);
    }
    if (!nullToAbsent || gust != null) {
      map['gust'] = Variable<double>(gust);
    }
    if (!nullToAbsent || cavok != null) {
      map['cavok'] = Variable<String>(cavok);
    }
    if (!nullToAbsent || horvis != null) {
      map['horvis'] = Variable<String>(horvis);
    }
    if (!nullToAbsent || ww1 != null) {
      map['ww1'] = Variable<String>(ww1);
    }
    if (!nullToAbsent || ww2 != null) {
      map['ww2'] = Variable<String>(ww2);
    }
    if (!nullToAbsent || ww3 != null) {
      map['ww3'] = Variable<String>(ww3);
    }
    if (!nullToAbsent || cld1amount != null) {
      map['cld1amount'] = Variable<String>(cld1amount);
    }
    if (!nullToAbsent || cld1type != null) {
      map['cld1type'] = Variable<String>(cld1type);
    }
    if (!nullToAbsent || cld1height != null) {
      map['cld1height'] = Variable<int>(cld1height);
    }
    if (!nullToAbsent || cld2amount != null) {
      map['cld2amount'] = Variable<String>(cld2amount);
    }
    if (!nullToAbsent || cld2type != null) {
      map['cld2type'] = Variable<String>(cld2type);
    }
    if (!nullToAbsent || cld2height != null) {
      map['cld2height'] = Variable<int>(cld2height);
    }
    if (!nullToAbsent || cld3amount != null) {
      map['cld3amount'] = Variable<String>(cld3amount);
    }
    if (!nullToAbsent || cld3type != null) {
      map['cld3type'] = Variable<String>(cld3type);
    }
    if (!nullToAbsent || cld3height != null) {
      map['cld3height'] = Variable<int>(cld3height);
    }
    if (!nullToAbsent || cld4amount != null) {
      map['cld4amount'] = Variable<String>(cld4amount);
    }
    if (!nullToAbsent || cld4type != null) {
      map['cld4type'] = Variable<String>(cld4type);
    }
    if (!nullToAbsent || cld4height != null) {
      map['cld4height'] = Variable<int>(cld4height);
    }
    if (!nullToAbsent || maxtemp != null) {
      map['maxtemp'] = Variable<double>(maxtemp);
    }
    if (!nullToAbsent || maxtemphour != null) {
      map['maxtemphour'] = Variable<int>(maxtemphour);
    }
    if (!nullToAbsent || mintemp != null) {
      map['mintemp'] = Variable<double>(mintemp);
    }
    if (!nullToAbsent || mintemphour != null) {
      map['mintemphour'] = Variable<int>(mintemphour);
    }
    if (!nullToAbsent || taf != null) {
      map['taf'] = Variable<String>(taf);
    }
    if (!nullToAbsent || lcldata != null) {
      map['lcldata'] = Variable<String>(lcldata);
    }
    if (!nullToAbsent || lclmtoexpert != null) {
      map['lclmtoexpert'] = Variable<String>(lclmtoexpert);
    }
    if (!nullToAbsent || airfieldid != null) {
      map['airfieldid'] = Variable<int>(airfieldid);
    }
    return map;
  }

  factory meteo_taf.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return meteo_taf(
      id: serializer.fromJson<int>(json['id']),
      icao: serializer.fromJson<String>(json['icao']),
      forecasttime: serializer.fromJson<DateTime>(json['forecasttime']),
      periodbegin: serializer.fromJson<DateTime>(json['periodbegin']),
      periodend: serializer.fromJson<DateTime>(json['periodend']),
      winddir: serializer.fromJson<String>(json['winddir']),
      windspeed: serializer.fromJson<double>(json['windspeed']),
      gust: serializer.fromJson<double>(json['gust']),
      cavok: serializer.fromJson<String>(json['cavok']),
      horvis: serializer.fromJson<String>(json['horvis']),
      ww1: serializer.fromJson<String>(json['ww1']),
      ww2: serializer.fromJson<String>(json['ww2']),
      ww3: serializer.fromJson<String>(json['ww3']),
      cld1amount: serializer.fromJson<String>(json['cld1amount']),
      cld1type: serializer.fromJson<String>(json['cld1type']),
      cld1height: serializer.fromJson<int>(json['cld1height']),
      cld2amount: serializer.fromJson<String>(json['cld2amount']),
      cld2type: serializer.fromJson<String>(json['cld2type']),
      cld2height: serializer.fromJson<int>(json['cld2height']),
      cld3amount: serializer.fromJson<String>(json['cld3amount']),
      cld3type: serializer.fromJson<String>(json['cld3type']),
      cld3height: serializer.fromJson<int>(json['cld3height']),
      cld4amount: serializer.fromJson<String>(json['cld4amount']),
      cld4type: serializer.fromJson<String>(json['cld4type']),
      cld4height: serializer.fromJson<int>(json['cld4height']),
      maxtemp: serializer.fromJson<double>(json['maxtemp']),
      maxtemphour: serializer.fromJson<int>(json['maxtemphour']),
      mintemp: serializer.fromJson<double>(json['mintemp']),
      mintemphour: serializer.fromJson<int>(json['mintemphour']),
      taf: serializer.fromJson<String>(json['taf']),
      lcldata: serializer.fromJson<String>(json['lcldata']),
      lclmtoexpert: serializer.fromJson<String>(json['lclmtoexpert']),
      airfieldid: serializer.fromJson<int>(json['airfieldid']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'icao': serializer.toJson<String>(icao),
      'forecasttime': serializer.toJson<DateTime>(forecasttime),
      'periodbegin': serializer.toJson<DateTime>(periodbegin),
      'periodend': serializer.toJson<DateTime>(periodend),
      'winddir': serializer.toJson<String>(winddir),
      'windspeed': serializer.toJson<double>(windspeed),
      'gust': serializer.toJson<double>(gust),
      'cavok': serializer.toJson<String>(cavok),
      'horvis': serializer.toJson<String>(horvis),
      'ww1': serializer.toJson<String>(ww1),
      'ww2': serializer.toJson<String>(ww2),
      'ww3': serializer.toJson<String>(ww3),
      'cld1amount': serializer.toJson<String>(cld1amount),
      'cld1type': serializer.toJson<String>(cld1type),
      'cld1height': serializer.toJson<int>(cld1height),
      'cld2amount': serializer.toJson<String>(cld2amount),
      'cld2type': serializer.toJson<String>(cld2type),
      'cld2height': serializer.toJson<int>(cld2height),
      'cld3amount': serializer.toJson<String>(cld3amount),
      'cld3type': serializer.toJson<String>(cld3type),
      'cld3height': serializer.toJson<int>(cld3height),
      'cld4amount': serializer.toJson<String>(cld4amount),
      'cld4type': serializer.toJson<String>(cld4type),
      'cld4height': serializer.toJson<int>(cld4height),
      'maxtemp': serializer.toJson<double>(maxtemp),
      'maxtemphour': serializer.toJson<int>(maxtemphour),
      'mintemp': serializer.toJson<double>(mintemp),
      'mintemphour': serializer.toJson<int>(mintemphour),
      'taf': serializer.toJson<String>(taf),
      'lcldata': serializer.toJson<String>(lcldata),
      'lclmtoexpert': serializer.toJson<String>(lclmtoexpert),
      'airfieldid': serializer.toJson<int>(airfieldid),
    };
  }

  meteo_taf copyWith(
          {int id,
          String icao,
          DateTime forecasttime,
          DateTime periodbegin,
          DateTime periodend,
          String winddir,
          double windspeed,
          double gust,
          String cavok,
          String horvis,
          String ww1,
          String ww2,
          String ww3,
          String cld1amount,
          String cld1type,
          int cld1height,
          String cld2amount,
          String cld2type,
          int cld2height,
          String cld3amount,
          String cld3type,
          int cld3height,
          String cld4amount,
          String cld4type,
          int cld4height,
          double maxtemp,
          int maxtemphour,
          double mintemp,
          int mintemphour,
          String taf,
          String lcldata,
          String lclmtoexpert,
          int airfieldid}) =>
      meteo_taf(
        id: id ?? this.id,
        icao: icao ?? this.icao,
        forecasttime: forecasttime ?? this.forecasttime,
        periodbegin: periodbegin ?? this.periodbegin,
        periodend: periodend ?? this.periodend,
        winddir: winddir ?? this.winddir,
        windspeed: windspeed ?? this.windspeed,
        gust: gust ?? this.gust,
        cavok: cavok ?? this.cavok,
        horvis: horvis ?? this.horvis,
        ww1: ww1 ?? this.ww1,
        ww2: ww2 ?? this.ww2,
        ww3: ww3 ?? this.ww3,
        cld1amount: cld1amount ?? this.cld1amount,
        cld1type: cld1type ?? this.cld1type,
        cld1height: cld1height ?? this.cld1height,
        cld2amount: cld2amount ?? this.cld2amount,
        cld2type: cld2type ?? this.cld2type,
        cld2height: cld2height ?? this.cld2height,
        cld3amount: cld3amount ?? this.cld3amount,
        cld3type: cld3type ?? this.cld3type,
        cld3height: cld3height ?? this.cld3height,
        cld4amount: cld4amount ?? this.cld4amount,
        cld4type: cld4type ?? this.cld4type,
        cld4height: cld4height ?? this.cld4height,
        maxtemp: maxtemp ?? this.maxtemp,
        maxtemphour: maxtemphour ?? this.maxtemphour,
        mintemp: mintemp ?? this.mintemp,
        mintemphour: mintemphour ?? this.mintemphour,
        taf: taf ?? this.taf,
        lcldata: lcldata ?? this.lcldata,
        lclmtoexpert: lclmtoexpert ?? this.lclmtoexpert,
        airfieldid: airfieldid ?? this.airfieldid,
      );
  @override
  String toString() {
    return (StringBuffer('meteo_taf(')
          ..write('id: $id, ')
          ..write('icao: $icao, ')
          ..write('forecasttime: $forecasttime, ')
          ..write('periodbegin: $periodbegin, ')
          ..write('periodend: $periodend, ')
          ..write('winddir: $winddir, ')
          ..write('windspeed: $windspeed, ')
          ..write('gust: $gust, ')
          ..write('cavok: $cavok, ')
          ..write('horvis: $horvis, ')
          ..write('ww1: $ww1, ')
          ..write('ww2: $ww2, ')
          ..write('ww3: $ww3, ')
          ..write('cld1amount: $cld1amount, ')
          ..write('cld1type: $cld1type, ')
          ..write('cld1height: $cld1height, ')
          ..write('cld2amount: $cld2amount, ')
          ..write('cld2type: $cld2type, ')
          ..write('cld2height: $cld2height, ')
          ..write('cld3amount: $cld3amount, ')
          ..write('cld3type: $cld3type, ')
          ..write('cld3height: $cld3height, ')
          ..write('cld4amount: $cld4amount, ')
          ..write('cld4type: $cld4type, ')
          ..write('cld4height: $cld4height, ')
          ..write('maxtemp: $maxtemp, ')
          ..write('maxtemphour: $maxtemphour, ')
          ..write('mintemp: $mintemp, ')
          ..write('mintemphour: $mintemphour, ')
          ..write('taf: $taf, ')
          ..write('lcldata: $lcldata, ')
          ..write('lclmtoexpert: $lclmtoexpert, ')
          ..write('airfieldid: $airfieldid')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          icao.hashCode,
          $mrjc(
              forecasttime.hashCode,
              $mrjc(
                  periodbegin.hashCode,
                  $mrjc(
                      periodend.hashCode,
                      $mrjc(
                          winddir.hashCode,
                          $mrjc(
                              windspeed.hashCode,
                              $mrjc(
                                  gust.hashCode,
                                  $mrjc(
                                      cavok.hashCode,
                                      $mrjc(
                                          horvis.hashCode,
                                          $mrjc(
                                              ww1.hashCode,
                                              $mrjc(
                                                  ww2.hashCode,
                                                  $mrjc(
                                                      ww3.hashCode,
                                                      $mrjc(
                                                          cld1amount.hashCode,
                                                          $mrjc(
                                                              cld1type.hashCode,
                                                              $mrjc(
                                                                  cld1height
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      cld2amount
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          cld2type
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              cld2height.hashCode,
                                                                              $mrjc(cld3amount.hashCode, $mrjc(cld3type.hashCode, $mrjc(cld3height.hashCode, $mrjc(cld4amount.hashCode, $mrjc(cld4type.hashCode, $mrjc(cld4height.hashCode, $mrjc(maxtemp.hashCode, $mrjc(maxtemphour.hashCode, $mrjc(mintemp.hashCode, $mrjc(mintemphour.hashCode, $mrjc(taf.hashCode, $mrjc(lcldata.hashCode, $mrjc(lclmtoexpert.hashCode, airfieldid.hashCode)))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is meteo_taf &&
          other.id == this.id &&
          other.icao == this.icao &&
          other.forecasttime == this.forecasttime &&
          other.periodbegin == this.periodbegin &&
          other.periodend == this.periodend &&
          other.winddir == this.winddir &&
          other.windspeed == this.windspeed &&
          other.gust == this.gust &&
          other.cavok == this.cavok &&
          other.horvis == this.horvis &&
          other.ww1 == this.ww1 &&
          other.ww2 == this.ww2 &&
          other.ww3 == this.ww3 &&
          other.cld1amount == this.cld1amount &&
          other.cld1type == this.cld1type &&
          other.cld1height == this.cld1height &&
          other.cld2amount == this.cld2amount &&
          other.cld2type == this.cld2type &&
          other.cld2height == this.cld2height &&
          other.cld3amount == this.cld3amount &&
          other.cld3type == this.cld3type &&
          other.cld3height == this.cld3height &&
          other.cld4amount == this.cld4amount &&
          other.cld4type == this.cld4type &&
          other.cld4height == this.cld4height &&
          other.maxtemp == this.maxtemp &&
          other.maxtemphour == this.maxtemphour &&
          other.mintemp == this.mintemp &&
          other.mintemphour == this.mintemphour &&
          other.taf == this.taf &&
          other.lcldata == this.lcldata &&
          other.lclmtoexpert == this.lclmtoexpert &&
          other.airfieldid == this.airfieldid);
}

class MeteoTafCompanion extends UpdateCompanion<meteo_taf> {
  final Value<int> id;
  final Value<String> icao;
  final Value<DateTime> forecasttime;
  final Value<DateTime> periodbegin;
  final Value<DateTime> periodend;
  final Value<String> winddir;
  final Value<double> windspeed;
  final Value<double> gust;
  final Value<String> cavok;
  final Value<String> horvis;
  final Value<String> ww1;
  final Value<String> ww2;
  final Value<String> ww3;
  final Value<String> cld1amount;
  final Value<String> cld1type;
  final Value<int> cld1height;
  final Value<String> cld2amount;
  final Value<String> cld2type;
  final Value<int> cld2height;
  final Value<String> cld3amount;
  final Value<String> cld3type;
  final Value<int> cld3height;
  final Value<String> cld4amount;
  final Value<String> cld4type;
  final Value<int> cld4height;
  final Value<double> maxtemp;
  final Value<int> maxtemphour;
  final Value<double> mintemp;
  final Value<int> mintemphour;
  final Value<String> taf;
  final Value<String> lcldata;
  final Value<String> lclmtoexpert;
  final Value<int> airfieldid;
  const MeteoTafCompanion({
    this.id = const Value.absent(),
    this.icao = const Value.absent(),
    this.forecasttime = const Value.absent(),
    this.periodbegin = const Value.absent(),
    this.periodend = const Value.absent(),
    this.winddir = const Value.absent(),
    this.windspeed = const Value.absent(),
    this.gust = const Value.absent(),
    this.cavok = const Value.absent(),
    this.horvis = const Value.absent(),
    this.ww1 = const Value.absent(),
    this.ww2 = const Value.absent(),
    this.ww3 = const Value.absent(),
    this.cld1amount = const Value.absent(),
    this.cld1type = const Value.absent(),
    this.cld1height = const Value.absent(),
    this.cld2amount = const Value.absent(),
    this.cld2type = const Value.absent(),
    this.cld2height = const Value.absent(),
    this.cld3amount = const Value.absent(),
    this.cld3type = const Value.absent(),
    this.cld3height = const Value.absent(),
    this.cld4amount = const Value.absent(),
    this.cld4type = const Value.absent(),
    this.cld4height = const Value.absent(),
    this.maxtemp = const Value.absent(),
    this.maxtemphour = const Value.absent(),
    this.mintemp = const Value.absent(),
    this.mintemphour = const Value.absent(),
    this.taf = const Value.absent(),
    this.lcldata = const Value.absent(),
    this.lclmtoexpert = const Value.absent(),
    this.airfieldid = const Value.absent(),
  });
  MeteoTafCompanion.insert({
    this.id = const Value.absent(),
    this.icao = const Value.absent(),
    this.forecasttime = const Value.absent(),
    this.periodbegin = const Value.absent(),
    this.periodend = const Value.absent(),
    this.winddir = const Value.absent(),
    this.windspeed = const Value.absent(),
    this.gust = const Value.absent(),
    this.cavok = const Value.absent(),
    this.horvis = const Value.absent(),
    this.ww1 = const Value.absent(),
    this.ww2 = const Value.absent(),
    this.ww3 = const Value.absent(),
    this.cld1amount = const Value.absent(),
    this.cld1type = const Value.absent(),
    this.cld1height = const Value.absent(),
    this.cld2amount = const Value.absent(),
    this.cld2type = const Value.absent(),
    this.cld2height = const Value.absent(),
    this.cld3amount = const Value.absent(),
    this.cld3type = const Value.absent(),
    this.cld3height = const Value.absent(),
    this.cld4amount = const Value.absent(),
    this.cld4type = const Value.absent(),
    this.cld4height = const Value.absent(),
    this.maxtemp = const Value.absent(),
    this.maxtemphour = const Value.absent(),
    this.mintemp = const Value.absent(),
    this.mintemphour = const Value.absent(),
    this.taf = const Value.absent(),
    this.lcldata = const Value.absent(),
    this.lclmtoexpert = const Value.absent(),
    this.airfieldid = const Value.absent(),
  });
  static Insertable<meteo_taf> custom({
    Expression<int> id,
    Expression<String> icao,
    Expression<DateTime> forecasttime,
    Expression<DateTime> periodbegin,
    Expression<DateTime> periodend,
    Expression<String> winddir,
    Expression<double> windspeed,
    Expression<double> gust,
    Expression<String> cavok,
    Expression<String> horvis,
    Expression<String> ww1,
    Expression<String> ww2,
    Expression<String> ww3,
    Expression<String> cld1amount,
    Expression<String> cld1type,
    Expression<int> cld1height,
    Expression<String> cld2amount,
    Expression<String> cld2type,
    Expression<int> cld2height,
    Expression<String> cld3amount,
    Expression<String> cld3type,
    Expression<int> cld3height,
    Expression<String> cld4amount,
    Expression<String> cld4type,
    Expression<int> cld4height,
    Expression<double> maxtemp,
    Expression<int> maxtemphour,
    Expression<double> mintemp,
    Expression<int> mintemphour,
    Expression<String> taf,
    Expression<String> lcldata,
    Expression<String> lclmtoexpert,
    Expression<int> airfieldid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (icao != null) 'icao': icao,
      if (forecasttime != null) 'forecasttime': forecasttime,
      if (periodbegin != null) 'periodbegin': periodbegin,
      if (periodend != null) 'periodend': periodend,
      if (winddir != null) 'winddir': winddir,
      if (windspeed != null) 'windspeed': windspeed,
      if (gust != null) 'gust': gust,
      if (cavok != null) 'cavok': cavok,
      if (horvis != null) 'horvis': horvis,
      if (ww1 != null) 'ww1': ww1,
      if (ww2 != null) 'ww2': ww2,
      if (ww3 != null) 'ww3': ww3,
      if (cld1amount != null) 'cld1amount': cld1amount,
      if (cld1type != null) 'cld1type': cld1type,
      if (cld1height != null) 'cld1height': cld1height,
      if (cld2amount != null) 'cld2amount': cld2amount,
      if (cld2type != null) 'cld2type': cld2type,
      if (cld2height != null) 'cld2height': cld2height,
      if (cld3amount != null) 'cld3amount': cld3amount,
      if (cld3type != null) 'cld3type': cld3type,
      if (cld3height != null) 'cld3height': cld3height,
      if (cld4amount != null) 'cld4amount': cld4amount,
      if (cld4type != null) 'cld4type': cld4type,
      if (cld4height != null) 'cld4height': cld4height,
      if (maxtemp != null) 'maxtemp': maxtemp,
      if (maxtemphour != null) 'maxtemphour': maxtemphour,
      if (mintemp != null) 'mintemp': mintemp,
      if (mintemphour != null) 'mintemphour': mintemphour,
      if (taf != null) 'taf': taf,
      if (lcldata != null) 'lcldata': lcldata,
      if (lclmtoexpert != null) 'lclmtoexpert': lclmtoexpert,
      if (airfieldid != null) 'airfieldid': airfieldid,
    });
  }

  MeteoTafCompanion copyWith(
      {Value<int> id,
      Value<String> icao,
      Value<DateTime> forecasttime,
      Value<DateTime> periodbegin,
      Value<DateTime> periodend,
      Value<String> winddir,
      Value<double> windspeed,
      Value<double> gust,
      Value<String> cavok,
      Value<String> horvis,
      Value<String> ww1,
      Value<String> ww2,
      Value<String> ww3,
      Value<String> cld1amount,
      Value<String> cld1type,
      Value<int> cld1height,
      Value<String> cld2amount,
      Value<String> cld2type,
      Value<int> cld2height,
      Value<String> cld3amount,
      Value<String> cld3type,
      Value<int> cld3height,
      Value<String> cld4amount,
      Value<String> cld4type,
      Value<int> cld4height,
      Value<double> maxtemp,
      Value<int> maxtemphour,
      Value<double> mintemp,
      Value<int> mintemphour,
      Value<String> taf,
      Value<String> lcldata,
      Value<String> lclmtoexpert,
      Value<int> airfieldid}) {
    return MeteoTafCompanion(
      id: id ?? this.id,
      icao: icao ?? this.icao,
      forecasttime: forecasttime ?? this.forecasttime,
      periodbegin: periodbegin ?? this.periodbegin,
      periodend: periodend ?? this.periodend,
      winddir: winddir ?? this.winddir,
      windspeed: windspeed ?? this.windspeed,
      gust: gust ?? this.gust,
      cavok: cavok ?? this.cavok,
      horvis: horvis ?? this.horvis,
      ww1: ww1 ?? this.ww1,
      ww2: ww2 ?? this.ww2,
      ww3: ww3 ?? this.ww3,
      cld1amount: cld1amount ?? this.cld1amount,
      cld1type: cld1type ?? this.cld1type,
      cld1height: cld1height ?? this.cld1height,
      cld2amount: cld2amount ?? this.cld2amount,
      cld2type: cld2type ?? this.cld2type,
      cld2height: cld2height ?? this.cld2height,
      cld3amount: cld3amount ?? this.cld3amount,
      cld3type: cld3type ?? this.cld3type,
      cld3height: cld3height ?? this.cld3height,
      cld4amount: cld4amount ?? this.cld4amount,
      cld4type: cld4type ?? this.cld4type,
      cld4height: cld4height ?? this.cld4height,
      maxtemp: maxtemp ?? this.maxtemp,
      maxtemphour: maxtemphour ?? this.maxtemphour,
      mintemp: mintemp ?? this.mintemp,
      mintemphour: mintemphour ?? this.mintemphour,
      taf: taf ?? this.taf,
      lcldata: lcldata ?? this.lcldata,
      lclmtoexpert: lclmtoexpert ?? this.lclmtoexpert,
      airfieldid: airfieldid ?? this.airfieldid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (icao.present) {
      map['icao'] = Variable<String>(icao.value);
    }
    if (forecasttime.present) {
      map['forecasttime'] = Variable<DateTime>(forecasttime.value);
    }
    if (periodbegin.present) {
      map['periodbegin'] = Variable<DateTime>(periodbegin.value);
    }
    if (periodend.present) {
      map['periodend'] = Variable<DateTime>(periodend.value);
    }
    if (winddir.present) {
      map['winddir'] = Variable<String>(winddir.value);
    }
    if (windspeed.present) {
      map['windspeed'] = Variable<double>(windspeed.value);
    }
    if (gust.present) {
      map['gust'] = Variable<double>(gust.value);
    }
    if (cavok.present) {
      map['cavok'] = Variable<String>(cavok.value);
    }
    if (horvis.present) {
      map['horvis'] = Variable<String>(horvis.value);
    }
    if (ww1.present) {
      map['ww1'] = Variable<String>(ww1.value);
    }
    if (ww2.present) {
      map['ww2'] = Variable<String>(ww2.value);
    }
    if (ww3.present) {
      map['ww3'] = Variable<String>(ww3.value);
    }
    if (cld1amount.present) {
      map['cld1amount'] = Variable<String>(cld1amount.value);
    }
    if (cld1type.present) {
      map['cld1type'] = Variable<String>(cld1type.value);
    }
    if (cld1height.present) {
      map['cld1height'] = Variable<int>(cld1height.value);
    }
    if (cld2amount.present) {
      map['cld2amount'] = Variable<String>(cld2amount.value);
    }
    if (cld2type.present) {
      map['cld2type'] = Variable<String>(cld2type.value);
    }
    if (cld2height.present) {
      map['cld2height'] = Variable<int>(cld2height.value);
    }
    if (cld3amount.present) {
      map['cld3amount'] = Variable<String>(cld3amount.value);
    }
    if (cld3type.present) {
      map['cld3type'] = Variable<String>(cld3type.value);
    }
    if (cld3height.present) {
      map['cld3height'] = Variable<int>(cld3height.value);
    }
    if (cld4amount.present) {
      map['cld4amount'] = Variable<String>(cld4amount.value);
    }
    if (cld4type.present) {
      map['cld4type'] = Variable<String>(cld4type.value);
    }
    if (cld4height.present) {
      map['cld4height'] = Variable<int>(cld4height.value);
    }
    if (maxtemp.present) {
      map['maxtemp'] = Variable<double>(maxtemp.value);
    }
    if (maxtemphour.present) {
      map['maxtemphour'] = Variable<int>(maxtemphour.value);
    }
    if (mintemp.present) {
      map['mintemp'] = Variable<double>(mintemp.value);
    }
    if (mintemphour.present) {
      map['mintemphour'] = Variable<int>(mintemphour.value);
    }
    if (taf.present) {
      map['taf'] = Variable<String>(taf.value);
    }
    if (lcldata.present) {
      map['lcldata'] = Variable<String>(lcldata.value);
    }
    if (lclmtoexpert.present) {
      map['lclmtoexpert'] = Variable<String>(lclmtoexpert.value);
    }
    if (airfieldid.present) {
      map['airfieldid'] = Variable<int>(airfieldid.value);
    }
    return map;
  }
}

class $MeteoTafTable extends MeteoTaf
    with TableInfo<$MeteoTafTable, meteo_taf> {
  final GeneratedDatabase _db;
  final String _alias;
  $MeteoTafTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'icao',
      $tableName,
      true,
    );
  }

  final VerificationMeta _forecasttimeMeta =
      const VerificationMeta('forecasttime');
  GeneratedDateTimeColumn _forecasttime;
  @override
  GeneratedDateTimeColumn get forecasttime =>
      _forecasttime ??= _constructForecasttime();
  GeneratedDateTimeColumn _constructForecasttime() {
    return GeneratedDateTimeColumn(
      'forecasttime',
      $tableName,
      true,
    );
  }

  final VerificationMeta _periodbeginMeta =
      const VerificationMeta('periodbegin');
  GeneratedDateTimeColumn _periodbegin;
  @override
  GeneratedDateTimeColumn get periodbegin =>
      _periodbegin ??= _constructPeriodbegin();
  GeneratedDateTimeColumn _constructPeriodbegin() {
    return GeneratedDateTimeColumn(
      'periodbegin',
      $tableName,
      true,
    );
  }

  final VerificationMeta _periodendMeta = const VerificationMeta('periodend');
  GeneratedDateTimeColumn _periodend;
  @override
  GeneratedDateTimeColumn get periodend => _periodend ??= _constructPeriodend();
  GeneratedDateTimeColumn _constructPeriodend() {
    return GeneratedDateTimeColumn(
      'periodend',
      $tableName,
      true,
    );
  }

  final VerificationMeta _winddirMeta = const VerificationMeta('winddir');
  GeneratedTextColumn _winddir;
  @override
  GeneratedTextColumn get winddir => _winddir ??= _constructWinddir();
  GeneratedTextColumn _constructWinddir() {
    return GeneratedTextColumn(
      'winddir',
      $tableName,
      true,
    );
  }

  final VerificationMeta _windspeedMeta = const VerificationMeta('windspeed');
  GeneratedRealColumn _windspeed;
  @override
  GeneratedRealColumn get windspeed => _windspeed ??= _constructWindspeed();
  GeneratedRealColumn _constructWindspeed() {
    return GeneratedRealColumn(
      'windspeed',
      $tableName,
      true,
    );
  }

  final VerificationMeta _gustMeta = const VerificationMeta('gust');
  GeneratedRealColumn _gust;
  @override
  GeneratedRealColumn get gust => _gust ??= _constructGust();
  GeneratedRealColumn _constructGust() {
    return GeneratedRealColumn(
      'gust',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cavokMeta = const VerificationMeta('cavok');
  GeneratedTextColumn _cavok;
  @override
  GeneratedTextColumn get cavok => _cavok ??= _constructCavok();
  GeneratedTextColumn _constructCavok() {
    return GeneratedTextColumn(
      'cavok',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horvisMeta = const VerificationMeta('horvis');
  GeneratedTextColumn _horvis;
  @override
  GeneratedTextColumn get horvis => _horvis ??= _constructHorvis();
  GeneratedTextColumn _constructHorvis() {
    return GeneratedTextColumn(
      'horvis',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ww1Meta = const VerificationMeta('ww1');
  GeneratedTextColumn _ww1;
  @override
  GeneratedTextColumn get ww1 => _ww1 ??= _constructWw1();
  GeneratedTextColumn _constructWw1() {
    return GeneratedTextColumn(
      'ww1',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ww2Meta = const VerificationMeta('ww2');
  GeneratedTextColumn _ww2;
  @override
  GeneratedTextColumn get ww2 => _ww2 ??= _constructWw2();
  GeneratedTextColumn _constructWw2() {
    return GeneratedTextColumn(
      'ww2',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ww3Meta = const VerificationMeta('ww3');
  GeneratedTextColumn _ww3;
  @override
  GeneratedTextColumn get ww3 => _ww3 ??= _constructWw3();
  GeneratedTextColumn _constructWw3() {
    return GeneratedTextColumn(
      'ww3',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld1amountMeta = const VerificationMeta('cld1amount');
  GeneratedTextColumn _cld1amount;
  @override
  GeneratedTextColumn get cld1amount => _cld1amount ??= _constructCld1amount();
  GeneratedTextColumn _constructCld1amount() {
    return GeneratedTextColumn(
      'cld1amount',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld1typeMeta = const VerificationMeta('cld1type');
  GeneratedTextColumn _cld1type;
  @override
  GeneratedTextColumn get cld1type => _cld1type ??= _constructCld1type();
  GeneratedTextColumn _constructCld1type() {
    return GeneratedTextColumn(
      'cld1type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld1heightMeta = const VerificationMeta('cld1height');
  GeneratedIntColumn _cld1height;
  @override
  GeneratedIntColumn get cld1height => _cld1height ??= _constructCld1height();
  GeneratedIntColumn _constructCld1height() {
    return GeneratedIntColumn(
      'cld1height',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld2amountMeta = const VerificationMeta('cld2amount');
  GeneratedTextColumn _cld2amount;
  @override
  GeneratedTextColumn get cld2amount => _cld2amount ??= _constructCld2amount();
  GeneratedTextColumn _constructCld2amount() {
    return GeneratedTextColumn(
      'cld2amount',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld2typeMeta = const VerificationMeta('cld2type');
  GeneratedTextColumn _cld2type;
  @override
  GeneratedTextColumn get cld2type => _cld2type ??= _constructCld2type();
  GeneratedTextColumn _constructCld2type() {
    return GeneratedTextColumn(
      'cld2type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld2heightMeta = const VerificationMeta('cld2height');
  GeneratedIntColumn _cld2height;
  @override
  GeneratedIntColumn get cld2height => _cld2height ??= _constructCld2height();
  GeneratedIntColumn _constructCld2height() {
    return GeneratedIntColumn(
      'cld2height',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld3amountMeta = const VerificationMeta('cld3amount');
  GeneratedTextColumn _cld3amount;
  @override
  GeneratedTextColumn get cld3amount => _cld3amount ??= _constructCld3amount();
  GeneratedTextColumn _constructCld3amount() {
    return GeneratedTextColumn(
      'cld3amount',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld3typeMeta = const VerificationMeta('cld3type');
  GeneratedTextColumn _cld3type;
  @override
  GeneratedTextColumn get cld3type => _cld3type ??= _constructCld3type();
  GeneratedTextColumn _constructCld3type() {
    return GeneratedTextColumn(
      'cld3type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld3heightMeta = const VerificationMeta('cld3height');
  GeneratedIntColumn _cld3height;
  @override
  GeneratedIntColumn get cld3height => _cld3height ??= _constructCld3height();
  GeneratedIntColumn _constructCld3height() {
    return GeneratedIntColumn(
      'cld3height',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld4amountMeta = const VerificationMeta('cld4amount');
  GeneratedTextColumn _cld4amount;
  @override
  GeneratedTextColumn get cld4amount => _cld4amount ??= _constructCld4amount();
  GeneratedTextColumn _constructCld4amount() {
    return GeneratedTextColumn(
      'cld4amount',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld4typeMeta = const VerificationMeta('cld4type');
  GeneratedTextColumn _cld4type;
  @override
  GeneratedTextColumn get cld4type => _cld4type ??= _constructCld4type();
  GeneratedTextColumn _constructCld4type() {
    return GeneratedTextColumn(
      'cld4type',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cld4heightMeta = const VerificationMeta('cld4height');
  GeneratedIntColumn _cld4height;
  @override
  GeneratedIntColumn get cld4height => _cld4height ??= _constructCld4height();
  GeneratedIntColumn _constructCld4height() {
    return GeneratedIntColumn(
      'cld4height',
      $tableName,
      true,
    );
  }

  final VerificationMeta _maxtempMeta = const VerificationMeta('maxtemp');
  GeneratedRealColumn _maxtemp;
  @override
  GeneratedRealColumn get maxtemp => _maxtemp ??= _constructMaxtemp();
  GeneratedRealColumn _constructMaxtemp() {
    return GeneratedRealColumn(
      'maxtemp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _maxtemphourMeta =
      const VerificationMeta('maxtemphour');
  GeneratedIntColumn _maxtemphour;
  @override
  GeneratedIntColumn get maxtemphour =>
      _maxtemphour ??= _constructMaxtemphour();
  GeneratedIntColumn _constructMaxtemphour() {
    return GeneratedIntColumn(
      'maxtemphour',
      $tableName,
      true,
    );
  }

  final VerificationMeta _mintempMeta = const VerificationMeta('mintemp');
  GeneratedRealColumn _mintemp;
  @override
  GeneratedRealColumn get mintemp => _mintemp ??= _constructMintemp();
  GeneratedRealColumn _constructMintemp() {
    return GeneratedRealColumn(
      'mintemp',
      $tableName,
      true,
    );
  }

  final VerificationMeta _mintemphourMeta =
      const VerificationMeta('mintemphour');
  GeneratedIntColumn _mintemphour;
  @override
  GeneratedIntColumn get mintemphour =>
      _mintemphour ??= _constructMintemphour();
  GeneratedIntColumn _constructMintemphour() {
    return GeneratedIntColumn(
      'mintemphour',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tafMeta = const VerificationMeta('taf');
  GeneratedTextColumn _taf;
  @override
  GeneratedTextColumn get taf => _taf ??= _constructTaf();
  GeneratedTextColumn _constructTaf() {
    return GeneratedTextColumn(
      'taf',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lcldataMeta = const VerificationMeta('lcldata');
  GeneratedTextColumn _lcldata;
  @override
  GeneratedTextColumn get lcldata => _lcldata ??= _constructLcldata();
  GeneratedTextColumn _constructLcldata() {
    return GeneratedTextColumn(
      'lcldata',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lclmtoexpertMeta =
      const VerificationMeta('lclmtoexpert');
  GeneratedTextColumn _lclmtoexpert;
  @override
  GeneratedTextColumn get lclmtoexpert =>
      _lclmtoexpert ??= _constructLclmtoexpert();
  GeneratedTextColumn _constructLclmtoexpert() {
    return GeneratedTextColumn(
      'lclmtoexpert',
      $tableName,
      true,
    );
  }

  final VerificationMeta _airfieldidMeta = const VerificationMeta('airfieldid');
  GeneratedIntColumn _airfieldid;
  @override
  GeneratedIntColumn get airfieldid => _airfieldid ??= _constructAirfieldid();
  GeneratedIntColumn _constructAirfieldid() {
    return GeneratedIntColumn(
      'airfieldid',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        icao,
        forecasttime,
        periodbegin,
        periodend,
        winddir,
        windspeed,
        gust,
        cavok,
        horvis,
        ww1,
        ww2,
        ww3,
        cld1amount,
        cld1type,
        cld1height,
        cld2amount,
        cld2type,
        cld2height,
        cld3amount,
        cld3type,
        cld3height,
        cld4amount,
        cld4type,
        cld4height,
        maxtemp,
        maxtemphour,
        mintemp,
        mintemphour,
        taf,
        lcldata,
        lclmtoexpert,
        airfieldid
      ];
  @override
  $MeteoTafTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'meteo_taf';
  @override
  final String actualTableName = 'meteo_taf';
  @override
  VerificationContext validateIntegrity(Insertable<meteo_taf> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('icao')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['icao'], _icaoMeta));
    }
    if (data.containsKey('forecasttime')) {
      context.handle(
          _forecasttimeMeta,
          forecasttime.isAcceptableOrUnknown(
              data['forecasttime'], _forecasttimeMeta));
    }
    if (data.containsKey('periodbegin')) {
      context.handle(
          _periodbeginMeta,
          periodbegin.isAcceptableOrUnknown(
              data['periodbegin'], _periodbeginMeta));
    }
    if (data.containsKey('periodend')) {
      context.handle(_periodendMeta,
          periodend.isAcceptableOrUnknown(data['periodend'], _periodendMeta));
    }
    if (data.containsKey('winddir')) {
      context.handle(_winddirMeta,
          winddir.isAcceptableOrUnknown(data['winddir'], _winddirMeta));
    }
    if (data.containsKey('windspeed')) {
      context.handle(_windspeedMeta,
          windspeed.isAcceptableOrUnknown(data['windspeed'], _windspeedMeta));
    }
    if (data.containsKey('gust')) {
      context.handle(
          _gustMeta, gust.isAcceptableOrUnknown(data['gust'], _gustMeta));
    }
    if (data.containsKey('cavok')) {
      context.handle(
          _cavokMeta, cavok.isAcceptableOrUnknown(data['cavok'], _cavokMeta));
    }
    if (data.containsKey('horvis')) {
      context.handle(_horvisMeta,
          horvis.isAcceptableOrUnknown(data['horvis'], _horvisMeta));
    }
    if (data.containsKey('ww1')) {
      context.handle(
          _ww1Meta, ww1.isAcceptableOrUnknown(data['ww1'], _ww1Meta));
    }
    if (data.containsKey('ww2')) {
      context.handle(
          _ww2Meta, ww2.isAcceptableOrUnknown(data['ww2'], _ww2Meta));
    }
    if (data.containsKey('ww3')) {
      context.handle(
          _ww3Meta, ww3.isAcceptableOrUnknown(data['ww3'], _ww3Meta));
    }
    if (data.containsKey('cld1amount')) {
      context.handle(
          _cld1amountMeta,
          cld1amount.isAcceptableOrUnknown(
              data['cld1amount'], _cld1amountMeta));
    }
    if (data.containsKey('cld1type')) {
      context.handle(_cld1typeMeta,
          cld1type.isAcceptableOrUnknown(data['cld1type'], _cld1typeMeta));
    }
    if (data.containsKey('cld1height')) {
      context.handle(
          _cld1heightMeta,
          cld1height.isAcceptableOrUnknown(
              data['cld1height'], _cld1heightMeta));
    }
    if (data.containsKey('cld2amount')) {
      context.handle(
          _cld2amountMeta,
          cld2amount.isAcceptableOrUnknown(
              data['cld2amount'], _cld2amountMeta));
    }
    if (data.containsKey('cld2type')) {
      context.handle(_cld2typeMeta,
          cld2type.isAcceptableOrUnknown(data['cld2type'], _cld2typeMeta));
    }
    if (data.containsKey('cld2height')) {
      context.handle(
          _cld2heightMeta,
          cld2height.isAcceptableOrUnknown(
              data['cld2height'], _cld2heightMeta));
    }
    if (data.containsKey('cld3amount')) {
      context.handle(
          _cld3amountMeta,
          cld3amount.isAcceptableOrUnknown(
              data['cld3amount'], _cld3amountMeta));
    }
    if (data.containsKey('cld3type')) {
      context.handle(_cld3typeMeta,
          cld3type.isAcceptableOrUnknown(data['cld3type'], _cld3typeMeta));
    }
    if (data.containsKey('cld3height')) {
      context.handle(
          _cld3heightMeta,
          cld3height.isAcceptableOrUnknown(
              data['cld3height'], _cld3heightMeta));
    }
    if (data.containsKey('cld4amount')) {
      context.handle(
          _cld4amountMeta,
          cld4amount.isAcceptableOrUnknown(
              data['cld4amount'], _cld4amountMeta));
    }
    if (data.containsKey('cld4type')) {
      context.handle(_cld4typeMeta,
          cld4type.isAcceptableOrUnknown(data['cld4type'], _cld4typeMeta));
    }
    if (data.containsKey('cld4height')) {
      context.handle(
          _cld4heightMeta,
          cld4height.isAcceptableOrUnknown(
              data['cld4height'], _cld4heightMeta));
    }
    if (data.containsKey('maxtemp')) {
      context.handle(_maxtempMeta,
          maxtemp.isAcceptableOrUnknown(data['maxtemp'], _maxtempMeta));
    }
    if (data.containsKey('maxtemphour')) {
      context.handle(
          _maxtemphourMeta,
          maxtemphour.isAcceptableOrUnknown(
              data['maxtemphour'], _maxtemphourMeta));
    }
    if (data.containsKey('mintemp')) {
      context.handle(_mintempMeta,
          mintemp.isAcceptableOrUnknown(data['mintemp'], _mintempMeta));
    }
    if (data.containsKey('mintemphour')) {
      context.handle(
          _mintemphourMeta,
          mintemphour.isAcceptableOrUnknown(
              data['mintemphour'], _mintemphourMeta));
    }
    if (data.containsKey('taf')) {
      context.handle(
          _tafMeta, taf.isAcceptableOrUnknown(data['taf'], _tafMeta));
    }
    if (data.containsKey('lcldata')) {
      context.handle(_lcldataMeta,
          lcldata.isAcceptableOrUnknown(data['lcldata'], _lcldataMeta));
    }
    if (data.containsKey('lclmtoexpert')) {
      context.handle(
          _lclmtoexpertMeta,
          lclmtoexpert.isAcceptableOrUnknown(
              data['lclmtoexpert'], _lclmtoexpertMeta));
    }
    if (data.containsKey('airfieldid')) {
      context.handle(
          _airfieldidMeta,
          airfieldid.isAcceptableOrUnknown(
              data['airfieldid'], _airfieldidMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  meteo_taf map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return meteo_taf.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $MeteoTafTable createAlias(String alias) {
    return $MeteoTafTable(_db, alias);
  }
}

class Meteo_Wrapper extends DataClass implements Insertable<Meteo_Wrapper> {
  final int id;
  final double winddir;
  final double vardir;
  final double windextdir;
  final double varextdir;
  final DateTime observationtime;
  final double windspeedinknots;
  final double windgust;
  final double temperature;
  final double qnh;
  final String metar;
  final String horvis;
  final bool cavok;
  final String lowestbasecloud;
  final double relativehumidity;
  final String flightrulecolorcode;
  final int meteo_metar_icao;
  Meteo_Wrapper(
      {@required this.id,
      this.winddir,
      this.vardir,
      this.windextdir,
      this.varextdir,
      this.observationtime,
      this.windspeedinknots,
      this.windgust,
      this.temperature,
      this.qnh,
      this.metar,
      this.horvis,
      this.cavok,
      this.lowestbasecloud,
      this.relativehumidity,
      this.flightrulecolorcode,
      this.meteo_metar_icao});
  factory Meteo_Wrapper.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final doubleType = db.typeSystem.forDartType<double>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final boolType = db.typeSystem.forDartType<bool>();
    return Meteo_Wrapper(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      winddir:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}winddir']),
      vardir:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}vardir']),
      windextdir: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}windextdir']),
      varextdir: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}varextdir']),
      observationtime: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}observationtime']),
      windspeedinknots: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}windspeedinknots']),
      windgust: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}windgust']),
      temperature: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}temperature']),
      qnh: doubleType.mapFromDatabaseResponse(data['${effectivePrefix}qnh']),
      metar:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}metar']),
      horvis:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}horvis']),
      cavok: boolType.mapFromDatabaseResponse(data['${effectivePrefix}cavok']),
      lowestbasecloud: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}lowestbasecloud']),
      relativehumidity: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}relativehumidity']),
      flightrulecolorcode: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}flightrulecolorcode']),
      meteo_metar_icao: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}meteo_metar_icao']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || winddir != null) {
      map['winddir'] = Variable<double>(winddir);
    }
    if (!nullToAbsent || vardir != null) {
      map['vardir'] = Variable<double>(vardir);
    }
    if (!nullToAbsent || windextdir != null) {
      map['windextdir'] = Variable<double>(windextdir);
    }
    if (!nullToAbsent || varextdir != null) {
      map['varextdir'] = Variable<double>(varextdir);
    }
    if (!nullToAbsent || observationtime != null) {
      map['observationtime'] = Variable<DateTime>(observationtime);
    }
    if (!nullToAbsent || windspeedinknots != null) {
      map['windspeedinknots'] = Variable<double>(windspeedinknots);
    }
    if (!nullToAbsent || windgust != null) {
      map['windgust'] = Variable<double>(windgust);
    }
    if (!nullToAbsent || temperature != null) {
      map['temperature'] = Variable<double>(temperature);
    }
    if (!nullToAbsent || qnh != null) {
      map['qnh'] = Variable<double>(qnh);
    }
    if (!nullToAbsent || metar != null) {
      map['metar'] = Variable<String>(metar);
    }
    if (!nullToAbsent || horvis != null) {
      map['horvis'] = Variable<String>(horvis);
    }
    if (!nullToAbsent || cavok != null) {
      map['cavok'] = Variable<bool>(cavok);
    }
    if (!nullToAbsent || lowestbasecloud != null) {
      map['lowestbasecloud'] = Variable<String>(lowestbasecloud);
    }
    if (!nullToAbsent || relativehumidity != null) {
      map['relativehumidity'] = Variable<double>(relativehumidity);
    }
    if (!nullToAbsent || flightrulecolorcode != null) {
      map['flightrulecolorcode'] = Variable<String>(flightrulecolorcode);
    }
    if (!nullToAbsent || meteo_metar_icao != null) {
      map['meteo_metar_icao'] = Variable<int>(meteo_metar_icao);
    }
    return map;
  }

  factory Meteo_Wrapper.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Meteo_Wrapper(
      id: serializer.fromJson<int>(json['id']),
      winddir: serializer.fromJson<double>(json['winddir']),
      vardir: serializer.fromJson<double>(json['vardir']),
      windextdir: serializer.fromJson<double>(json['windextdir']),
      varextdir: serializer.fromJson<double>(json['varextdir']),
      observationtime: serializer.fromJson<DateTime>(json['observationtime']),
      windspeedinknots: serializer.fromJson<double>(json['windspeedinknots']),
      windgust: serializer.fromJson<double>(json['windgust']),
      temperature: serializer.fromJson<double>(json['temperature']),
      qnh: serializer.fromJson<double>(json['qnh']),
      metar: serializer.fromJson<String>(json['metar']),
      horvis: serializer.fromJson<String>(json['horvis']),
      cavok: serializer.fromJson<bool>(json['cavok']),
      lowestbasecloud: serializer.fromJson<String>(json['lowestbasecloud']),
      relativehumidity: serializer.fromJson<double>(json['relativehumidity']),
      flightrulecolorcode:
          serializer.fromJson<String>(json['flightrulecolorcode']),
      meteo_metar_icao: serializer.fromJson<int>(json['meteo_metar_icao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'winddir': serializer.toJson<double>(winddir),
      'vardir': serializer.toJson<double>(vardir),
      'windextdir': serializer.toJson<double>(windextdir),
      'varextdir': serializer.toJson<double>(varextdir),
      'observationtime': serializer.toJson<DateTime>(observationtime),
      'windspeedinknots': serializer.toJson<double>(windspeedinknots),
      'windgust': serializer.toJson<double>(windgust),
      'temperature': serializer.toJson<double>(temperature),
      'qnh': serializer.toJson<double>(qnh),
      'metar': serializer.toJson<String>(metar),
      'horvis': serializer.toJson<String>(horvis),
      'cavok': serializer.toJson<bool>(cavok),
      'lowestbasecloud': serializer.toJson<String>(lowestbasecloud),
      'relativehumidity': serializer.toJson<double>(relativehumidity),
      'flightrulecolorcode': serializer.toJson<String>(flightrulecolorcode),
      'meteo_metar_icao': serializer.toJson<int>(meteo_metar_icao),
    };
  }

  Meteo_Wrapper copyWith(
          {int id,
          double winddir,
          double vardir,
          double windextdir,
          double varextdir,
          DateTime observationtime,
          double windspeedinknots,
          double windgust,
          double temperature,
          double qnh,
          String metar,
          String horvis,
          bool cavok,
          String lowestbasecloud,
          double relativehumidity,
          String flightrulecolorcode,
          int meteo_metar_icao}) =>
      Meteo_Wrapper(
        id: id ?? this.id,
        winddir: winddir ?? this.winddir,
        vardir: vardir ?? this.vardir,
        windextdir: windextdir ?? this.windextdir,
        varextdir: varextdir ?? this.varextdir,
        observationtime: observationtime ?? this.observationtime,
        windspeedinknots: windspeedinknots ?? this.windspeedinknots,
        windgust: windgust ?? this.windgust,
        temperature: temperature ?? this.temperature,
        qnh: qnh ?? this.qnh,
        metar: metar ?? this.metar,
        horvis: horvis ?? this.horvis,
        cavok: cavok ?? this.cavok,
        lowestbasecloud: lowestbasecloud ?? this.lowestbasecloud,
        relativehumidity: relativehumidity ?? this.relativehumidity,
        flightrulecolorcode: flightrulecolorcode ?? this.flightrulecolorcode,
        meteo_metar_icao: meteo_metar_icao ?? this.meteo_metar_icao,
      );
  @override
  String toString() {
    return (StringBuffer('Meteo_Wrapper(')
          ..write('id: $id, ')
          ..write('winddir: $winddir, ')
          ..write('vardir: $vardir, ')
          ..write('windextdir: $windextdir, ')
          ..write('varextdir: $varextdir, ')
          ..write('observationtime: $observationtime, ')
          ..write('windspeedinknots: $windspeedinknots, ')
          ..write('windgust: $windgust, ')
          ..write('temperature: $temperature, ')
          ..write('qnh: $qnh, ')
          ..write('metar: $metar, ')
          ..write('horvis: $horvis, ')
          ..write('cavok: $cavok, ')
          ..write('lowestbasecloud: $lowestbasecloud, ')
          ..write('relativehumidity: $relativehumidity, ')
          ..write('flightrulecolorcode: $flightrulecolorcode, ')
          ..write('meteo_metar_icao: $meteo_metar_icao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          winddir.hashCode,
          $mrjc(
              vardir.hashCode,
              $mrjc(
                  windextdir.hashCode,
                  $mrjc(
                      varextdir.hashCode,
                      $mrjc(
                          observationtime.hashCode,
                          $mrjc(
                              windspeedinknots.hashCode,
                              $mrjc(
                                  windgust.hashCode,
                                  $mrjc(
                                      temperature.hashCode,
                                      $mrjc(
                                          qnh.hashCode,
                                          $mrjc(
                                              metar.hashCode,
                                              $mrjc(
                                                  horvis.hashCode,
                                                  $mrjc(
                                                      cavok.hashCode,
                                                      $mrjc(
                                                          lowestbasecloud
                                                              .hashCode,
                                                          $mrjc(
                                                              relativehumidity
                                                                  .hashCode,
                                                              $mrjc(
                                                                  flightrulecolorcode
                                                                      .hashCode,
                                                                  meteo_metar_icao
                                                                      .hashCode)))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Meteo_Wrapper &&
          other.id == this.id &&
          other.winddir == this.winddir &&
          other.vardir == this.vardir &&
          other.windextdir == this.windextdir &&
          other.varextdir == this.varextdir &&
          other.observationtime == this.observationtime &&
          other.windspeedinknots == this.windspeedinknots &&
          other.windgust == this.windgust &&
          other.temperature == this.temperature &&
          other.qnh == this.qnh &&
          other.metar == this.metar &&
          other.horvis == this.horvis &&
          other.cavok == this.cavok &&
          other.lowestbasecloud == this.lowestbasecloud &&
          other.relativehumidity == this.relativehumidity &&
          other.flightrulecolorcode == this.flightrulecolorcode &&
          other.meteo_metar_icao == this.meteo_metar_icao);
}

class MeteoWrapperCompanion extends UpdateCompanion<Meteo_Wrapper> {
  final Value<int> id;
  final Value<double> winddir;
  final Value<double> vardir;
  final Value<double> windextdir;
  final Value<double> varextdir;
  final Value<DateTime> observationtime;
  final Value<double> windspeedinknots;
  final Value<double> windgust;
  final Value<double> temperature;
  final Value<double> qnh;
  final Value<String> metar;
  final Value<String> horvis;
  final Value<bool> cavok;
  final Value<String> lowestbasecloud;
  final Value<double> relativehumidity;
  final Value<String> flightrulecolorcode;
  final Value<int> meteo_metar_icao;
  const MeteoWrapperCompanion({
    this.id = const Value.absent(),
    this.winddir = const Value.absent(),
    this.vardir = const Value.absent(),
    this.windextdir = const Value.absent(),
    this.varextdir = const Value.absent(),
    this.observationtime = const Value.absent(),
    this.windspeedinknots = const Value.absent(),
    this.windgust = const Value.absent(),
    this.temperature = const Value.absent(),
    this.qnh = const Value.absent(),
    this.metar = const Value.absent(),
    this.horvis = const Value.absent(),
    this.cavok = const Value.absent(),
    this.lowestbasecloud = const Value.absent(),
    this.relativehumidity = const Value.absent(),
    this.flightrulecolorcode = const Value.absent(),
    this.meteo_metar_icao = const Value.absent(),
  });
  MeteoWrapperCompanion.insert({
    this.id = const Value.absent(),
    this.winddir = const Value.absent(),
    this.vardir = const Value.absent(),
    this.windextdir = const Value.absent(),
    this.varextdir = const Value.absent(),
    this.observationtime = const Value.absent(),
    this.windspeedinknots = const Value.absent(),
    this.windgust = const Value.absent(),
    this.temperature = const Value.absent(),
    this.qnh = const Value.absent(),
    this.metar = const Value.absent(),
    this.horvis = const Value.absent(),
    this.cavok = const Value.absent(),
    this.lowestbasecloud = const Value.absent(),
    this.relativehumidity = const Value.absent(),
    this.flightrulecolorcode = const Value.absent(),
    this.meteo_metar_icao = const Value.absent(),
  });
  static Insertable<Meteo_Wrapper> custom({
    Expression<int> id,
    Expression<double> winddir,
    Expression<double> vardir,
    Expression<double> windextdir,
    Expression<double> varextdir,
    Expression<DateTime> observationtime,
    Expression<double> windspeedinknots,
    Expression<double> windgust,
    Expression<double> temperature,
    Expression<double> qnh,
    Expression<String> metar,
    Expression<String> horvis,
    Expression<bool> cavok,
    Expression<String> lowestbasecloud,
    Expression<double> relativehumidity,
    Expression<String> flightrulecolorcode,
    Expression<int> meteo_metar_icao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (winddir != null) 'winddir': winddir,
      if (vardir != null) 'vardir': vardir,
      if (windextdir != null) 'windextdir': windextdir,
      if (varextdir != null) 'varextdir': varextdir,
      if (observationtime != null) 'observationtime': observationtime,
      if (windspeedinknots != null) 'windspeedinknots': windspeedinknots,
      if (windgust != null) 'windgust': windgust,
      if (temperature != null) 'temperature': temperature,
      if (qnh != null) 'qnh': qnh,
      if (metar != null) 'metar': metar,
      if (horvis != null) 'horvis': horvis,
      if (cavok != null) 'cavok': cavok,
      if (lowestbasecloud != null) 'lowestbasecloud': lowestbasecloud,
      if (relativehumidity != null) 'relativehumidity': relativehumidity,
      if (flightrulecolorcode != null)
        'flightrulecolorcode': flightrulecolorcode,
      if (meteo_metar_icao != null) 'meteo_metar_icao': meteo_metar_icao,
    });
  }

  MeteoWrapperCompanion copyWith(
      {Value<int> id,
      Value<double> winddir,
      Value<double> vardir,
      Value<double> windextdir,
      Value<double> varextdir,
      Value<DateTime> observationtime,
      Value<double> windspeedinknots,
      Value<double> windgust,
      Value<double> temperature,
      Value<double> qnh,
      Value<String> metar,
      Value<String> horvis,
      Value<bool> cavok,
      Value<String> lowestbasecloud,
      Value<double> relativehumidity,
      Value<String> flightrulecolorcode,
      Value<int> meteo_metar_icao}) {
    return MeteoWrapperCompanion(
      id: id ?? this.id,
      winddir: winddir ?? this.winddir,
      vardir: vardir ?? this.vardir,
      windextdir: windextdir ?? this.windextdir,
      varextdir: varextdir ?? this.varextdir,
      observationtime: observationtime ?? this.observationtime,
      windspeedinknots: windspeedinknots ?? this.windspeedinknots,
      windgust: windgust ?? this.windgust,
      temperature: temperature ?? this.temperature,
      qnh: qnh ?? this.qnh,
      metar: metar ?? this.metar,
      horvis: horvis ?? this.horvis,
      cavok: cavok ?? this.cavok,
      lowestbasecloud: lowestbasecloud ?? this.lowestbasecloud,
      relativehumidity: relativehumidity ?? this.relativehumidity,
      flightrulecolorcode: flightrulecolorcode ?? this.flightrulecolorcode,
      meteo_metar_icao: meteo_metar_icao ?? this.meteo_metar_icao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (winddir.present) {
      map['winddir'] = Variable<double>(winddir.value);
    }
    if (vardir.present) {
      map['vardir'] = Variable<double>(vardir.value);
    }
    if (windextdir.present) {
      map['windextdir'] = Variable<double>(windextdir.value);
    }
    if (varextdir.present) {
      map['varextdir'] = Variable<double>(varextdir.value);
    }
    if (observationtime.present) {
      map['observationtime'] = Variable<DateTime>(observationtime.value);
    }
    if (windspeedinknots.present) {
      map['windspeedinknots'] = Variable<double>(windspeedinknots.value);
    }
    if (windgust.present) {
      map['windgust'] = Variable<double>(windgust.value);
    }
    if (temperature.present) {
      map['temperature'] = Variable<double>(temperature.value);
    }
    if (qnh.present) {
      map['qnh'] = Variable<double>(qnh.value);
    }
    if (metar.present) {
      map['metar'] = Variable<String>(metar.value);
    }
    if (horvis.present) {
      map['horvis'] = Variable<String>(horvis.value);
    }
    if (cavok.present) {
      map['cavok'] = Variable<bool>(cavok.value);
    }
    if (lowestbasecloud.present) {
      map['lowestbasecloud'] = Variable<String>(lowestbasecloud.value);
    }
    if (relativehumidity.present) {
      map['relativehumidity'] = Variable<double>(relativehumidity.value);
    }
    if (flightrulecolorcode.present) {
      map['flightrulecolorcode'] = Variable<String>(flightrulecolorcode.value);
    }
    if (meteo_metar_icao.present) {
      map['meteo_metar_icao'] = Variable<int>(meteo_metar_icao.value);
    }
    return map;
  }
}

class $MeteoWrapperTable extends MeteoWrapper
    with TableInfo<$MeteoWrapperTable, Meteo_Wrapper> {
  final GeneratedDatabase _db;
  final String _alias;
  $MeteoWrapperTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _winddirMeta = const VerificationMeta('winddir');
  GeneratedRealColumn _winddir;
  @override
  GeneratedRealColumn get winddir => _winddir ??= _constructWinddir();
  GeneratedRealColumn _constructWinddir() {
    return GeneratedRealColumn(
      'winddir',
      $tableName,
      true,
    );
  }

  final VerificationMeta _vardirMeta = const VerificationMeta('vardir');
  GeneratedRealColumn _vardir;
  @override
  GeneratedRealColumn get vardir => _vardir ??= _constructVardir();
  GeneratedRealColumn _constructVardir() {
    return GeneratedRealColumn(
      'vardir',
      $tableName,
      true,
    );
  }

  final VerificationMeta _windextdirMeta = const VerificationMeta('windextdir');
  GeneratedRealColumn _windextdir;
  @override
  GeneratedRealColumn get windextdir => _windextdir ??= _constructWindextdir();
  GeneratedRealColumn _constructWindextdir() {
    return GeneratedRealColumn(
      'windextdir',
      $tableName,
      true,
    );
  }

  final VerificationMeta _varextdirMeta = const VerificationMeta('varextdir');
  GeneratedRealColumn _varextdir;
  @override
  GeneratedRealColumn get varextdir => _varextdir ??= _constructVarextdir();
  GeneratedRealColumn _constructVarextdir() {
    return GeneratedRealColumn(
      'varextdir',
      $tableName,
      true,
    );
  }

  final VerificationMeta _observationtimeMeta =
      const VerificationMeta('observationtime');
  GeneratedDateTimeColumn _observationtime;
  @override
  GeneratedDateTimeColumn get observationtime =>
      _observationtime ??= _constructObservationtime();
  GeneratedDateTimeColumn _constructObservationtime() {
    return GeneratedDateTimeColumn(
      'observationtime',
      $tableName,
      true,
    );
  }

  final VerificationMeta _windspeedinknotsMeta =
      const VerificationMeta('windspeedinknots');
  GeneratedRealColumn _windspeedinknots;
  @override
  GeneratedRealColumn get windspeedinknots =>
      _windspeedinknots ??= _constructWindspeedinknots();
  GeneratedRealColumn _constructWindspeedinknots() {
    return GeneratedRealColumn(
      'windspeedinknots',
      $tableName,
      true,
    );
  }

  final VerificationMeta _windgustMeta = const VerificationMeta('windgust');
  GeneratedRealColumn _windgust;
  @override
  GeneratedRealColumn get windgust => _windgust ??= _constructWindgust();
  GeneratedRealColumn _constructWindgust() {
    return GeneratedRealColumn(
      'windgust',
      $tableName,
      true,
    );
  }

  final VerificationMeta _temperatureMeta =
      const VerificationMeta('temperature');
  GeneratedRealColumn _temperature;
  @override
  GeneratedRealColumn get temperature =>
      _temperature ??= _constructTemperature();
  GeneratedRealColumn _constructTemperature() {
    return GeneratedRealColumn(
      'temperature',
      $tableName,
      true,
    );
  }

  final VerificationMeta _qnhMeta = const VerificationMeta('qnh');
  GeneratedRealColumn _qnh;
  @override
  GeneratedRealColumn get qnh => _qnh ??= _constructQnh();
  GeneratedRealColumn _constructQnh() {
    return GeneratedRealColumn(
      'qnh',
      $tableName,
      true,
    );
  }

  final VerificationMeta _metarMeta = const VerificationMeta('metar');
  GeneratedTextColumn _metar;
  @override
  GeneratedTextColumn get metar => _metar ??= _constructMetar();
  GeneratedTextColumn _constructMetar() {
    return GeneratedTextColumn(
      'metar',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horvisMeta = const VerificationMeta('horvis');
  GeneratedTextColumn _horvis;
  @override
  GeneratedTextColumn get horvis => _horvis ??= _constructHorvis();
  GeneratedTextColumn _constructHorvis() {
    return GeneratedTextColumn(
      'horvis',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cavokMeta = const VerificationMeta('cavok');
  GeneratedBoolColumn _cavok;
  @override
  GeneratedBoolColumn get cavok => _cavok ??= _constructCavok();
  GeneratedBoolColumn _constructCavok() {
    return GeneratedBoolColumn(
      'cavok',
      $tableName,
      true,
    );
  }

  final VerificationMeta _lowestbasecloudMeta =
      const VerificationMeta('lowestbasecloud');
  GeneratedTextColumn _lowestbasecloud;
  @override
  GeneratedTextColumn get lowestbasecloud =>
      _lowestbasecloud ??= _constructLowestbasecloud();
  GeneratedTextColumn _constructLowestbasecloud() {
    return GeneratedTextColumn(
      'lowestbasecloud',
      $tableName,
      true,
    );
  }

  final VerificationMeta _relativehumidityMeta =
      const VerificationMeta('relativehumidity');
  GeneratedRealColumn _relativehumidity;
  @override
  GeneratedRealColumn get relativehumidity =>
      _relativehumidity ??= _constructRelativehumidity();
  GeneratedRealColumn _constructRelativehumidity() {
    return GeneratedRealColumn(
      'relativehumidity',
      $tableName,
      true,
    );
  }

  final VerificationMeta _flightrulecolorcodeMeta =
      const VerificationMeta('flightrulecolorcode');
  GeneratedTextColumn _flightrulecolorcode;
  @override
  GeneratedTextColumn get flightrulecolorcode =>
      _flightrulecolorcode ??= _constructFlightrulecolorcode();
  GeneratedTextColumn _constructFlightrulecolorcode() {
    return GeneratedTextColumn(
      'flightrulecolorcode',
      $tableName,
      true,
    );
  }

  final VerificationMeta _meteo_metar_icaoMeta =
      const VerificationMeta('meteo_metar_icao');
  GeneratedIntColumn _meteo_metar_icao;
  @override
  GeneratedIntColumn get meteo_metar_icao =>
      _meteo_metar_icao ??= _constructMeteoMetarIcao();
  GeneratedIntColumn _constructMeteoMetarIcao() {
    return GeneratedIntColumn('meteo_metar_icao', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES meteo_metar(id)');
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        winddir,
        vardir,
        windextdir,
        varextdir,
        observationtime,
        windspeedinknots,
        windgust,
        temperature,
        qnh,
        metar,
        horvis,
        cavok,
        lowestbasecloud,
        relativehumidity,
        flightrulecolorcode,
        meteo_metar_icao
      ];
  @override
  $MeteoWrapperTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'meteo_wrapper';
  @override
  final String actualTableName = 'meteo_wrapper';
  @override
  VerificationContext validateIntegrity(Insertable<Meteo_Wrapper> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('winddir')) {
      context.handle(_winddirMeta,
          winddir.isAcceptableOrUnknown(data['winddir'], _winddirMeta));
    }
    if (data.containsKey('vardir')) {
      context.handle(_vardirMeta,
          vardir.isAcceptableOrUnknown(data['vardir'], _vardirMeta));
    }
    if (data.containsKey('windextdir')) {
      context.handle(
          _windextdirMeta,
          windextdir.isAcceptableOrUnknown(
              data['windextdir'], _windextdirMeta));
    }
    if (data.containsKey('varextdir')) {
      context.handle(_varextdirMeta,
          varextdir.isAcceptableOrUnknown(data['varextdir'], _varextdirMeta));
    }
    if (data.containsKey('observationtime')) {
      context.handle(
          _observationtimeMeta,
          observationtime.isAcceptableOrUnknown(
              data['observationtime'], _observationtimeMeta));
    }
    if (data.containsKey('windspeedinknots')) {
      context.handle(
          _windspeedinknotsMeta,
          windspeedinknots.isAcceptableOrUnknown(
              data['windspeedinknots'], _windspeedinknotsMeta));
    }
    if (data.containsKey('windgust')) {
      context.handle(_windgustMeta,
          windgust.isAcceptableOrUnknown(data['windgust'], _windgustMeta));
    }
    if (data.containsKey('temperature')) {
      context.handle(
          _temperatureMeta,
          temperature.isAcceptableOrUnknown(
              data['temperature'], _temperatureMeta));
    }
    if (data.containsKey('qnh')) {
      context.handle(
          _qnhMeta, qnh.isAcceptableOrUnknown(data['qnh'], _qnhMeta));
    }
    if (data.containsKey('metar')) {
      context.handle(
          _metarMeta, metar.isAcceptableOrUnknown(data['metar'], _metarMeta));
    }
    if (data.containsKey('horvis')) {
      context.handle(_horvisMeta,
          horvis.isAcceptableOrUnknown(data['horvis'], _horvisMeta));
    }
    if (data.containsKey('cavok')) {
      context.handle(
          _cavokMeta, cavok.isAcceptableOrUnknown(data['cavok'], _cavokMeta));
    }
    if (data.containsKey('lowestbasecloud')) {
      context.handle(
          _lowestbasecloudMeta,
          lowestbasecloud.isAcceptableOrUnknown(
              data['lowestbasecloud'], _lowestbasecloudMeta));
    }
    if (data.containsKey('relativehumidity')) {
      context.handle(
          _relativehumidityMeta,
          relativehumidity.isAcceptableOrUnknown(
              data['relativehumidity'], _relativehumidityMeta));
    }
    if (data.containsKey('flightrulecolorcode')) {
      context.handle(
          _flightrulecolorcodeMeta,
          flightrulecolorcode.isAcceptableOrUnknown(
              data['flightrulecolorcode'], _flightrulecolorcodeMeta));
    }
    if (data.containsKey('meteo_metar_icao')) {
      context.handle(
          _meteo_metar_icaoMeta,
          meteo_metar_icao.isAcceptableOrUnknown(
              data['meteo_metar_icao'], _meteo_metar_icaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Meteo_Wrapper map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Meteo_Wrapper.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $MeteoWrapperTable createAlias(String alias) {
    return $MeteoWrapperTable(_db, alias);
  }
}

class Meteo_Metar extends DataClass implements Insertable<Meteo_Metar> {
  final int id;
  final String icao;
  Meteo_Metar({@required this.id, @required this.icao});
  factory Meteo_Metar.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return Meteo_Metar(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}id']),
      icao: stringType.mapFromDatabaseResponse(data['${effectivePrefix}desc']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || icao != null) {
      map['desc'] = Variable<String>(icao);
    }
    return map;
  }

  factory Meteo_Metar.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Meteo_Metar(
      id: serializer.fromJson<int>(json['id']),
      icao: serializer.fromJson<String>(json['icao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'icao': serializer.toJson<String>(icao),
    };
  }

  Meteo_Metar copyWith({int id, String icao}) => Meteo_Metar(
        id: id ?? this.id,
        icao: icao ?? this.icao,
      );
  @override
  String toString() {
    return (StringBuffer('Meteo_Metar(')
          ..write('id: $id, ')
          ..write('icao: $icao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode, icao.hashCode));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Meteo_Metar && other.id == this.id && other.icao == this.icao);
}

class MeteoMetarCompanion extends UpdateCompanion<Meteo_Metar> {
  final Value<int> id;
  final Value<String> icao;
  const MeteoMetarCompanion({
    this.id = const Value.absent(),
    this.icao = const Value.absent(),
  });
  MeteoMetarCompanion.insert({
    this.id = const Value.absent(),
    @required String icao,
  }) : icao = Value(icao);
  static Insertable<Meteo_Metar> custom({
    Expression<int> id,
    Expression<String> icao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (icao != null) 'desc': icao,
    });
  }

  MeteoMetarCompanion copyWith({Value<int> id, Value<String> icao}) {
    return MeteoMetarCompanion(
      id: id ?? this.id,
      icao: icao ?? this.icao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (icao.present) {
      map['desc'] = Variable<String>(icao.value);
    }
    return map;
  }
}

class $MeteoMetarTable extends MeteoMetar
    with TableInfo<$MeteoMetarTable, Meteo_Metar> {
  final GeneratedDatabase _db;
  final String _alias;
  $MeteoMetarTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('id', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _icaoMeta = const VerificationMeta('icao');
  GeneratedTextColumn _icao;
  @override
  GeneratedTextColumn get icao => _icao ??= _constructIcao();
  GeneratedTextColumn _constructIcao() {
    return GeneratedTextColumn(
      'desc',
      $tableName,
      false,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, icao];
  @override
  $MeteoMetarTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'meteo_metar';
  @override
  final String actualTableName = 'meteo_metar';
  @override
  VerificationContext validateIntegrity(Insertable<Meteo_Metar> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('desc')) {
      context.handle(
          _icaoMeta, icao.isAcceptableOrUnknown(data['desc'], _icaoMeta));
    } else if (isInserting) {
      context.missing(_icaoMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Meteo_Metar map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Meteo_Metar.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $MeteoMetarTable createAlias(String alias) {
    return $MeteoMetarTable(_db, alias);
  }
}

abstract class _$Database extends GeneratedDatabase {
  _$Database(QueryExecutor e) : super(SqlTypeSystem.defaultInstance, e);
  $C2rscAirfieldTable _c2rscAirfield;
  $C2rscAirfieldTable get c2rscAirfield =>
      _c2rscAirfield ??= $C2rscAirfieldTable(this);
  $C2rscNavigationFacilityTable _c2rscNavigationFacility;
  $C2rscNavigationFacilityTable get c2rscNavigationFacility =>
      _c2rscNavigationFacility ??= $C2rscNavigationFacilityTable(this);
  $C2rscRunwayTable _c2rscRunway;
  $C2rscRunwayTable get c2rscRunway => _c2rscRunway ??= $C2rscRunwayTable(this);
  $C2rscRunwayFacilityTable _c2rscRunwayFacility;
  $C2rscRunwayFacilityTable get c2rscRunwayFacility =>
      _c2rscRunwayFacility ??= $C2rscRunwayFacilityTable(this);
  $DafifAirfieldTable _dafifAirfield;
  $DafifAirfieldTable get dafifAirfield =>
      _dafifAirfield ??= $DafifAirfieldTable(this);
  $DafifAppcArptTypeTable _dafifAppcArptType;
  $DafifAppcArptTypeTable get dafifAppcArptType =>
      _dafifAppcArptType ??= $DafifAppcArptTypeTable(this);
  $DafifAppcAtsTypeTable _dafifAppcAtsType;
  $DafifAppcAtsTypeTable get dafifAppcAtsType =>
      _dafifAppcAtsType ??= $DafifAppcAtsTypeTable(this);
  $DafifAppcBdryTypeTable _dafifAppcBdryType;
  $DafifAppcBdryTypeTable get dafifAppcBdryType =>
      _dafifAppcBdryType ??= $DafifAppcBdryTypeTable(this);
  $DafifAppcCcIcaoTable _dafifAppcCcIcao;
  $DafifAppcCcIcaoTable get dafifAppcCcIcao =>
      _dafifAppcCcIcao ??= $DafifAppcCcIcaoTable(this);
  $DafifAppcLevelTable _dafifAppcLevel;
  $DafifAppcLevelTable get dafifAppcLevel =>
      _dafifAppcLevel ??= $DafifAppcLevelTable(this);
  $DafifAppcSuasTypeTable _dafifAppcSuasType;
  $DafifAppcSuasTypeTable get dafifAppcSuasType =>
      _dafifAppcSuasType ??= $DafifAppcSuasTypeTable(this);
  $DafifArrestingSystemTable _dafifArrestingSystem;
  $DafifArrestingSystemTable get dafifArrestingSystem =>
      _dafifArrestingSystem ??= $DafifArrestingSystemTable(this);
  $DafifAtsrouteTable _dafifAtsroute;
  $DafifAtsrouteTable get dafifAtsroute =>
      _dafifAtsroute ??= $DafifAtsrouteTable(this);
  $DafifBdryTable _dafifBdry;
  $DafifBdryTable get dafifBdry => _dafifBdry ??= $DafifBdryTable(this);
  $DafifBdryParTable _dafifBdryPar;
  $DafifBdryParTable get dafifBdryPar =>
      _dafifBdryPar ??= $DafifBdryParTable(this);
  $DafifCommunicationTable _dafifCommunication;
  $DafifCommunicationTable get dafifCommunication =>
      _dafifCommunication ??= $DafifCommunicationTable(this);
  $DafifFirUirTable _dafifFirUir;
  $DafifFirUirTable get dafifFirUir => _dafifFirUir ??= $DafifFirUirTable(this);
  $DafifHoldingTable _dafifHolding;
  $DafifHoldingTable get dafifHolding =>
      _dafifHolding ??= $DafifHoldingTable(this);
  $DafifIcaoRegionTable _dafifIcaoRegion;
  $DafifIcaoRegionTable get dafifIcaoRegion =>
      _dafifIcaoRegion ??= $DafifIcaoRegionTable(this);
  $DafifNavaidTable _dafifNavaid;
  $DafifNavaidTable get dafifNavaid => _dafifNavaid ??= $DafifNavaidTable(this);
  $DafifNavaidIlsTable _dafifNavaidIls;
  $DafifNavaidIlsTable get dafifNavaidIls =>
      _dafifNavaidIls ??= $DafifNavaidIlsTable(this);
  $DafifRunwayTable _dafifRunway;
  $DafifRunwayTable get dafifRunway => _dafifRunway ??= $DafifRunwayTable(this);
  $DafifSpecialUseAirspaceTable _dafifSpecialUseAirspace;
  $DafifSpecialUseAirspaceTable get dafifSpecialUseAirspace =>
      _dafifSpecialUseAirspace ??= $DafifSpecialUseAirspaceTable(this);
  $DafifSpecialUseAirspaceParTable _dafifSpecialUseAirspacePar;
  $DafifSpecialUseAirspaceParTable get dafifSpecialUseAirspacePar =>
      _dafifSpecialUseAirspacePar ??= $DafifSpecialUseAirspaceParTable(this);
  $DafifTrmMsaTable _dafifTrmMsa;
  $DafifTrmMsaTable get dafifTrmMsa => _dafifTrmMsa ??= $DafifTrmMsaTable(this);
  $DafifTrmSegTable _dafifTrmSeg;
  $DafifTrmSegTable get dafifTrmSeg => _dafifTrmSeg ??= $DafifTrmSegTable(this);
  $DafifVersionInfoTable _dafifVersionInfo;
  $DafifVersionInfoTable get dafifVersionInfo =>
      _dafifVersionInfo ??= $DafifVersionInfoTable(this);
  $DafifWaypointTable _dafifWaypoint;
  $DafifWaypointTable get dafifWaypoint =>
      _dafifWaypoint ??= $DafifWaypointTable(this);
  $HupgpFlightrouteTable _hupgpFlightroute;
  $HupgpFlightrouteTable get hupgpFlightroute =>
      _hupgpFlightroute ??= $HupgpFlightrouteTable(this);
  $HupgpMissionFlightRouteTable _hupgpMissionFlightRoute;
  $HupgpMissionFlightRouteTable get hupgpMissionFlightRoute =>
      _hupgpMissionFlightRoute ??= $HupgpMissionFlightRouteTable(this);
  $HupgpZMaterialAircraftTypeTable _hupgpZMaterialAircraftType;
  $HupgpZMaterialAircraftTypeTable get hupgpZMaterialAircraftType =>
      _hupgpZMaterialAircraftType ??= $HupgpZMaterialAircraftTypeTable(this);
  $MeteoTafTable _meteoTaf;
  $MeteoTafTable get meteoTaf => _meteoTaf ??= $MeteoTafTable(this);
  $MeteoWrapperTable _meteoWrapper;
  $MeteoWrapperTable get meteoWrapper =>
      _meteoWrapper ??= $MeteoWrapperTable(this);
  $MeteoMetarTable _meteoMetar;
  $MeteoMetarTable get meteoMetar => _meteoMetar ??= $MeteoMetarTable(this);
  Future<int> _resetCategory(int var1) {
    return customUpdate(
      'UPDATE meteo_wrapper SET meteo_metar_icao = NULL WHERE meteo_metar_icao = ?',
      variables: [Variable.withInt(var1)],
      updates: {meteoWrapper},
      updateKind: UpdateKind.update,
    );
  }

  CategoriesWithCountResult _rowToCategoriesWithCountResult(QueryRow row) {
    return CategoriesWithCountResult(
      id: row.readString('id'),
      desc: row.readString('desc'),
      amount: row.readString('amount'),
    );
  }

  Selectable<CategoriesWithCountResult> _categoriesWithCount() {
    return customSelect(
        'SELECT\n       c.id,\n       c.desc,\n       (SELECT COUNT(*) FROM meteo_wrapper WHERE meteo_metar_icao = c.id) AS amount\n     FROM meteo_metar c\n     UNION ALL\n     SELECT null, null, (SELECT COUNT(*) FROM meteo_wrapper WHERE meteo_metar_icao IS NULL)',
        variables: [],
        readsFrom: {
          meteoMetar,
          meteoWrapper
        }).map(_rowToCategoriesWithCountResult);
  }

  @override
  Iterable<TableInfo> get allTables => allSchemaEntities.whereType<TableInfo>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        c2rscAirfield,
        c2rscNavigationFacility,
        c2rscRunway,
        c2rscRunwayFacility,
        dafifAirfield,
        dafifAppcArptType,
        dafifAppcAtsType,
        dafifAppcBdryType,
        dafifAppcCcIcao,
        dafifAppcLevel,
        dafifAppcSuasType,
        dafifArrestingSystem,
        dafifAtsroute,
        dafifBdry,
        dafifBdryPar,
        dafifCommunication,
        dafifFirUir,
        dafifHolding,
        dafifIcaoRegion,
        dafifNavaid,
        dafifNavaidIls,
        dafifRunway,
        dafifSpecialUseAirspace,
        dafifSpecialUseAirspacePar,
        dafifTrmMsa,
        dafifTrmSeg,
        dafifVersionInfo,
        dafifWaypoint,
        hupgpFlightroute,
        hupgpMissionFlightRoute,
        hupgpZMaterialAircraftType,
        meteoTaf,
        meteoWrapper,
        meteoMetar
      ];
}

class CategoriesWithCountResult {
  final String id;
  final String desc;
  final String amount;
  CategoriesWithCountResult({
    this.id,
    this.desc,
    this.amount,
  });
}
